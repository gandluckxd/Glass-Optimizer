from fastapi import APIRouter, HTTPException
from models import DetailsRawRequest, WarehouseRemainderRequest, WarehouseMainMaterialRequest
from db_functions import get_tables, get_details_raw, get_warehouse_remainders, get_warehouse_main_material, get_goods_price
import asyncio
import time

router = APIRouter()

@router.get("/tables")
def tables():
    return get_tables()

@router.post("/details-raw")
async def details_raw(request: DetailsRawRequest):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–æ–≤
    """
    try:
        print(f"üöÄ API: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å details-raw –¥–ª—è grorderid={request.grorderid}")
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        result = get_details_raw(request.grorderid)
        
        execution_time = time.time() - start_time
        print(f"‚úÖ API: –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å")
        
        return result
        
    except Exception as e:
        execution_time = time.time() - start_time if 'start_time' in locals() else 0
        print(f"‚ùå API ERROR (details-raw): {e} (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {execution_time:.2f}—Å)")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–π–º–∞—É—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if "timeout" in str(e).lower() or execution_time > 100:
            raise HTTPException(
                status_code=408, 
                detail={
                    "error": "Query timeout", 
                    "message": "–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                    "grorderid": request.grorderid,
                    "execution_time": round(execution_time, 2),
                    "suggestions": [
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                        "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ grorderid —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    ]
                }
            )
        
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

@router.post("/warehouse-remainders")
def warehouse_remainders(request: WarehouseRemainderRequest):
    return get_warehouse_remainders(request.goodsid)

@router.post("/warehouse-main-material")
def warehouse_main_material(request: WarehouseMainMaterialRequest):
    return get_warehouse_main_material(request.goodsid)

@router.post("/goods-price")
def goods_price(request: WarehouseRemainderRequest):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ goodsid
    """
    try:
        price = get_goods_price(request.goodsid)
        return {"price": price, "goodsid": request.goodsid}
    except Exception as e:
        print(f"‚ùå API ERROR (goods-price): {e}")
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
