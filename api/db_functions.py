import fdb
from fastapi import HTTPException
import time
from config import DB_CONFIG, MAX_POOL_SIZE, CONNECTION_TIMEOUT, DB_OPERATION_TIMEOUT, LOG_DB_OPERATIONS
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
_connection_pool = []
_max_pool_size = 5

def get_db_connection():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        if LOG_DB_OPERATIONS:
            print(f"üîå DB: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")
        
        con = fdb.connect(
            port=DB_CONFIG['port'],
            host=DB_CONFIG['host'],
            database=DB_CONFIG['database'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            charset='WIN1251'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        con.default_tpb = fdb.TPB()
        con.default_tpb.isolation_level = fdb.isc_tpb_read_committed
        con.default_tpb.lock_resolution = fdb.isc_tpb_wait
        
        if LOG_DB_OPERATIONS:
            print(f"‚úÖ DB: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        return con
    except Exception as e:
        print("DB ERROR:", e)
        raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")

def get_tables():
    try:
        con = get_db_connection()
        cur = con.cursor()
        cur.execute("SELECT RDB$RELATION_NAME FROM RDB$RELATIONS WHERE RDB$SYSTEM_FLAG=0;")
        tables = [row[0].strip() for row in cur.fetchall()]
        con.close()
        return {"tables": tables}
    except Exception as e:
        print("DB ERROR (tables):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

def get_details_raw(grorderid: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    """
    try:
        print(f"üîÑ DB: –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è grorderid={grorderid}")
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        simple_sql = """
        select count(*) as cnt
        from grorders gr
        join grordersdetail grd on grd.grorderid = gr.grorderid
        where gr.grorderid = ?
        """
        
        print(f"üîç DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        start_time = time.time()
        cur.execute(simple_sql, (grorderid,))
        count_result = cur.fetchone()
        check_time = time.time() - start_time
        
        if not count_result or count_result[0] == 0:
            print(f"‚ö†Ô∏è DB: –î–∞–Ω–Ω—ã–µ –¥–ª—è grorderid={grorderid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            con.close()
            return {"grorder_info": {}, "items": []}
        
        print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω–æ {count_result[0]} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ {check_time:.2f}—Å")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        sql = """
        select
            gr.ordernames as gr_ordernames,
            gr.groupdate as groupdate,
            gr.name as gr_name,
            oi.orderitemsid,
            oi.name as oi_name,
            o.orderno,
            gp.marking as gp_marking,
            g.marking as g_marking,
            g.goodsid,
            grd.qty * itd.qty as total_qty,
            itd.width,
            itd.height
        from grorders gr
        join grordersdetail grd on grd.grorderid = gr.grorderid
        join orderitems oi on oi.orderitemsid = grd.orderitemsid
        join orders o on o.orderid = oi.orderid
        join itemsdetail itd on itd.orderitemsid = oi.orderitemsid
        join goods g on g.goodsid = itd.goodsid
        join groupgoods gg on gg.grgoodsid = itd.grgoodsid
        join groupgoodstypes ggt on ggt.ggtypeid = gg.ggtypeid
        join orderitemsgl oig on oig.orderitemsid = oi.orderitemsid
        join gpackettypes gp on gp.gptypeid = oig.gptypeid
        where gr.grorderid = ?
        and ggt.code = 'Glass'
        order by oi.orderitemsid
        """
        
        print(f"üîÑ DB: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        
        cur.execute(sql, (grorderid,))
        rows = cur.fetchall()
        
        execution_time = time.time() - start_time
        print(f"‚úÖ DB: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å, –ø–æ–ª—É—á–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        grorder_info = {}
        items = []
        
        if rows:
            first_row = rows[0]
            grorder_info = {
                "gr_ordernames": first_row[0],
                "groupdate": first_row[1],
                "gr_name": first_row[2]
            }
            
            for row in rows:
                items.append({
                    "orderitemsid": row[3],
                    "oi_name": row[4],
                    "orderno": row[5],        # –ò–°–ü–†–ê–í–õ–ï–ù–û: orderno
                    "gp_marking": row[6],     # –ò–°–ü–†–ê–í–õ–ï–ù–û: gp_marking 
                    "g_marking": row[7],      # –ò–°–ü–†–ê–í–õ–ï–ù–û: g_marking
                    "goodsid": row[8],        # –ò–°–ü–†–ê–í–õ–ï–ù–û: goodsid
                    "total_qty": row[9],      # –ò–°–ü–†–ê–í–õ–ï–ù–û: total_qty
                    "width": row[10],         # –ò–°–ü–†–ê–í–õ–ï–ù–û: width
                    "height": row[11]         # –ò–°–ü–†–ê–í–õ–ï–ù–û: height
                })
        
        con.close()
        total_time = time.time() - start_time + check_time
        print(f"üéâ DB: –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f}—Å, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return {
            "grorder_info": grorder_info,
            "items": items,
            "performance": {
                "total_time": round(total_time, 2),
                "records_count": len(items)
            }
        }
        
    except fdb.DatabaseError as e:
        print(f"‚ùå DB ERROR (database): {e}")
        if 'con' in locals():
            con.close()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        print(f"‚ùå DB ERROR (general): {e}")
        if 'con' in locals():
            con.close()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")


def get_warehouse_remainders(goodsid: int):
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        price = get_goods_price(goodsid)
        
        sql = """
        select
            g.marking as g_marking,
            whm.goodsid,
            whm.width,
            whm.height,
            whm.qty - whm.reserveqty as qty,
            m.amfactor
        from warehouseremainder whm
        join goods g on g.goodsid = whm.goodsid
        join groupgoods gg on gg.grgoodsid = g.grgoodsid
        join measure m on m.measureid = gg.measureid
        where whm.goodsid = ?
        """
        cur.execute(sql, (goodsid,))
        result = [
            {
                "g_marking": row[0],
                "goodsid": row[1],
                "width": row[2],
                "height": row[3],
                "qty": row[4],
                "amfactor": row[5],
                "cost": price  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            }
            for row in cur.fetchall()
        ]
        con.close()
        return {"remainders": result}
    except Exception as e:
        print("DB ERROR (warehouse-remainders):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

def get_warehouse_main_material(goodsid: int):
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
        price = get_goods_price(goodsid)
        
        sql = """
        select t.*, wh.qty, wh.qty / t.amfactor as res_qty, wh.measureid as wh_measureid
        from(
            select
                g.marking as g_marking,
                g.goodsid,
                ggm.measureid,
                gg.width,
                gg.height,
                m.amfactor
            from goods g
            join groupgoods gg on gg.grgoodsid = g.grgoodsid
            join grgoodsmeasure ggm on ggm.grgoodsid = gg.grgoodsid
            join measure m on m.measureid = ggm.measureid
            where g.goodsid = ?
            and ggm.ismain = 1
        ) t
        left join warehouse wh on (wh.goodsid = t.goodsid) and (wh.measureid = t.measureid)
        """
        cur.execute(sql, (goodsid,))
        result = [
            {
                "g_marking": row[0],
                "goodsid": row[1],
                "measureid": row[2],
                "width": row[3],
                "height": row[4],
                "amfactor": row[5],
                "qty": row[6],
                "res_qty": row[7],
                "wh_measureid": row[8],
                "cost": price  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            }
            for row in cur.fetchall()
        ]
        con.close()
        return {"main_material": result}
    except Exception as e:
        print("DB ERROR (warehouse-main-material):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")



def upload_optimization_to_db(grorderid: int, sheets_data: list, adjust_materials: bool = False):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É OPTDATA
    
    Args:
        grorderid: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        sheets_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏—Å—Ç–∞—Ö
        adjust_materials: –§–ª–∞–≥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    con = None
    operation_start_time = time.time()
    
    try:
        print(f"üîÑ DB: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–ª—è grorderid={grorderid}")
        print(f"üìä DB: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(sheets_data)}")
        print(f"üîß DB: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {adjust_materials}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∞—Ö
        if LOG_DB_OPERATIONS:
            print(f"üìã DB: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–∏—Ö –ª–∏—Å—Ç–æ–≤:")
            for i, sheet in enumerate(sheets_data):
                print(f"   –õ–∏—Å—Ç {i+1}: goodsid={sheet.get('goodsid')}, —Ä–∞–∑–º–µ—Ä—ã={sheet.get('width')}x{sheet.get('height')}, "
                      f"qty={sheet.get('qty', 1)}, amfactor={sheet.get('amfactor', 1.0)}, is_remainder={sheet.get('is_remainder', 0)}")
                if sheet.get('free_rectangles'):
                    print(f"     –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(sheet.get('free_rectangles', []))}")
        
        db_connect_start = time.time()
        con = get_db_connection()
        db_connect_time = time.time() - db_connect_start
        print(f"‚è±Ô∏è DB: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {db_connect_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        cur = con.cursor()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction_start = time.time()
        con.begin()
        print(f"üîÑ DB: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞")
        
        # 1. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ grorderid
        delete_start = time.time()
        delete_sql = "DELETE FROM OPTDATA WHERE GRORDERID = ?"
        print(f"üóëÔ∏è DB: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è grorderid={grorderid}")
        cur.execute(delete_sql, (grorderid,))
        deleted_count = cur.rowcount if hasattr(cur, 'rowcount') else 0
        delete_time = time.time() - delete_start
        print(f"üóëÔ∏è DB: –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π –∑–∞ {delete_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        insert_start = time.time()
        insert_sql = """
        INSERT INTO OPTDATA (
            OPTDATAID, GRORDERID, GOODSID, NUMGLASS, WGLASS, HGLASS, 
            TRASHSQU, PERCENTFULL, PERCENTOST, PIECECOUNT, SUMSQUPIECES, 
            DATAPIECE, DATAEMPTY, QTY, ISREMD
        ) VALUES (
            gen_id(gen_optdata, 1), ?, ?, ?, ?, ?, 
            ?, ?, ?, ?, ?, 
            ?, NULL, ?, ?
        )
        """
        
        inserted_count = 0
        insert_errors = 0
        
        print(f"üîß DB: –ù–∞—á–∞–ª–æ –≤—Å—Ç–∞–≤–∫–∏ {len(sheets_data)} –ª–∏—Å—Ç–æ–≤...")
        
        for i, sheet in enumerate(sheets_data):
            sheet_start = time.time()
            
            # –ü–æ–ª—É—á–∞–µ–º goodsid –∏ qty –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
            goodsid = sheet.get('goodsid')
            if not goodsid:
                print(f"‚ö†Ô∏è DB: –õ–∏—Å—Ç {i+1}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç goodsid")
                insert_errors += 1
                continue
                
            # qty –¥–ª—è OPTDATA - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ (–±–µ–∑ amfactor)
            qty = sheet.get('qty', 1)
            # amfactor –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
            amfactor = sheet.get('amfactor', 1.0)
            is_remainder = sheet.get('is_remainder', 0)
            
            print(f"üîß DB: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞ {i+1}/{len(sheets_data)}: goodsid={goodsid}, qty={qty} (–ª–∏—Å—Ç–æ–≤), amfactor={amfactor}, is_remainder={is_remainder}")
            
            try:
                params = (
                    grorderid,
                    sheet['goodsid'], sheet['num_glass'], sheet['width'], sheet['height'],
                    sheet['trash_area'], sheet['percent_full'], sheet['percent_waste'],
                    sheet['piece_count'], sheet['sum_area'],
                    sheet['xml_data'],
                    qty, sheet['is_remainder']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º qty (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤) –¥–ª—è OPTDATA
                )
                cur.execute(insert_sql, params)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏
                if hasattr(cur, 'rowcount'):
                    rows_affected = cur.rowcount
                    print(f"üîß DB: INSERT –≤ OPTDATA –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                else:
                    print(f"üîß DB: INSERT –≤ OPTDATA –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ rowcount –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                inserted_count += 1
                sheet_time = time.time() - sheet_start
                print(f"‚úÖ DB: –£–°–ü–ï–®–ù–û –≤—Å—Ç–∞–≤–ª–µ–Ω –ª–∏—Å—Ç {inserted_count}: goodsid={goodsid}, is_remainder={is_remainder}, qty={qty} (–ª–∏—Å—Ç–æ–≤) –∑–∞ {sheet_time:.2f}—Å")
                
            except Exception as e:
                insert_errors += 1
                sheet_time = time.time() - sheet_start
                print(f"‚ùå DB: –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ª–∏—Å—Ç–∞ {i+1} –≤ OPTDATA –∑–∞ {sheet_time:.2f}—Å: {e}")
                print(f"‚ùå DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Å—Ç–∞: goodsid={goodsid}, is_remainder={is_remainder}, qty={qty}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –ª–∏—Å—Ç–æ–≤
                continue
        
        insert_time = time.time() - insert_start
        print(f"üìä DB: –í—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {inserted_count} —É—Å–ø–µ—à–Ω–æ, {insert_errors} –æ—à–∏–±–æ–∫ –∑–∞ {insert_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        materials_adjusted = False
        materials_time = 0
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç—ã —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏
        remainder_sheets = [s for s in sheets_data if s.get('is_remainder', 0)]
        print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–æ–≤ —Å –¥–µ–ª–æ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏: {len(remainder_sheets)}")
        
        if remainder_sheets and LOG_DB_OPERATIONS:
            print(f"üîß DB: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏:")
            for i, sheet in enumerate(remainder_sheets):
                print(f"   - –õ–∏—Å—Ç {i+1}: goodsid={sheet.get('goodsid')}, —Ä–∞–∑–º–µ—Ä—ã={sheet.get('width')}x{sheet.get('height')}, qty={sheet.get('qty')}")
        
        if adjust_materials:
            print(f"üîß DB: –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è grorderid={grorderid}")
            print(f"üîß DB: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {len(sheets_data)}")
            
            materials_start = time.time()
            try:
                materials_result = adjust_materials_for_optimization(con, grorderid, sheets_data)
                materials_adjusted = materials_result.get('success', False)
                materials_time = time.time() - materials_start
                print(f"üîß DB: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {'–£–°–ü–ï–®–ù–û' if materials_adjusted else '–û–®–ò–ë–ö–ê'} –∑–∞ {materials_time:.2f}—Å")
                if materials_adjusted:
                    print(f"üîß DB: –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {materials_result}")
            except Exception as e:
                materials_time = time.time() - materials_start
                print(f"‚ùå DB: –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ {materials_time:.2f}—Å: {e}")
                import traceback
                print(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
                # –ù–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        else:
            print(f"üîß DB: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            if remainder_sheets:
                print(f"‚ö†Ô∏è DB: –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–π–¥–µ–Ω–æ {len(remainder_sheets)} –ª–∏—Å—Ç–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
        
        # –ö–æ–º–º–∏—Ç–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        commit_start = time.time()
        con.commit()
        commit_time = time.time() - commit_start
        print(f"‚úÖ DB: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞ –∑–∞ {commit_time:.2f}—Å. –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –ª–∏—Å—Ç–æ–≤.")
        
        total_time = time.time() - operation_start_time
        print(f"üéâ DB: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä DB: –ò—Ç–æ–≥–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        print(f"   - –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î: {db_connect_time:.2f}—Å")
        print(f"   - –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {delete_time:.2f}—Å")
        print(f"   - –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π: {insert_time:.2f}—Å")
        if adjust_materials:
            print(f"   - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {materials_time:.2f}—Å")
        print(f"   - –ö–æ–º–º–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {commit_time:.2f}—Å")
        print(f"   - –£—Å–ø–µ—à–Ω–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: {inserted_count}")
        print(f"   - –û—à–∏–±–æ–∫ –≤—Å—Ç–∞–≤–∫–∏: {insert_errors}")
        
        return {
            "success": True, 
            "inserted_count": inserted_count,
            "insert_errors": insert_errors,
            "materials_adjusted": materials_adjusted,
            "performance": {
                "total_time": round(total_time, 2),
                "db_connect_time": round(db_connect_time, 2),
                "delete_time": round(delete_time, 2),
                "insert_time": round(insert_time, 2),
                "materials_time": round(materials_time, 2),
                "commit_time": round(commit_time, 2)
            }
        }

    except Exception as e:
        total_time = time.time() - operation_start_time
        print(f"‚ùå DB: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ {total_time:.2f}—Å: {e}")
        if con:
            try:
                con.rollback()
                print(f"üîÑ DB: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–∫–∞—á–µ–Ω–∞")
            except Exception as rollback_error:
                print(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ API

    finally:
        if con:
            try:
                con.close()
                print("üîí DB: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
            except Exception as close_error:
                print(f"‚ùå DB: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {close_error}")

def adjust_materials_for_optimization(con, grorderid: int, sheets_data: list):
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –ø—Ä–∏—Ö–æ–¥ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    
    Args:
        con: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        grorderid: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        sheets_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏—Å—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    operation_start_time = time.time()
    
    try:
        print(f"üîß DB: –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è grorderid={grorderid}")
        print(f"üîß DB: –ü–æ–ª—É—á–µ–Ω–æ {len(sheets_data)} –ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if not con or con.closed:
            print("‚ùå DB: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ")
            con = get_db_connection()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö
        remainder_count = 0
        material_count = 0
        if LOG_DB_OPERATIONS:
            print(f"üìã DB: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:")
            for i, sheet in enumerate(sheets_data):
                is_remainder = sheet.get('is_remainder', 0)
                goodsid = sheet.get('goodsid')
                if is_remainder:
                    remainder_count += 1
                else:
                    material_count += 1
                print(f"   –õ–∏—Å—Ç {i+1}: goodsid={goodsid}, is_remainder={is_remainder}, "
                      f"qty={sheet.get('qty', 1)}, amfactor={sheet.get('amfactor', 1.0)}")
        
        print(f"üîß DB: –ò—Ç–æ–≥–æ –ª–∏—Å—Ç–æ–≤: {material_count} –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, {remainder_count} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        cur = con.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–º–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        grorder_sql = "SELECT name FROM grorders WHERE grorderid = ?"
        cur.execute(grorder_sql, (grorderid,))
        grorder_result = cur.fetchone()
        grorder_name = grorder_result[0] if grorder_result else f"–ó–∞–¥–∞–Ω–∏–µ {grorderid}"
        
        # 1. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∞–Ω–∏—è–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (OUTLAY)
        print(f"üîß DB: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        outlay_sql = """
        SELECT outlayid FROM outlay 
        WHERE grorderid = ? AND deleted = 0
        ORDER BY outlayid
        """
        cur.execute(outlay_sql, (grorderid,))
        outlay_result = cur.fetchone()
        
        if outlay_result:
            outlayid = outlay_result[0]
            print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ outlayid={outlayid}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
            print(f"üîß DB: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π GUID
            guid_sql = "SELECT guidhi, guidlo, guid FROM new_guid"
            cur.execute(guid_sql)
            guid_result = cur.fetchone()
            guidhi, guidlo, guid = guid_result
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π
            waybill_sql = "SELECT gen_id(gen_waybill, 1) FROM rdb$database"
            cur.execute(waybill_sql)
            waybill = cur.fetchone()[0]
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ
            create_outlay_sql = """
            INSERT INTO OUTLAY (
                OUTLAYID, WAYBILL, OUTLAYDATE, CUSTOMERID, OUTLAYTYPE, 
                GRORDERID, PARENTID, ISAPPROVED, RCOMMENT, WHLISTID, 
                RECCOLOR, RECFLAG, GUIDHI, GUIDLO, OWNERID, 
                DELETED, DATECREATED, DATEMODIFIED, DATEDELETED, JOBTASKID, GUID
            ) VALUES (
                gen_id(gen_outlay, 1), ?, CURRENT_DATE, NULL, 1, 
                ?, NULL, 0, ?, 0, 
                NULL, NULL, ?, ?, 0, 
                0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, ?
            )
            """
            cur.execute(create_outlay_sql, (waybill, grorderid, grorder_name, guidhi, guidlo, guid))
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è
            outlayid_sql = "SELECT gen_id(gen_outlay, 0) FROM rdb$database"
            cur.execute(outlayid_sql)
            outlayid = cur.fetchone()[0]
            print(f"üîß DB: –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ outlayid={outlayid}")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è
        print(f"üîß DB: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è...")
        delete_outlay_detail_sql = """
        DELETE FROM outlaydetail WHERE outlaydetailid IN (
            SELECT ot.outlaydetailid
            FROM outlaydetail ot
            JOIN goods g ON g.goodsid = ot.goodsid
            JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
            WHERE ot.outlayid = ? AND gg.ggtypeid = 38
        )
        """
        cur.execute(delete_outlay_detail_sql, (outlayid,))
        deleted_details = cur.rowcount
        print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_details} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ —Å–ø–∏—Å–∞–Ω–∏—è
        delete_outlay_remainder_sql = """
        DELETE FROM outlayremainder WHERE outlayremainderid IN (
            SELECT otr.outlayremainderid
            FROM outlayremainder otr
            JOIN goods g ON g.goodsid = otr.goodsid
            JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
            WHERE otr.outlayid = ? AND gg.ggtypeid = 38
        )
        """
        cur.execute(delete_outlay_remainder_sql, (outlayid,))
        deleted_remainders = cur.rowcount
        print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_remainders} –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ —Å–ø–∏—Å–∞–Ω–∏—è")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∞–Ω–∏—è...")
        print(f"üîß DB: –í—Å–µ–≥–æ –ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(sheets_data)}")
        materials_used = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        remainders_used = []  # –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        
        for i, sheet in enumerate(sheets_data):
            goodsid = sheet.get('goodsid')
            if not goodsid:
                print(f"‚ö†Ô∏è DB: –õ–∏—Å—Ç {i+1}: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º - –Ω–µ—Ç goodsid")
                continue
                
            # qty –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤
            qty = sheet.get('qty', 1)
            # amfactor –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞
            amfactor = sheet.get('amfactor', 1.0)
            # –í—ã—á–∏—Å–ª—è–µ–º qty_with_amfactor –ø—Ä—è–º–æ –∑–¥–µ—Å—å
            qty_with_amfactor = qty * amfactor
            is_remainder = sheet.get('is_remainder', 0)
            
            print(f"üîß DB: –õ–∏—Å—Ç {i+1}: goodsid={goodsid}, is_remainder={is_remainder}, qty={qty} (–ª–∏—Å—Ç–æ–≤), amfactor={amfactor}, qty_with_amfactor={qty_with_amfactor} (–≤—ã—á–∏—Å–ª–µ–Ω–æ)")
            
            if is_remainder:
                # –≠—Ç–æ –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ - –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è outlayremainders
                remainders_used.append({
                    'goodsid': goodsid,
                    'width': sheet.get('width', 0),
                    'height': sheet.get('height', 0),
                    'qty': qty  # –ò—Å–ø–æ–ª—å–∑—É–µ–º qty (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤) –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
                })
                print(f"üîß DB: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ goodsid={goodsid}, {sheet.get('width', 0)}x{sheet.get('height', 0)}, qty={qty} (–ª–∏—Å—Ç–æ–≤)")
            else:
                # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª - –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª—è outlaydetail
                if goodsid not in materials_used:
                    materials_used[goodsid] = 0
                materials_used[goodsid] += qty_with_amfactor  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ qty_with_amfactor –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                print(f"üîß DB: –ú–∞—Ç–µ—Ä–∏–∞–ª goodsid={goodsid}: qty_with_amfactor={qty_with_amfactor} (–≤—ã—á–∏—Å–ª–µ–Ω–æ: {qty} * {amfactor})")
        
        print(f"üîß DB: –ò—Ç–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials_used)}, –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(remainders_used)}")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
        for goodsid, qty_with_amfactor in materials_used.items():
            # –ü–æ–ª—É—á–∞–µ–º measureid –¥–ª—è —Ç–æ–≤–∞—Ä–∞
            measure_sql = """
            SELECT ggm.measureid FROM goods g
            JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
            JOIN grgoodsmeasure ggm ON ggm.grgoodsid = gg.grgoodsid
            WHERE g.goodsid = ? AND ggm.ismain = 1
            """
            cur.execute(measure_sql, (goodsid,))
            measure_result = cur.fetchone()
            measureid = measure_result[0] if measure_result else 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–Ω–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–µ (—Å —É—á–µ—Ç–æ–º amfactor)
            insert_outlay_detail_sql = """
            INSERT INTO OUTLAYDETAIL (
                OUTLAYDETAILID, OUTLAYID, GOODSID, QTY, MEASUREID, 
                ISAPPROVED, SELLERPRICE, SELLERCURRENCYID
            ) VALUES (
                gen_id(gen_outlaydetail, 1), ?, ?, ?, ?, 
                0, 0, 1
            )
            """
            cur.execute(insert_outlay_detail_sql, (outlayid, goodsid, qty_with_amfactor, measureid))
            print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ goodsid={goodsid}, qty={qty_with_amfactor} (–≤—ã—á–∏—Å–ª–µ–Ω–æ: qty * amfactor)")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤
        print(f"üîß DB: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É...")
        remainder_groups = {}
        
        for remainder in remainders_used:
            goodsid = remainder['goodsid']
            width = remainder['width']
            height = remainder['height']
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
            key = (goodsid, width, height)
            
            if key not in remainder_groups:
                remainder_groups[key] = {
                    'goodsid': goodsid,
                    'width': width,
                    'height': height,
                    'qty': 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                }
            
            remainder_groups[key]['qty'] += 1
        
        print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {len(remainder_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
        print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∞–Ω–∏–π –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
        remainders_outlay_added = 0
        
        for i, (key, remainder_data) in enumerate(remainder_groups.items()):
            goodsid = remainder_data['goodsid']
            width = remainder_data['width']
            height = remainder_data['height']
            qty = remainder_data['qty']  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            
            print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ {i+1}: goodsid={goodsid}, {width}x{height}, qty={qty} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤)")
            
            try:
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ —Å–ø–∏—Å–∞–Ω–Ω–æ–º –¥–µ–ª–æ–≤–æ–º –æ—Å—Ç–∞—Ç–∫–µ
                insert_outlay_remainder_sql = """
                INSERT INTO OUTLAYREMAINDER (
                    OUTLAYREMAINDERID, OUTLAYID, GOODSID, ISAPPROVED, 
                    THICK, WIDTH, HEIGHT, QTY, SELLERPRICE, SELLERCURRENCYID
                ) VALUES (
                    gen_id(gen_outlayremainder, 1), ?, ?, 0, 
                    0, ?, ?, ?, 0, 1
                )
                """
                print(f"üîß DB: –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –≤ OUTLAYREMAINDER —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: outlayid={outlayid}, goodsid={goodsid}, width={width}, height={height}, qty={qty}")
                cur.execute(insert_outlay_remainder_sql, (outlayid, goodsid, width, height, qty))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏
                if hasattr(cur, 'rowcount'):
                    rows_affected = cur.rowcount
                    print(f"üîß DB: INSERT –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                else:
                    print(f"üîß DB: INSERT –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ rowcount –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
                remainders_outlay_added += 1
                print(f"‚úÖ DB: –£–°–ü–ï–®–ù–û –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–ª–æ–≤–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞ goodsid={goodsid}, {width}x{height}, qty={qty} (–ª–∏—Å—Ç–æ–≤)")
                
            except Exception as e:
                print(f"‚ùå DB: –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ OUTLAYREMAINDER: {e}")
                print(f"‚ùå DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: outlayid={outlayid}, goodsid={goodsid}, width={width}, height={height}, qty={qty}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                continue
        
        print(f"üîß DB: –°–ø–∏—Å–∞–Ω–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {remainders_outlay_added}")
        
        # 2. –†–∞–±–æ—Ç–∞ —Å –ø—Ä–∏—Ö–æ–¥–∞–º–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (SUPPLY) - –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        print(f"üîß DB: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Ö–æ–¥–æ–≤ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        grorder_name_sql = "SELECT name FROM grorders WHERE grorderid = ?"
        cur.execute(grorder_name_sql, (grorderid,))
        grorder_name_result = cur.fetchone()
        grorder_name = grorder_name_result[0] if grorder_name_result else f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è {grorderid}"
        
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏—Ö–æ–¥
        supply_sql = """
        SELECT supplyid FROM supply 
        WHERE grorderid = ? AND supplytype = 1 AND deleted = 0
        ORDER BY supplyid
        """
        print(f"üîß DB: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏—Ö–æ–¥ –¥–ª—è grorderid={grorderid} —Å supplytype=1")
        cur.execute(supply_sql, (grorderid,))
        supply_result = cur.fetchone()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ supply –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ grorderid
        check_all_supply_sql = """
        SELECT supplyid, waybill, supplytype, deleted FROM supply WHERE grorderid = ?
        """
        cur.execute(check_all_supply_sql, (grorderid,))
        all_supply_results = cur.fetchall()
        print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {len(all_supply_results)} –∑–∞–ø–∏—Å–µ–π –≤ supply –¥–ª—è grorderid={grorderid}")
        for i, (supplyid, waybill, supplytype, deleted) in enumerate(all_supply_results):
            print(f"   - –ó–∞–ø–∏—Å—å {i+1}: supplyid={supplyid}, waybill='{waybill}', supplytype={supplytype}, deleted={deleted}")
        
        if supply_result:
            supplyid = supply_result[0]
            print(f"üîß DB: –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏—Ö–æ–¥ supplyid={supplyid}")
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥
            print(f"üîß DB: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤...")
            print(f"üîß DB: –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–∏—Ö–æ–¥ —Å supplytype=1 –∏ deleted=0 –¥–ª—è grorderid={grorderid}")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π GUID
                guid_sql = "SELECT guidhi, guidlo, guid FROM new_guid"
                cur.execute(guid_sql)
                guid_result = cur.fetchone()
                guidhi, guidlo, guid = guid_result
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫–∞–∫ waybill
                waybill = grorder_name
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥
                create_supply_sql = """
                INSERT INTO SUPPLY (
                    SUPPLYID, WAYBILL, SUPPLYDATE, SUPPLIERID, SUPPLYTYPE, 
                    GRORDERID, PARENTID, ISAPPROVED, RCOMMENT, WHLISTID, 
                    RECCOLOR, RECFLAG, GUIDHI, GUIDLO, OWNERID, 
                    DELETED, DATECREATED, DATEMODIFIED, DATEDELETED, JOBTASKID, GUID
                ) VALUES (
                    gen_id(gen_supply, 1), ?, CURRENT_DATE, NULL, 1, 
                    ?, NULL, 0, ?, 0, 
                    NULL, NULL, ?, ?, 0, 
                    0, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, NULL, NULL, ?
                )
                """
                print(f"üîß DB: –°–æ–∑–¥–∞–µ–º –ø—Ä–∏—Ö–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: waybill='{waybill}', grorderid={grorderid}, comment='{grorder_name}'")
                cur.execute(create_supply_sql, (waybill, grorderid, grorder_name, guidhi, guidlo, guid))
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏—Ö–æ–¥–∞
                supplyid_sql = "SELECT gen_id(gen_supply, 0) FROM rdb$database"
                cur.execute(supplyid_sql)
                supplyid = cur.fetchone()[0]
                print(f"üîß DB: –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–∏—Ö–æ–¥ supplyid={supplyid}")
                
            except Exception as e:
                print(f"‚ùå DB: –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–∏—Ö–æ–¥–∞
                supplyid = None
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø—Ä–∏—Ö–æ–¥–∞
        if supplyid:
            print(f"üîß DB: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏—Ö–æ–¥–∞...")
            try:
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –µ—Å—Ç—å –≤ supplyremainder –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ supplyid
                check_supply_remainder_sql = """
                SELECT COUNT(*) FROM supplyremainder WHERE supplyid = ?
                """
                cur.execute(check_supply_remainder_sql, (supplyid,))
                supply_remainder_count = cur.fetchone()[0]
                print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {supply_remainder_count} –∑–∞–ø–∏—Å–µ–π –≤ supplyremainder –¥–ª—è supplyid={supplyid}")
                
                # –ü—Ä–æ–≤–µ—Ä–∏–º, —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ñ–∏–ª—å—Ç—Ä—É ggtypeid = 38
                check_supply_remainder_filtered_sql = """
                SELECT COUNT(*) FROM supplyremainder suprem
                JOIN goods g ON g.goodsid = suprem.goodsid
                JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                WHERE suprem.supplyid = ? AND gg.ggtypeid = 38
                """
                cur.execute(check_supply_remainder_filtered_sql, (supplyid,))
                supply_remainder_filtered_count = cur.fetchone()[0]
                print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {supply_remainder_filtered_count} –∑–∞–ø–∏—Å–µ–π –≤ supplyremainder —Å ggtypeid = 38")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ supplyremainder —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ ggtypeid = 38
                delete_supply_remainder_sql = """
                DELETE FROM supplyremainder WHERE supplyremainderid IN (
                    SELECT suprem.supplyremainderid
                    FROM supplyremainder suprem
                    JOIN goods g ON g.goodsid = suprem.goodsid
                    JOIN groupgoods gg ON gg.grgoodsid = g.grgoodsid
                    WHERE suprem.supplyid = ? AND gg.ggtypeid = 38
                )
                """
                cur.execute(delete_supply_remainder_sql, (supplyid,))
                deleted_supply_remainders = cur.rowcount
                print(f"üîß DB: –£–¥–∞–ª–µ–Ω–æ {deleted_supply_remainders} –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ supplyremainder")
                
            except Exception as e:
                print(f"‚ùå DB: –û–®–ò–ë–ö–ê –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏—Ö–æ–¥–∞: {e}")
        else:
            print(f"‚ö†Ô∏è DB: –ü—Ä–∏—Ö–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞
        print(f"üîß DB: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Ä–∞–∑–º–µ—Ä—É –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞...")
        supply_remainder_groups = {}
        
        for sheet in sheets_data:
            goodsid = sheet.get('goodsid')
            if not goodsid:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö (free_rectangles)
            free_rectangles = sheet.get('free_rectangles', [])
            
            print(f"üîß DB: –õ–∏—Å—Ç goodsid={goodsid}: –Ω–∞–π–¥–µ–Ω–æ {len(free_rectangles)} –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
            
            for rect_data in free_rectangles:
                width = rect_data.get('width', 0)
                height = rect_data.get('height', 0)
                
                if width <= 0 or height <= 0:
                    continue
                
                print(f"üîß DB: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫: goodsid={goodsid}, {width}x{height}")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
                key = (goodsid, width, height)
                
                if key not in supply_remainder_groups:
                    supply_remainder_groups[key] = {
                        'goodsid': goodsid,
                        'width': width,
                        'height': height,
                        'qty': 0  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                    }
                
                supply_remainder_groups[key]['qty'] += 1
        
        print(f"üîß DB: –ù–∞–π–¥–µ–Ω–æ {len(supply_remainder_groups)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –ø—Ä–∏—Ö–æ–¥
        print(f"üîß DB: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—Ä–∏—Ö–æ–¥...")
        remainders_added = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Ö–æ–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if not supplyid:
            print(f"‚ö†Ô∏è DB: –ü—Ä–∏—Ö–æ–¥ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—Ä–∏—Ö–æ–¥")
        else:
            for i, (key, remainder_data) in enumerate(supply_remainder_groups.items()):
                goodsid = remainder_data['goodsid']
                width = remainder_data['width']
                height = remainder_data['height']
                qty = remainder_data['qty']  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
                    price = get_goods_price(goodsid)
                    print(f"üîß DB: –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price}")
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø—Ä–∏—Ö–æ–¥
                    insert_supply_remainder_sql = """
                    INSERT INTO SUPPLYREMAINDER (
                        SUPPLYREMAINDERID, SUPPLYID, GOODSID, ISAPPROVED, 
                        THICK, WIDTH, HEIGHT, QTY, SELLERPRICE, SELLERCURRENCYID
                    ) VALUES (
                        gen_id(gen_supplyremainder, 1), ?, ?, 0, 
                        0, ?, ?, ?, ?, 1
                    )
                    """
                    print(f"üîß DB: –í—ã–ø–æ–ª–Ω—è–µ–º INSERT –≤ SUPPLYREMAINDER —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: supplyid={supplyid}, goodsid={goodsid}, width={width}, height={height}, qty={qty}, price={price} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤)")
                    cur.execute(insert_supply_remainder_sql, (supplyid, goodsid, width, height, qty, price))
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å—Ç–∞–≤–∫–∏
                    if hasattr(cur, 'rowcount'):
                        rows_affected = cur.rowcount
                        print(f"üîß DB: INSERT –≤ SUPPLYREMAINDER –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å—Ç—Ä–æ–∫: {rows_affected}")
                    else:
                        print(f"üîß DB: INSERT –≤ SUPPLYREMAINDER –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ rowcount –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    
                    remainders_added += 1
                    print(f"‚úÖ DB: –£–°–ü–ï–®–ù–û –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –¥–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫ –≤ –ø—Ä–∏—Ö–æ–¥ goodsid={goodsid}, {width}x{height}, qty={qty} (–æ—Å—Ç–∞—Ç–∫–æ–≤)")
                    
                except Exception as e:
                    print(f"‚ùå DB: –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ SUPPLYREMAINDER: {e}")
                    print(f"‚ùå DB: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: supplyid={supplyid}, goodsid={goodsid}, width={width}, height={height}, qty={qty}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    continue
        
        total_time = time.time() - operation_start_time
        print(f"‚úÖ DB: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"üìä DB: –ò—Ç–æ–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:")
        print(f"   - –°–ø–∏—Å–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {len(materials_used)}")
        print(f"   - –°–ø–∏—Å–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {remainders_outlay_added}")
        print(f"   - –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ –ø—Ä–∏—Ö–æ–¥: {remainders_added}")
        print(f"   - –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if remainders_outlay_added == 0 and remainder_count > 0:
            print(f"‚ö†Ô∏è DB: –í–ù–ò–ú–ê–ù–ò–ï! –ù–∞–π–¥–µ–Ω–æ {remainder_count} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤, –Ω–æ —Å–æ–∑–¥–∞–Ω–æ 0 –∑–∞–ø–∏—Å–µ–π –≤ OUTLAYREMAINDER")
            print(f"‚ö†Ô∏è DB: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - –û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –±—ã–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            print(f"   - –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–ª–∞–≥–æ–º is_remainder")
            print(f"   - –ü—Ä–æ–±–ª–µ–º–∞ —Å goodsid")
        elif remainders_outlay_added > 0:
            print(f"‚úÖ DB: –£–°–ü–ï–®–ù–û! –°–æ–∑–¥–∞–Ω–æ {remainders_outlay_added} –∑–∞–ø–∏—Å–µ–π –≤ OUTLAYREMAINDER")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        if remainders_added == 0:
            print(f"‚ö†Ô∏è DB: –í–ù–ò–ú–ê–ù–ò–ï! –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –ø—Ä–∏—Ö–æ–¥–∞")
            print(f"‚ö†Ô∏è DB: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - –ù–µ—Ç –ø–æ–ª–µ–∑–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            print(f"   - –û—Å—Ç–∞—Ç–∫–∏ –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤")
            print(f"   - –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö free_rectangles")
        elif remainders_added > 0:
            print(f"‚úÖ DB: –£–°–ü–ï–®–ù–û! –°–æ–∑–¥–∞–Ω–æ {remainders_added} –∑–∞–ø–∏—Å–µ–π –≤ SUPPLYREMAINDER")
        
        return {
            "success": True,
            "outlayid": outlayid,
            "supplyid": supplyid,
            "materials_count": len(materials_used),
            "remainders_outlay_count": remainders_outlay_added,
            "remainders_supply_count": remainders_added,
            "performance": {
                "total_time": round(total_time, 2)
            }
        }
        
    except Exception as e:
        total_time = time.time() - operation_start_time
        print(f"‚ùå DB: –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∑–∞ {total_time:.2f}—Å: {e}")
        import traceback
        print(f"‚ùå DB: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        return {
            "success": False,
            "error": str(e),
            "performance": {
                "total_time": round(total_time, 2)
            }
        }

def get_goods_price(goodsid: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –ø–æ goodsid
    """
    try:
        con = get_db_connection()
        cur = con.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø–æ–ª—è price1
        sql = """
        SELECT 
            COALESCE(g.price1, 0) as price
        FROM goods g 
        WHERE g.goodsid = ?
        """
        
        cur.execute(sql, (goodsid,))
        result = cur.fetchone()
        
        if result:
            price = result[0] or 0
            con.close()
            return price
        else:
            con.close()
            return 0
            
    except Exception as e:
        print(f"DB ERROR (goods-price): {e}")
        return 0
