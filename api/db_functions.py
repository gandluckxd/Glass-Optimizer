import fdb
from fastapi import HTTPException
import time
from config import DB_CONFIG, MAX_POOL_SIZE, CONNECTION_TIMEOUT
import os

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
_connection_pool = []
_max_pool_size = 5

def get_db_connection():
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    try:
        con = fdb.connect(
            port=DB_CONFIG['port'],
            host=DB_CONFIG['host'],
            database=DB_CONFIG['database'],
            user=DB_CONFIG['user'],
            password=DB_CONFIG['password'],
            charset='WIN1251'
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        con.default_tpb = fdb.TPB()
        con.default_tpb.isolation_level = fdb.isc_tpb_read_committed
        con.default_tpb.lock_resolution = fdb.isc_tpb_wait
        
        return con
    except Exception as e:
        print("DB ERROR:", e)
        raise HTTPException(status_code=500, detail=f"Database connection error: {str(e)}")

def get_tables():
    try:
        con = get_db_connection()
        cur = con.cursor()
        cur.execute("SELECT RDB$RELATION_NAME FROM RDB$RELATIONS WHERE RDB$SYSTEM_FLAG=0;")
        tables = [row[0].strip() for row in cur.fetchall()]
        con.close()
        return {"tables": tables}
    except Exception as e:
        print("DB ERROR (tables):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

def get_details_raw(grorderid: int):
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
    """
    try:
        print(f"üîÑ DB: –ù–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è grorderid={grorderid}")
        con = get_db_connection()
        cur = con.cursor()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        simple_sql = """
        select count(*) as cnt
        from grorders gr
        join grordersdetail grd on grd.grorderid = gr.grorderid
        where gr.grorderid = ?
        """
        
        print(f"üîç DB: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        start_time = time.time()
        cur.execute(simple_sql, (grorderid,))
        count_result = cur.fetchone()
        check_time = time.time() - start_time
        
        if not count_result or count_result[0] == 0:
            print(f"‚ö†Ô∏è DB: –î–∞–Ω–Ω—ã–µ –¥–ª—è grorderid={grorderid} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            con.close()
            return {"grorder_info": {}, "items": []}
        
        print(f"‚úÖ DB: –ù–∞–π–¥–µ–Ω–æ {count_result[0]} –∑–∞–ø–∏—Å–µ–π, –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–Ω—è–ª–∞ {check_time:.2f}—Å")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        sql = """
        select
            gr.ordernames as gr_ordernames,
            gr.groupdate as groupdate,
            gr.name as gr_name,
            oi.orderitemsid,
            oi.name as oi_name,
            o.orderno,
            gp.marking as gp_marking,
            g.marking as g_marking,
            g.goodsid,
            grd.qty * itd.qty as total_qty,
            itd.width,
            itd.height
        from grorders gr
        join grordersdetail grd on grd.grorderid = gr.grorderid
        join orderitems oi on oi.orderitemsid = grd.orderitemsid
        join orders o on o.orderid = oi.orderid
        join itemsdetail itd on itd.orderitemsid = oi.orderitemsid
        join goods g on g.goodsid = itd.goodsid
        join groupgoods gg on gg.grgoodsid = itd.grgoodsid
        join groupgoodstypes ggt on ggt.ggtypeid = gg.ggtypeid
        join orderitemsgl oig on oig.orderitemsid = oi.orderitemsid
        join gpackettypes gp on gp.gptypeid = oig.gptypeid
        where gr.grorderid = ?
        and ggt.code = 'Glass'
        order by oi.orderitemsid
        """
        
        print(f"üîÑ DB: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
        start_time = time.time()
        
        cur.execute(sql, (grorderid,))
        rows = cur.fetchall()
        
        execution_time = time.time() - start_time
        print(f"‚úÖ DB: –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {execution_time:.2f}—Å, –ø–æ–ª—É—á–µ–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        grorder_info = {}
        items = []
        
        if rows:
            first_row = rows[0]
            grorder_info = {
                "gr_ordernames": first_row[0],
                "groupdate": first_row[1],
                "gr_name": first_row[2]
            }
            
            for row in rows:
                items.append({
                    "orderitemsid": row[3],
                    "oi_name": row[4],
                    "orderno": row[5],        # –ò–°–ü–†–ê–í–õ–ï–ù–û: orderno
                    "gp_marking": row[6],     # –ò–°–ü–†–ê–í–õ–ï–ù–û: gp_marking 
                    "g_marking": row[7],      # –ò–°–ü–†–ê–í–õ–ï–ù–û: g_marking
                    "goodsid": row[8],        # –ò–°–ü–†–ê–í–õ–ï–ù–û: goodsid
                    "total_qty": row[9],      # –ò–°–ü–†–ê–í–õ–ï–ù–û: total_qty
                    "width": row[10],         # –ò–°–ü–†–ê–í–õ–ï–ù–û: width
                    "height": row[11]         # –ò–°–ü–†–ê–í–õ–ï–ù–û: height
                })
        
        con.close()
        total_time = time.time() - start_time + check_time
        print(f"üéâ DB: –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {total_time:.2f}—Å, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ {len(items)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        
        return {
            "grorder_info": grorder_info,
            "items": items,
            "performance": {
                "total_time": round(total_time, 2),
                "records_count": len(items)
            }
        }
        
    except fdb.DatabaseError as e:
        print(f"‚ùå DB ERROR (database): {e}")
        if 'con' in locals():
            con.close()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")
    except Exception as e:
        print(f"‚ùå DB ERROR (general): {e}")
        if 'con' in locals():
            con.close()
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")


def get_warehouse_remainders(goodsid: int):
    try:
        con = get_db_connection()
        cur = con.cursor()
        sql = """
        select
            g.marking as g_marking,
            whm.goodsid,
            whm.width,
            whm.height,
            whm.qty - whm.reserveqty as qty
        from warehouseremainder whm
        join goods g on g.goodsid = whm.goodsid
        where whm.goodsid = ?
        """
        cur.execute(sql, (goodsid,))
        result = [
            {
                "g_marking": row[0],
                "goodsid": row[1],
                "width": row[2],
                "height": row[3],
                "qty": row[4]
            }
            for row in cur.fetchall()
        ]
        con.close()
        return {"remainders": result}
    except Exception as e:
        print("DB ERROR (warehouse-remainders):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

def get_warehouse_main_material(goodsid: int):
    try:
        con = get_db_connection()
        cur = con.cursor()
        sql = """
        select t.*, wh.qty, wh.qty / t.amfactor as res_qty, wh.measureid as wh_measureid
        from(
            select
                g.marking as g_marking,
                g.goodsid,
                ggm.measureid,
                gg.width,
                gg.height,
                m.amfactor
            from goods g
            join groupgoods gg on gg.grgoodsid = g.grgoodsid
            join grgoodsmeasure ggm on ggm.grgoodsid = gg.grgoodsid
            join measure m on m.measureid = ggm.measureid
            where g.goodsid = ?
            and ggm.ismain = 1
        ) t
        left join warehouse wh on (wh.goodsid = t.goodsid) and (wh.measureid = t.measureid)
        """
        cur.execute(sql, (goodsid,))
        result = [
            {
                "g_marking": row[0],
                "goodsid": row[1],
                "measureid": row[2],
                "width": row[3],
                "height": row[4],
                "amfactor": row[5],
                "qty": row[6],
                "res_qty": row[7],
                "wh_measureid": row[8]
            }
            for row in cur.fetchall()
        ]
        con.close()
        return {"main_material": result}
    except Exception as e:
        print("DB ERROR (warehouse-main-material):", e)
        raise HTTPException(status_code=500, detail=f"Database error: {str(e)}")

def upload_optimization_to_db(grorderid: int, sheets_data: list):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É OPTDATA
    
    Args:
        grorderid: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        sheets_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏—Å—Ç–∞—Ö
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    """
    con = None
    try:
        print(f"üîÑ DB: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–ª—è grorderid={grorderid}")
        
        con = get_db_connection()
        cur = con.cursor()
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        con.begin()
        
        # 1. –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ grorderid
        delete_sql = "DELETE FROM OPTDATA WHERE GRORDERID = ?"
        print(f"üóëÔ∏è DB: –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è grorderid={grorderid}")
        cur.execute(delete_sql, (grorderid,))
        deleted_count = cur.rowcount if hasattr(cur, 'rowcount') else 0
        print(f"üóëÔ∏è DB: –£–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞–ø–∏—Å–µ–π")
        
        # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        insert_sql = """
        INSERT INTO OPTDATA (
            OPTDATAID, GRORDERID, GOODSID, NUMGLASS, WGLASS, HGLASS, 
            TRASHSQU, PERCENTFULL, PERCENTOST, PIECECOUNT, SUMSQUPIECES, 
            DATAPIECE, DATAEMPTY, QTY, ISREMD
        ) VALUES (
            gen_id(gen_optdata, 1), ?, ?, ?, ?, ?, 
            ?, ?, ?, ?, ?, 
            ?, NULL, ?, ?
        )
        """
        
        inserted_count = 0
        
        for sheet in sheets_data:
            params = (
                grorderid,
                sheet['goodsid'], sheet['num_glass'], sheet['width'], sheet['height'],
                sheet['trash_area'], sheet['percent_full'], sheet['percent_waste'],
                sheet['piece_count'], sheet['sum_area'],
                sheet['xml_data'],
                sheet['qty'], sheet['is_remainder']
            )
            cur.execute(insert_sql, params)
            inserted_count += 1
            print(f"üîÑ DB: –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –ª–∏—Å—Ç–æ–≤")
        con.commit()
        print(f"‚úÖ DB: –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–∞. –í—Å—Ç–∞–≤–ª–µ–Ω–æ {inserted_count} –ª–∏—Å—Ç–æ–≤.")
        
        return {"success": True, "inserted_count": inserted_count}

    except Exception as e:
        print(f"‚ùå DB: –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}. –û—Ç–∫–∞—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        if con:
            con.rollback()
        raise  # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ API

    finally:
        if con:
            con.close()
            print("üîí DB: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")
