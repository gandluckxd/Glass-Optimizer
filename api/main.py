from fastapi import FastAPI
from dotenv import load_dotenv
import uvicorn
from modules.routes import router
from pydantic import BaseModel
from typing import List, Optional
from fastapi import HTTPException
import asyncio
from concurrent.futures import ThreadPoolExecutor
import time
from modules.config import API_TIMEOUT, ENABLE_DETAILED_LOGGING

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(title="Firebird Database API")
app.include_router(router)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
executor = ThreadPoolExecutor(max_workers=5)

class OptimizationSheet(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    num_glass: int
    goodsid: int
    width: int
    height: int
    trash_area: int
    percent_full: float
    percent_waste: float
    piece_count: int
    sum_area: int
    qty: int
    amfactor: float  # amfactor –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    is_remainder: int
    free_rectangles: list  # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö
    xml_data: str

class OptimizationUploadRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    grorderid: int
    sheets: List[OptimizationSheet]
    adjust_materials: bool = False

@app.post("/upload-optimization")
async def upload_optimization(request: OptimizationUploadRequest):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Altawin
    
    –≠—Ç–∞–ø—ã:
    1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è grorderid
    2. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É OPTDATA
    """
    start_time = time.time()
    
    try:
        print(f"üîÑ API: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è grorderid={request.grorderid}")
        print(f"üìä API: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: {len(request.sheets)}")
        print(f"üîß API: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {request.adjust_materials}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∞—Ö
        if ENABLE_DETAILED_LOGGING:
            print(f"üìã API: –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–æ–≤:")
            for i, sheet in enumerate(request.sheets):
                print(f"   –õ–∏—Å—Ç {i+1}: goodsid={sheet.goodsid}, —Ä–∞–∑–º–µ—Ä—ã={sheet.width}x{sheet.height}, "
                      f"qty={sheet.qty}, amfactor={sheet.amfactor}, is_remainder={sheet.is_remainder}")
                if sheet.free_rectangles:
                    print(f"     –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(sheet.free_rectangles)}")
        
        from utils.db_functions import upload_optimization_to_db
        
        loop = asyncio.get_running_loop()
        
        print(f"‚è±Ô∏è API: –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º {API_TIMEOUT} —Å–µ–∫—É–Ω–¥...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        future = loop.run_in_executor(
            executor, 
            upload_optimization_to_db, 
            request.grorderid, 
            [sheet.dict() for sheet in request.sheets], # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
            request.adjust_materials
        )
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        result = await asyncio.wait_for(future, timeout=API_TIMEOUT)
        
        execution_time = time.time() - start_time
        print(f"‚è±Ô∏è API: –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        if result.get('success'):
            print(f"‚úÖ API: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É")
            print(f"üìä API: –í—Å—Ç–∞–≤–ª–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {result.get('inserted_count', 0)}")
            
            response_data = {
                "success": True,
                "message": f"–î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥",
                "grorderid": request.grorderid,
                "sheets_count": len(request.sheets),
                "execution_time": round(execution_time, 2),
                "details": result
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            if request.adjust_materials:
                response_data["materials_adjusted"] = result.get('materials_adjusted', False)
                if result.get('materials_adjusted'):
                    print(f"‚úÖ API: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    print(f"üìä API: –î–µ—Ç–∞–ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: {result}")
                else:
                    print(f"‚ö†Ô∏è API: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            return response_data
        else:
            error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
            print(f"‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É: {error_msg}")
            raise HTTPException(status_code=500, detail=error_msg)
            
    except asyncio.TimeoutError:
        execution_time = time.time() - start_time
        error_msg = f"–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ({API_TIMEOUT} —Å–µ–∫—É–Ω–¥). " \
                   f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å {execution_time:.2f} —Å–µ–∫—É–Ω–¥. " \
                   f"–í–µ—Ä–æ—è—Ç–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–∞—è."
        print(f"‚ùå API: {error_msg}")
        raise HTTPException(status_code=504, detail=error_msg)
    except Exception as e:
        execution_time = time.time() - start_time
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞ {execution_time:.2f} —Å–µ–∫—É–Ω–¥: {str(e)}"
        print(f"‚ùå API: {error_msg}")
        import traceback
        print(f"‚ùå API: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=error_msg)

if __name__ == "__main__":
    import multiprocessing
    multiprocessing.freeze_support()
    uvicorn.run(app, host="0.0.0.0", port=8000)