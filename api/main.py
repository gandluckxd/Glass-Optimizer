from fastapi import FastAPI
from dotenv import load_dotenv
import uvicorn
from routes import router
from pydantic import BaseModel
from typing import List, Optional
from fastapi import HTTPException
import asyncio
from concurrent.futures import ThreadPoolExecutor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

app = FastAPI(title="Firebird Database API")
app.include_router(router)

# –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
executor = ThreadPoolExecutor(max_workers=5)

class OptimizationSheet(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    num_glass: int
    goodsid: int
    width: int
    height: int
    trash_area: int
    percent_full: float
    percent_waste: float
    piece_count: int
    sum_area: int
    qty: int
    is_remainder: int
    xml_data: str

class OptimizationUploadRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    grorderid: int
    sheets: List[OptimizationSheet]

@app.post("/upload-optimization")
async def upload_optimization(request: OptimizationUploadRequest):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Altawin
    
    –≠—Ç–∞–ø—ã:
    1. –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è grorderid
    2. –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É OPTDATA
    """
    try:
        print(f"üîÑ API: –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è grorderid={request.grorderid}")
        print(f"üìä API: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: {len(request.sheets)}")
        
        from db_functions import upload_optimization_to_db
        
        loop = asyncio.get_running_loop()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–ª–æ–∫–∏—Ä—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        future = loop.run_in_executor(
            executor, 
            upload_optimization_to_db, 
            request.grorderid, 
            [sheet.dict() for sheet in request.sheets] # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–æ–¥–µ–ª–∏ –≤ —Å–ª–æ–≤–∞—Ä–∏
        )
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 30 —Å–µ–∫—É–Ω–¥
        result = await asyncio.wait_for(future, timeout=30.0)
        
        if result.get('success'):
            print(f"‚úÖ API: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –≤ –±–∞–∑—É")
            return {
                "success": True,
                "message": f"–î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã",
                "grorderid": request.grorderid,
                "sheets_count": len(request.sheets),
                "details": result
            }
        else:
            error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö')
            print(f"‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É: {error_msg}")
            raise HTTPException(status_code=500, detail=error_msg)
            
    except asyncio.TimeoutError:
        error_msg = "–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (30 —Å–µ–∫—É–Ω–¥). –í–µ—Ä–æ—è—Ç–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º."
        print(f"‚ùå API: {error_msg}")
        raise HTTPException(status_code=504, detail=error_msg)
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
        print(f"‚ùå API: {error_msg}")
        raise HTTPException(status_code=500, detail=error_msg)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)