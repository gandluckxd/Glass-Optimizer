"""
–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 2D —Ä–∞—Å–∫—Ä–æ—è
–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
"""

from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QLabel, QListWidget, 
    QTableWidget, QTableWidgetItem, QCheckBox, QSpinBox, QGroupBox, 
    QPushButton, QGraphicsView, QGraphicsScene, QFormLayout, QLineEdit, 
    QTabWidget, QComboBox, QDialog, QProgressBar, QMessageBox, QHeaderView,
    QSplitter, QFrame, QTextEdit, QSlider
)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal, QThread
from PyQt5.QtGui import QFont, QPen, QBrush, QColor, QPainter, QTransform, QShowEvent
import sys
import threading
from datetime import datetime
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
from core.api_client import get_details_raw, get_warehouse_main_material, get_warehouse_remainders, check_api_connection
from core.optimizer_core import optimize, OptimizationResult
from .table_widgets import (_create_text_item, _create_numeric_item,
                           fill_details_table, fill_materials_table, fill_remainders_table,
                           update_remnants_result_table, update_waste_results_table)
import functools
import requests
import os
import json
import logging
from .dialogs import DebugDialog, ProgressDialog

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class ZoomableGraphicsView(QGraphicsView):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑—É–º–∞ –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏"""
    def __init__(self, scene, parent=None):
        super().__init__(scene)
        self.parent_window = parent
        
    def wheelEvent(self, event):
        if self.parent_window:
            self.parent_window.wheel_zoom(event)

class OptimizerWindow(QWidget):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    debug_step_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str, str, str)  # title, message, icon
    success_signal = pyqtSignal()
    data_loaded_signal = pyqtSignal(dict, list, list)  # details_data, remainders, materials
    restore_button_signal = pyqtSignal()
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result_signal = pyqtSignal(object)  # OptimizationResult
    optimization_error_signal = pyqtSignal(str)
    close_progress_signal = pyqtSignal()
    
    def __init__(self):
        super().__init__()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.current_details = []
        self.current_materials = []
        self.current_remainders = []
        self.optimization_result = None
        self.current_sheet_index = 0
        self.auto_load_debug = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
        self.debug_dialog = None
        self.progress_dialog = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        self.setWindowTitle("–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä 2D –†–∞—Å–∫—Ä–æ—è")
        self.setMinimumSize(1400, 900)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        

        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        self.debug_step_signal.connect(self._add_debug_step_safe)
        self.error_signal.connect(self._show_error_safe)
        self.success_signal.connect(self._show_success_safe)
        self.data_loaded_signal.connect(self._update_tables_safe)
        self.restore_button_signal.connect(self._restore_button_safe)
        
        # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_result_signal.connect(self._handle_optimization_result)
        self.optimization_error_signal.connect(self._handle_optimization_error)
        self.close_progress_signal.connect(self._close_progress_dialog)
        
        print("üîß DEBUG: –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

    def showEvent(self, event):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ showEvent –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        super().showEvent(event)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –æ–∫–Ω–∞ (–¥–ª—è Windows)
        try:
            import ctypes
            from ctypes import wintypes
            import platform
            
            # –ü–æ–ª—É—á–∞–µ–º handle –æ–∫–Ω–∞
            hwnd = int(self.winId())
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä—Å–∏—é Windows –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
            version = platform.version()
            version_parts = version.split('.')
            build_number = int(version_parts[2]) if len(version_parts) > 2 else 0
            
            # –î–ª—è Windows 10 1903+ (build 18362+) –∏ Windows 11
            if build_number >= 18362:
                # –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É (Windows 11)
                DWMWA_USE_IMMERSIVE_DARK_MODE = 20
                value = ctypes.c_int(1)
                result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                    hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                    ctypes.byref(value), ctypes.sizeof(value)
                )
                
                # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
                if result != 0:
                    DWMWA_USE_IMMERSIVE_DARK_MODE = 19
                    result = ctypes.windll.dwmapi.DwmSetWindowAttribute(
                        hwnd, DWMWA_USE_IMMERSIVE_DARK_MODE, 
                        ctypes.byref(value), ctypes.sizeof(value)
                    )
                
                if result == 0:
                    print(f"üîß DEBUG: –¢–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ {DWMWA_USE_IMMERSIVE_DARK_MODE})")
                else:
                    print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–∫–æ–¥ –æ—à–∏–±–∫–∏: {result})")
            else:
                print("üîß DEBUG: –í–µ—Ä—Å–∏—è Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–∫–æ–Ω")
                
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å (–Ω–µ Windows –∏–ª–∏ –æ—à–∏–±–∫–∞), –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç–µ–º–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            print(f"üîß DEBUG: –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {e}")
            pass

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –∫–æ –≤—Å–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        self.setStyleSheet("""
            QWidget {
                background-color: #2b2b2b;
                color: #ffffff;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 10pt;
            }
            
            QGroupBox {
                background-color: #3c3c3c;
                border: 2px solid #555555;
                border-radius: 8px;
                margin: 5px;
                padding-top: 15px;
                font-weight: bold;
                color: #ffffff;
            }
            
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #ffffff;
                background-color: #3c3c3c;
            }
            
            QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
                min-width: 100px;
            }
            
            QPushButton:hover {
                background-color: #106ebe;
            }
            
            QPushButton:pressed {
                background-color: #005a9e;
            }
            
            QPushButton:disabled {
                background-color: #555555;
                color: #888888;
            }
            
            QLineEdit {
                background-color: #404040;
                border: 2px solid #555555;
                border-radius: 4px;
                padding: 6px;
                color: #ffffff;
            }
            
            QLineEdit:focus {
                border-color: #0078d4;
            }
            
            QTableWidget {
                background-color: #404040;
                alternate-background-color: #4a4a4a;
                gridline-color: #555555;
                border: 1px solid #555555;
                border-radius: 4px;
                color: #ffffff;
            }
            
            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #555555;
            }
            
            QTableWidget::item:selected {
                background-color: #0078d4;
                color: white;
            }
            
            QHeaderView::section {
                background-color: #2b2b2b;
                color: #ffffff;
                padding: 8px;
                border: 1px solid #555555;
                font-weight: bold;
            }
            
            QLabel {
                color: #ffffff;
                background-color: transparent;
            }
            
            QSpinBox, QComboBox {
                background-color: #404040;
                border: 2px solid #555555;
                border-radius: 4px;
                padding: 6px;
                color: #ffffff;
                min-width: 80px;
            }
            
            QSpinBox:focus, QComboBox:focus {
                border-color: #0078d4;
            }
            
            QComboBox::drop-down {
                border: none;
                background-color: #555555;
                width: 20px;
            }
            
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #ffffff;
                margin: 5px;
            }
            
            QMessageBox {
                background-color: #2b2b2b;
                color: #ffffff;
            }
            
            QMessageBox QPushButton {
                background-color: #0078d4;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
                min-width: 80px;
            }
            
            QMessageBox QPushButton:hover {
                background-color: #106ebe;
            }
            
            QCheckBox {
                color: #ffffff;
                spacing: 8px;
            }
            
            QCheckBox::indicator {
                width: 18px;
                height: 18px;
                border: 2px solid #555555;
                border-radius: 3px;
                background-color: #404040;
            }
            
            QCheckBox::indicator:checked {
                background-color: #0078d4;
                border-color: #0078d4;
                image: none;
            }
            
            QProgressBar {
                background-color: #404040;
                border: 2px solid #555555;
                border-radius: 4px;
                text-align: center;
                color: #ffffff;
                font-weight: bold;
            }
            
            QProgressBar::chunk {
                background-color: #0078d4;
                border-radius: 2px;
            }
            
            QGraphicsView {
                background-color: #404040;
                border: 2px solid #555555;
                border-radius: 4px;
            }
            
            QSplitter::handle {
                background-color: #555555;
                width: 3px;
                height: 3px;
            }
            
            QSplitter::handle:hover {
                background-color: #0078d4;
            }
        """)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 2px solid #555555;
                background-color: #3c3c3c;
                border-radius: 8px;
            }
            
            QTabBar::tab {
                background-color: #2b2b2b;
                color: #ffffff;
                padding: 10px 20px;
                margin-right: 3px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                border: 2px solid #555555;
                border-bottom: none;
                font-weight: bold;
                font-size: 9pt;
                min-width: 260px;
                max-width: 380px;
            }
            
            QTabBar::tab:selected {
                background-color: #3c3c3c;
                border-bottom: 2px solid #0078d4;
                color: #ffffff;
                font-size: 9pt;
            }
            
            QTabBar::tab:hover:!selected {
                background-color: #404040;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏
        self.create_info_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.create_results_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è
        vis_tab = self.create_visualization_tab()
        self.tabs.addTab(vis_tab, "üé® –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è")
        
        main_layout.addWidget(self.tabs)

    def create_info_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏"""
        info_tab = QWidget()
        layout = QVBoxLayout(info_tab)

        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏ –∏ —Å–∫–ª–∞–¥
        top_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏
        left_group = self.create_task_info_group()
        top_splitter.addWidget(left_group)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–∫–ª–∞–¥
        right_group = self.create_warehouse_group()
        top_splitter.addWidget(right_group)
        
        top_splitter.setSizes([700, 700])
        layout.addWidget(top_splitter)
        
        # –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        params_group = self.create_optimization_params_group()
        layout.addWidget(params_group)
        
        self.tabs.addTab(info_tab, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏")

    def create_task_info_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞–Ω–∏–∏"""
        group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–º–µ–Ω–Ω–æ–º –∑–∞–¥–∞–Ω–∏–∏")
        layout = QVBoxLayout(group)

        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
        input_layout = QHBoxLayout()
        
        input_layout.addWidget(QLabel("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:"))
        self.grorderid_input = QLineEdit()
        self.grorderid_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        input_layout.addWidget(self.grorderid_input)
        
        self.load_data_button = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.load_data_button.clicked.connect(self.on_load_data_clicked)
        input_layout.addWidget(self.load_data_button)
        
        layout.addLayout(input_layout)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–ª—è
        info_layout = QFormLayout()
        
        self.task_name_label = QLabel("<–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ>")
        self.task_name_label.setStyleSheet("font-weight: bold; color: #ffffff; background-color: transparent;")
        info_layout.addRow("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:", self.task_name_label)
        
        self.task_date_label = QLabel("<–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ>")
        self.task_date_label.setStyleSheet("color: #ffffff; background-color: transparent;")
        info_layout.addRow("–î–∞—Ç–∞:", self.task_date_label)
        
        self.task_orders_label = QLabel("<–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ>")
        self.task_orders_label.setStyleSheet("color: #ffffff; background-color: transparent;")
        info_layout.addRow("–ó–∞–∫–∞–∑—ã:", self.task_orders_label)
        
        layout.addLayout(info_layout)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–µ–∫–æ–ª
        layout.addWidget(QLabel("–°–ø–∏—Å–æ–∫ —Å—Ç–µ–∫–æ–ª –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:"))
        self.details_table = QTableWidget(0, 5)
        self.details_table.setHorizontalHeaderLabels([
            '–≠–ª–µ–º–µ–Ω—Ç', '–ú–∞—Ç–µ—Ä–∏–∞–ª', 
            '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –£–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header = self.details_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)  # –†—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header.setStretchLastSection(True)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        for i in range(self.details_table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
        # –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã, —Ä–∞–∑—Ä–µ—à–∞–µ–º —Ä—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        QTimer.singleShot(100, lambda: self._set_interactive_mode(self.details_table))
        layout.addWidget(self.details_table)
        
        return group

    def create_warehouse_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å–∫–ª–∞–¥–∞"""
        group = QGroupBox("–°–∫–ª–∞–¥")
        layout = QVBoxLayout(group)
        
        # –°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤
        layout.addWidget(QLabel("–°–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤:"))
        self.remainders_table = QTableWidget(0, 4)
        self.remainders_table.setHorizontalHeaderLabels([
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –£–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header = self.remainders_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        header.setStretchLastSection(True)
        for i in range(self.remainders_table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
        QTimer.singleShot(100, lambda: self._set_interactive_mode(self.remainders_table))
        layout.addWidget(self.remainders_table)
        
        # –°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        layout.addWidget(QLabel("–°–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"))
        self.materials_table = QTableWidget(0, 4)
        self.materials_table.setHorizontalHeaderLabels([
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –£–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header = self.materials_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        header.setStretchLastSection(True)
        for i in range(self.materials_table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
        QTimer.singleShot(100, lambda: self._set_interactive_mode(self.materials_table))
        layout.addWidget(self.materials_table)
        
        return group

    def create_optimization_params_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QFormLayout()
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞
        self.min_remnant_width = QSpinBox()
        self.min_remnant_width.setRange(10, 1000)
        self.min_remnant_width.setValue(180)  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ê—Ä—Ç–µ–º–∞
        self.min_remnant_width.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω. —à–∏—Ä–∏–Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞:", self.min_remnant_width)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞
        self.min_remnant_height = QSpinBox()
        self.min_remnant_height.setRange(10, 1000)
        self.min_remnant_height.setValue(100)  # –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ê—Ä—Ç–µ–º–∞
        self.min_remnant_height.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω. –≤—ã—Å–æ—Ç–∞ –æ—Å—Ç–∞—Ç–∫–∞:", self.min_remnant_height)
        
        # –¶–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤
        self.target_waste_percent = QSpinBox()
        self.target_waste_percent.setRange(1, 20)
        self.target_waste_percent.setValue(5)  # –ò–ó–ú–ï–ù–ï–ù–û: –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 3% –¥–æ 5% –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.target_waste_percent.setSuffix(" %")
        self.target_waste_percent.setStyleSheet("""
            QSpinBox {
                background-color: #404040;
                color: #00ff00;
                font-weight: bold;
                font-size: 12pt;
            }
        """)
        layout.addRow("üéØ –¶–µ–ª–µ–≤–æ–π % –æ—Ç—Ö–æ–¥–æ–≤:", self.target_waste_percent)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ–±—Ä–µ–∑–∫–∞
        self.min_cut_size = QSpinBox()
        self.min_cut_size.setRange(5, 50)
        self.min_cut_size.setValue(10)
        self.min_cut_size.setSuffix(" –º–º")
        layout.addRow("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ–±—Ä–µ–∑–∫–∞:", self.min_cut_size)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        self.use_remainders = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ —Å–∫–ª–∞–¥–∞")
        self.use_remainders.setChecked(True)
        layout.addRow(self.use_remainders)
        
        # –ü–æ–≤–æ—Ä–æ—Ç –¥–µ—Ç–∞–ª–µ–π
        self.allow_rotation = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç –¥–µ—Ç–∞–ª–µ–π")
        self.allow_rotation.setChecked(True)
        layout.addRow(self.allow_rotation)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        button_layout = QHBoxLayout()
        button_layout.addStretch()
        
        self.optimize_button = QPushButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        self.optimize_button.clicked.connect(self.on_optimize_clicked)
        self.optimize_button.setEnabled(False)
        self.optimize_button.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                color: white;
                font-weight: bold;
                font-size: 11pt;
                padding: 10px 20px;
                min-width: 200px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
            QPushButton:disabled {
                background-color: #555555;
                color: #888888;
            }
        """)
        button_layout.addWidget(self.optimize_button)
        
        layout.addRow(button_layout)
        
        params_group.setLayout(layout)
        return params_group

    def create_results_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        results_tab = QWidget()
        layout = QVBoxLayout(results_tab)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–≤–µ—Ä—Ö—É
        stats_group = self.create_statistics_group()
        layout.addWidget(stats_group)
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ: –æ—Å—Ç–∞—Ç–∫–∏ —Å–ª–µ–≤–∞, –æ—Ç—Ö–æ–¥—ã —Å–ø—Ä–∞–≤–∞
        tables_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        remnants_group = QGroupBox("–°–ø–∏—Å–æ–∫ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤")
        remnants_layout = QVBoxLayout(remnants_group)
        
        self.remnants_result_table = QTableWidget(0, 4)
        self.remnants_result_table.setHorizontalHeaderLabels([
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –£–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header = self.remnants_result_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        header.setStretchLastSection(True)
        for i in range(self.remnants_result_table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
        QTimer.singleShot(100, lambda: self._set_interactive_mode(self.remnants_result_table))
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.remnants_result_table.setSortingEnabled(True)
        self.remnants_result_table.setMinimumHeight(400)
        remnants_layout.addWidget(self.remnants_result_table)
        
        tables_splitter.addWidget(remnants_group)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –æ—Ç—Ö–æ–¥—ã
        waste_group = QGroupBox("–°–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∫–æ–≤ (–æ—Ç—Ö–æ–¥–æ–≤)")
        waste_layout = QVBoxLayout(waste_group)
        
        self.waste_results_table = QTableWidget(0, 4)
        self.waste_results_table.setHorizontalHeaderLabels([
            '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –£–º–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É + —Ä—É—á–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        header = self.waste_results_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.Interactive)
        header.setStretchLastSection(True)
        for i in range(self.waste_results_table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
        QTimer.singleShot(100, lambda: self._set_interactive_mode(self.waste_results_table))
        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.waste_results_table.setSortingEnabled(True)
        self.waste_results_table.setMinimumHeight(400)
        waste_layout.addWidget(self.waste_results_table)
        
        tables_splitter.addWidget(waste_group)
        
        # –†–∞–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
        tables_splitter.setSizes([500, 500])
        layout.addWidget(tables_splitter)
        
        self.tabs.addTab(results_tab, "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    
    def create_visualization_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        vis_tab = QWidget()
        layout = QVBoxLayout(vis_tab)
        
        # –í–µ—Ä—Ö–Ω–∏–π –±–ª–æ–∫ —Å –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        controls_group = QGroupBox("–ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        controls_layout = QVBoxLayout()
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        top_controls_layout = QHBoxLayout()
        
        # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞
        self.sheets_combo = QComboBox()
        self.sheets_combo.setMinimumWidth(800)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å 600 –¥–æ 800 –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤
        self.sheets_combo.currentIndexChanged.connect(self.on_sheet_selected)
        top_controls_layout.addWidget(QLabel("–õ–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"))
        top_controls_layout.addWidget(self.sheets_combo)
        
        top_controls_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_group = QGroupBox("–ù–∞–≤–∏–≥–∞—Ü–∏—è")
        nav_layout = QHBoxLayout()
        
        self.prev_sheet_btn = QPushButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π")
        self.prev_sheet_btn.clicked.connect(self.on_prev_sheet)
        self.prev_sheet_btn.setEnabled(False)
        nav_layout.addWidget(self.prev_sheet_btn)
        
        self.next_sheet_btn = QPushButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂")
        self.next_sheet_btn.clicked.connect(self.on_next_sheet)
        self.next_sheet_btn.setEnabled(False)
        nav_layout.addWidget(self.next_sheet_btn)
        
        nav_group.setLayout(nav_layout)
        top_controls_layout.addWidget(nav_group)
        
        # –ú–∞—Å—à—Ç–∞–±
        zoom_group = QGroupBox("–ú–∞—Å—à—Ç–∞–±")
        zoom_layout = QHBoxLayout()
        
        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(10, 500)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑—É–º–∞ –¥–æ 500%
        self.zoom_slider.setValue(100)
        self.zoom_slider.setTickInterval(25)
        self.zoom_slider.setTickPosition(QSlider.TickPosition.TicksBelow)
        self.zoom_slider.setMinimumWidth(150)
        self.zoom_slider.valueChanged.connect(self.on_zoom_changed)
        zoom_layout.addWidget(self.zoom_slider)
        
        self.zoom_label = QLabel("100%")
        self.zoom_label.setMinimumWidth(50)
        self.zoom_label.setStyleSheet("font-weight: bold; font-size: 12pt;")
        zoom_layout.addWidget(self.zoom_label)
        
        self.reset_zoom_btn = QPushButton("üîç –í–ø–∏—Å–∞—Ç—å –≤ –æ–∫–Ω–æ")
        self.reset_zoom_btn.clicked.connect(self.reset_zoom)
        zoom_layout.addWidget(self.reset_zoom_btn)
        
        zoom_group.setLayout(zoom_layout)
        top_controls_layout.addWidget(zoom_group)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_group = QGroupBox("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        display_layout = QVBoxLayout()
        
        # –£–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫—É —Å–µ—Ç–∫–∏ - –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        # self.show_grid_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ç–∫—É (100–º–º)")
        # self.show_grid_cb.setChecked(True)
        # self.show_grid_cb.toggled.connect(self.refresh_visualization)
        # display_layout.addWidget(self.show_grid_cb)
        
        self.show_dimensions_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã")
        self.show_dimensions_cb.setChecked(True)
        self.show_dimensions_cb.toggled.connect(self.refresh_visualization)
        display_layout.addWidget(self.show_dimensions_cb)
        
        self.show_names_cb = QCheckBox("–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
        self.show_names_cb.setChecked(True)
        self.show_names_cb.toggled.connect(self.refresh_visualization)
        display_layout.addWidget(self.show_names_cb)
        
        display_group.setLayout(display_layout)
        top_controls_layout.addWidget(display_group)
        
        controls_layout.addLayout(top_controls_layout)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Å—Ç–µ
        info_layout = QHBoxLayout()
        
        self.sheet_info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        self.sheet_info_label.setStyleSheet("""
            QLabel {
                font-size: 12pt;
                font-weight: bold;
                padding: 12px;
                background-color: #404040;
                border-radius: 6px;
                border: 2px solid #555555;
            }
        """)
        self.sheet_info_label.setMinimumHeight(60)
        self.sheet_info_label.setMaximumHeight(60)
        self.sheet_info_label.setWordWrap(True)
        info_layout.addWidget(self.sheet_info_label)
        
        controls_layout.addLayout(info_layout)
        
        controls_group.setLayout(controls_layout)
        layout.addWidget(controls_group)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–µ–≤–∞, —Ç–∞–±–ª–∏—Ü–∞ –æ—Ç—Ö–æ–¥–æ–≤ —Å–ø—Ä–∞–≤–∞
        main_splitter = QSplitter(Qt.Horizontal)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        vis_main_group = QGroupBox("–†–∞—Å–∫—Ä–æ–π –ª–∏—Å—Ç–∞")
        vis_main_layout = QVBoxLayout()
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ü–µ–Ω–∞
        self.graphics_scene = QGraphicsScene()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑—É–º–∞
        self.graphics_view = ZoomableGraphicsView(self.graphics_scene, self)
        self.graphics_view.setRenderHint(QPainter.RenderHint.Antialiasing)
        self.graphics_view.setMinimumHeight(600)
        self.graphics_view.setMinimumWidth(600)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ –∑—É–º–∞
        self.graphics_view.setDragMode(QGraphicsView.DragMode.ScrollHandDrag)
        self.graphics_view.setTransformationAnchor(QGraphicsView.ViewportAnchor.AnchorUnderMouse)
        self.graphics_view.setResizeAnchor(QGraphicsView.ViewportAnchor.AnchorUnderMouse)
        
        # –ü–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.graphics_view.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        self.graphics_view.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.graphics_view.setOptimizationFlag(QGraphicsView.OptimizationFlag.DontAdjustForAntialiasing, True)
        self.graphics_view.setOptimizationFlag(QGraphicsView.OptimizationFlag.DontSavePainterState, True)
        
        # –í–∫–ª—é—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ü–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.graphics_view.setViewportUpdateMode(QGraphicsView.ViewportUpdateMode.SmartViewportUpdate)
        
        vis_main_layout.addWidget(self.graphics_view)
        vis_main_group.setLayout(vis_main_layout)
        main_splitter.addWidget(vis_main_group)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        right_group = QGroupBox("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞")
        right_layout = QVBoxLayout(right_group)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–≤—É—Ö —Ç–∞–±–ª–∏—Ü
        tables_splitter = QSplitter(Qt.Vertical)
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        remnants_group = QGroupBox("–î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞")
        remnants_layout = QVBoxLayout(remnants_group)
        
        self.current_remnants_table = QTableWidget(0, 4)
        self.current_remnants_table.setHorizontalHeaderLabels([
            '–ê—Ä—Ç–∏–∫—É–ª', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        header = self.current_remnants_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        header.setStretchLastSection(True)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.current_remnants_table.setSortingEnabled(True)
        self.current_remnants_table.setMinimumHeight(200)
        remnants_layout.addWidget(self.current_remnants_table)
        
        tables_splitter.addWidget(remnants_group)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—Ö–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        waste_group = QGroupBox("–û—Ç—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞")
        waste_layout = QVBoxLayout(waste_group)
        
        self.waste_result_table = QTableWidget(0, 4)
        self.waste_result_table.setHorizontalHeaderLabels([
            '–ê—Ä—Ç–∏–∫—É–ª', '–í—ã—Å–æ—Ç–∞', '–®–∏—Ä–∏–Ω–∞', '–ö–æ–ª-–≤–æ'
        ])
        # –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        header = self.waste_result_table.horizontalHeader()
        header.setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
        header.setStretchLastSection(True)  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è
        self.waste_result_table.setSortingEnabled(True)
        self.waste_result_table.setMinimumHeight(200)
        waste_layout.addWidget(self.waste_result_table)
        
        tables_splitter.addWidget(waste_group)
        
        # –†–∞–≤–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü
        tables_splitter.setSizes([200, 200])
        right_layout.addWidget(tables_splitter)
        
        main_splitter.addWidget(right_group)
        
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–∏: –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è 55%, –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞ 45%
        main_splitter.setSizes([550, 450])
        layout.addWidget(main_splitter)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        return vis_tab

    def create_statistics_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        group = QGroupBox("–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        layout = QVBoxLayout(group)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_layout = QHBoxLayout()
        
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        left_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_style = "color: #ffffff; font-weight: bold; background-color: transparent; font-size: 11pt;"
        
        self.stats_materials_used = QLabel("0")
        self.stats_materials_used.setStyleSheet(stats_style)
        left_layout.addRow("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ (—Å–∫–ª–∞–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤):", self.stats_materials_used)
        
        self.stats_remainders_used = QLabel("0")
        self.stats_remainders_used.setStyleSheet(stats_style)
        left_layout.addRow("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ (—Å–∫–ª–∞–¥ –æ—Å—Ç–∞—Ç–∫–æ–≤):", self.stats_remainders_used)
        
        self.stats_total_sheets = QLabel("0")
        self.stats_total_sheets.setStyleSheet(stats_style)
        left_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ (–≤—Å–µ–≥–æ):", self.stats_total_sheets)
        
        self.stats_total_details = QLabel("0")
        self.stats_total_details.setStyleSheet(stats_style)
        left_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ—Ç–æ–≤–æ–∫ (–≤—Å–µ–≥–æ):", self.stats_total_details)
        
        # –ù–û–í–û–ï –ü–û–õ–ï: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.stats_distributed_elements = QLabel("0/0")
        self.stats_distributed_elements.setStyleSheet(stats_style)
        left_layout.addRow("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:", self.stats_distributed_elements)
        
        # –ü–ï–†–ï–ú–ï–©–ï–ù–û: –û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∑–∞–≥–æ—Ç–æ–≤–æ–∫ —Ç–µ–ø–µ—Ä—å –≤ –ª–µ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
        self.stats_details_area = QLabel("0.00 –º¬≤")
        self.stats_details_area.setStyleSheet(stats_style)
        left_layout.addRow("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å –∑–∞–≥–æ—Ç–æ–≤–æ–∫:", self.stats_details_area)
        
        stats_layout.addLayout(left_layout)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞: –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –æ—Ç—Ö–æ–¥—ã
        right_section = QHBoxLayout()
        
        # –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–∑–µ–ª–µ–Ω—ã–π)
        remnants_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–∑–µ–ª–µ–Ω—ã–π)
        remnants_style = "color: #4ecdc4; font-weight: bold; background-color: transparent; font-size: 11pt;"
        
        self.stats_remnants_area = QLabel("0.00 –º¬≤")
        self.stats_remnants_area.setStyleSheet(remnants_style)
        remnants_layout.addRow("–ü–ª–æ—â–∞–¥—å –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", self.stats_remnants_area)
        
        self.stats_remnants_count = QLabel("0")
        self.stats_remnants_count.setStyleSheet(remnants_style)
        remnants_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", self.stats_remnants_count)
        
        self.stats_remnants_percent = QLabel("0.00 %")
        self.stats_remnants_percent.setStyleSheet(remnants_style)
        remnants_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤:", self.stats_remnants_percent)
        
        right_section.addLayout(remnants_layout)
        
        # –í—Ç–æ—Ä–æ–π —Å—Ç–æ–ª–±–µ—Ü - –æ—Ç—Ö–æ–¥—ã (–∫—Ä–∞—Å–Ω—ã–π)
        waste_layout = QFormLayout()
        
        # –°—Ç–∏–ª—å –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤ (–∫—Ä–∞—Å–Ω—ã–π)
        waste_style = "color: #ff6b6b; font-weight: bold; background-color: transparent; font-size: 11pt;"
        
        self.stats_waste_area = QLabel("0.00 –º¬≤")
        self.stats_waste_area.setStyleSheet(waste_style)
        waste_layout.addRow("–ü–ª–æ—â–∞–¥—å –æ—Ç—Ö–æ–¥–∞:", self.stats_waste_area)
        
        self.stats_waste_count = QLabel("0")
        self.stats_waste_count.setStyleSheet(waste_style)
        waste_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ö–æ–¥–∞:", self.stats_waste_count)
        
        self.stats_waste_percent = QLabel("0.00 %")
        self.stats_waste_percent.setStyleSheet(waste_style)
        waste_layout.addRow("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–∞:", self.stats_waste_percent)
        
        right_section.addLayout(waste_layout)
        
        stats_layout.addLayout(right_section)
        layout.addLayout(stats_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ Altawin
        upload_layout = QHBoxLayout()
        upload_layout.addStretch()  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        
        self.upload_to_altawin_button = QPushButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin")
        self.upload_to_altawin_button.setStyleSheet("""
            QPushButton {
                background-color: #0078d4;
                color: white;
                font-weight: bold;
                padding: 12px 24px;
                border: none;
                border-radius: 6px;
                font-size: 12pt;
                margin: 10px 0px;
            }
            QPushButton:hover {
                background-color: #106ebe;
            }
            QPushButton:pressed {
                background-color: #005a9e;
            }
            QPushButton:disabled {
                background-color: #666666;
                color: #cccccc;
            }
        """)
        self.upload_to_altawin_button.clicked.connect(self.on_upload_to_altawin)
        self.upload_to_altawin_button.setEnabled(False)  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        self.upload_to_altawin_button.setToolTip("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Altawin")
        
        upload_layout.addWidget(self.upload_to_altawin_button)
        upload_layout.addStretch()  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        
        layout.addLayout(upload_layout)
        
        return group

    def create_visualization_group(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        vis_group = QGroupBox("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–∫—Ä–æ—è")
        layout = QVBoxLayout()
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        controls_layout = QHBoxLayout()
        
        # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞
        self.sheets_combo = QComboBox()
        self.sheets_combo.setMinimumWidth(350)
        self.sheets_combo.currentIndexChanged.connect(self.on_sheet_selected)
        controls_layout.addWidget(QLabel("–õ–∏—Å—Ç:"))
        controls_layout.addWidget(self.sheets_combo)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.prev_sheet_btn = QPushButton("‚óÄ –ü—Ä–µ–¥—ã–¥—É—â–∏–π")
        self.prev_sheet_btn.clicked.connect(self.on_prev_sheet)
        self.prev_sheet_btn.setEnabled(False)
        self.next_sheet_btn = QPushButton("–°–ª–µ–¥—É—é—â–∏–π ‚ñ∂")
        self.next_sheet_btn.clicked.connect(self.on_next_sheet)
        self.next_sheet_btn.setEnabled(False)
        
        controls_layout.addWidget(self.prev_sheet_btn)
        controls_layout.addWidget(self.next_sheet_btn)
        
        controls_layout.addStretch()
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –º–∞—Å—à—Ç–∞–±–∞
        controls_layout.addWidget(QLabel("–ú–∞—Å—à—Ç–∞–±:"))
        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(10, 500)  # –ò–°–ü–†–ê–í–õ–ï–ù–û: 10% - 500%
        self.zoom_slider.setValue(100)  # 100% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.zoom_slider.setTickInterval(50)
        self.zoom_slider.setTickPosition(QSlider.TicksBelow)
        self.zoom_slider.setMinimumWidth(150)
        self.zoom_slider.valueChanged.connect(self.on_zoom_changed)
        self.zoom_slider.setToolTip("–ú–∞—Å—à—Ç–∞–±: 10% (–æ–±–∑–æ—Ä) - 500% (–¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä)\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑—É–º–∞")
        controls_layout.addWidget(self.zoom_slider)
        
        self.zoom_label = QLabel("100%")
        self.zoom_label.setMinimumWidth(50)
        self.zoom_label.setToolTip("–¢–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        controls_layout.addWidget(self.zoom_label)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –∑—É–º–∞
        self.reset_zoom_btn = QPushButton("üîç –í–ø–∏—Å–∞—Ç—å")
        self.reset_zoom_btn.clicked.connect(self.reset_zoom)
        self.reset_zoom_btn.setToolTip("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –º–∞—Å—à—Ç–∞–± –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞")
        controls_layout.addWidget(self.reset_zoom_btn)
        
        # –ö–Ω–æ–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.help_btn = QPushButton("‚ùì –ü–æ–º–æ—â—å")
        self.help_btn.clicked.connect(self.show_navigation_help)
        self.help_btn.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∑—É–º—É")
        controls_layout.addWidget(self.help_btn)
        
        controls_layout.addStretch()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è - —É–±–∏—Ä–∞–µ–º –≥–∞–ª–æ—á–∫—É —Å–µ—Ç–∫–∏
        # self.show_grid_cb = QCheckBox("–°–µ—Ç–∫–∞")
        # self.show_grid_cb.setChecked(True)
        # self.show_grid_cb.stateChanged.connect(self.refresh_visualization)
        # self.show_grid_cb.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É 100–º–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π")
        # controls_layout.addWidget(self.show_grid_cb)
        
        self.show_dimensions_cb = QCheckBox("–†–∞–∑–º–µ—Ä—ã")
        self.show_dimensions_cb.setChecked(True)
        self.show_dimensions_cb.stateChanged.connect(self.refresh_visualization)
        self.show_dimensions_cb.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å —Ä–∞–∑–º–µ—Ä—ã –¥–µ—Ç–∞–ª–µ–π, –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ—Ç—Ö–æ–¥–æ–≤")
        controls_layout.addWidget(self.show_dimensions_cb)
        
        self.show_names_cb = QCheckBox("–ù–∞–∑–≤–∞–Ω–∏—è")
        self.show_names_cb.setChecked(True)
        self.show_names_cb.stateChanged.connect(self.refresh_visualization)
        self.show_names_cb.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π (—É–¥–æ–±–Ω–æ –ø—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ)")
        controls_layout.addWidget(self.show_names_cb)
        
        layout.addLayout(controls_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Å—Ç–µ
        self.sheet_info_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        self.sheet_info_label.setStyleSheet("background-color: #3c3c3c; color: #ffffff; padding: 8px; border-radius: 4px; font-size: 11pt;")
        self.sheet_info_label.setWordWrap(True)
        layout.addWidget(self.sheet_info_label)
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ü–µ–Ω–∞
        self.graphics_scene = QGraphicsScene()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –≤–∏–¥ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑—É–º–∞
        self.graphics_view = ZoomableGraphicsView(self.graphics_scene, self)
        self.graphics_view.setRenderHint(QPainter.Antialiasing)
        self.graphics_view.setMinimumHeight(600)
        self.graphics_view.setDragMode(QGraphicsView.ScrollHandDrag)
        self.graphics_view.setTransformationAnchor(QGraphicsView.AnchorUnderMouse)
        self.graphics_view.setResizeAnchor(QGraphicsView.AnchorUnderMouse)
        
        layout.addWidget(self.graphics_view)
        
        vis_group.setLayout(layout)
        return vis_group
    
    def on_zoom_changed(self, value):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑—É–º–∞ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        scale = value / 100.0
        
        # –°–±—Ä–æ—Å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
        self.graphics_view.resetTransform()
        self.graphics_view.scale(scale, scale)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º label
        self.zoom_label.setText(f"{value}%")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.current_zoom_level = scale
    
    def wheel_zoom(self, event):
        """–ó—É–º –∫–æ–ª–µ—Å–∏–∫–æ–º –º—ã—à–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Ctrl+–∫–æ–ª–µ—Å–∏–∫–æ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∂–∞—Ç–∞ –ª–∏ –∫–ª–∞–≤–∏—à–∞ Ctrl –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        modifiers = event.modifiers()
        if modifiers & Qt.ControlModifier:
            # –ü—Ä–∏ –∑–∞–∂–∞—Ç–æ–º Ctrl - —Å–≤–æ–±–æ–¥–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
            delta = event.angleDelta().y()
            current_scroll = self.graphics_view.horizontalScrollBar().value()
            scroll_step = 50  # –®–∞–≥ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            
            if delta > 0:
                new_scroll = current_scroll - scroll_step
            else:
                new_scroll = current_scroll + scroll_step
                
            self.graphics_view.horizontalScrollBar().setValue(new_scroll)
            return
        
        # –û–±—ã—á–Ω—ã–π –∑—É–º
        current_scale = self.zoom_slider.value()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∞–≥ –∑—É–º–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Å—à—Ç–∞–±–∞
        if current_scale < 50:
            zoom_step = 5
        elif current_scale < 200:
            zoom_step = 10
        else:
            zoom_step = 25
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        if event.angleDelta().y() > 0:  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ
            new_scale = min(500, current_scale + zoom_step)
        else:  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —É–º–µ–Ω—å—à–µ–Ω–∏–µ
            new_scale = max(10, current_scale - zoom_step)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π –º–∞—Å—à—Ç–∞–±
        self.zoom_slider.setValue(new_scale)
    
    def reset_zoom(self):
        """–°–±—Ä–æ—Å –∑—É–º–∞ –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ –æ–∫–Ω–æ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
        if hasattr(self, 'current_sheet_rect') and self.current_sheet_rect:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –≤–∏–¥–∂–µ—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            view_rect = self.graphics_view.viewport().rect()
            
            # –†–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞ –Ω–∞ —Å—Ü–µ–Ω–µ
            sheet_rect = self.current_sheet_rect
            sheet_width = sheet_rect.rect().width()
            sheet_height = sheet_rect.rect().height()
            
            # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            margin_percent = 0.1  # 10% –æ—Ç—Å—Ç—É–ø
            usable_width = view_rect.width() * (1 - 2 * margin_percent)
            usable_height = view_rect.height() * (1 - 2 * margin_percent)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–∞—Å—à—Ç–∞–±
            if sheet_width > 0 and sheet_height > 0:
                scale_x = usable_width / sheet_width
                scale_y = usable_height / sheet_height
                scale = min(scale_x, scale_y) * 100  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
                scale = max(10, min(500, int(scale)))
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–±
                self.zoom_slider.blockSignals(True)
                self.zoom_slider.setValue(scale)
                self.zoom_slider.blockSignals(False)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
                self.on_zoom_changed(scale)
                
                # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –≤–∏–¥ –Ω–∞ –ª–∏—Å—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                def center_view():
                    self.graphics_view.centerOn(sheet_rect.rect().center())
                
                from PyQt5.QtCore import QTimer
                QTimer.singleShot(50, center_view)
            else:
                # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –ª–∏—Å—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 100%
                self.zoom_slider.setValue(100)

    def draw_grid(self, width, height, scale_factor):
        """–†–∏—Å–æ–≤–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ 100–º–º –Ω–∞ –ª–∏—Å—Ç–µ"""
        grid_step = 100  # —Ä–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ —Å–µ—Ç–∫–∏ –≤ –º–º
        grid_pen = QPen(QColor(180, 180, 180), 1, Qt.DotLine)
        
        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        x = grid_step
        while x < width:
            self.graphics_scene.addLine(x * scale_factor, 0, x * scale_factor, height * scale_factor, grid_pen)
            x += grid_step
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        y = grid_step
        while y < height:
            self.graphics_scene.addLine(0, y * scale_factor, width * scale_factor, y * scale_factor, grid_pen)
            y += grid_step

    def show_navigation_help(self):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –∑—É–º—É"""
        help_text = """
üîç –ù–ê–í–ò–ì–ê–¶–ò–Ø –ò –ó–£–ú - –ü–û–õ–ù–ê–Ø –°–í–û–ë–û–î–ê –î–í–ò–ñ–ï–ù–ò–Ø

üì± –û–°–ù–û–í–ù–´–ï –°–ü–û–°–û–ë–´ –ù–ê–í–ò–ì–ê–¶–ò–ò:
‚Ä¢ –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –º—ã—à—å—é - –∑–∞–∂–º–∏—Ç–µ –ª–µ–≤—É—é –∫–Ω–æ–ø–∫—É –∏ —Ç—è–Ω–∏—Ç–µ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
‚Ä¢ –ü–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

üîç –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï:
‚Ä¢ –ö–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ - –ø–ª–∞–≤–Ω—ã–π –∑—É–º –≤ —Ü–µ–Ω—Ç—Ä–µ –∫—É—Ä—Å–æ—Ä–∞ (10%-500%)
‚Ä¢ –°–ª–∞–π–¥–µ—Ä –º–∞—Å—à—Ç–∞–±–∞ - —Ç–æ—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–æ–º
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–í–ø–∏—Å–∞—Ç—å" - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ—Ç –ª–∏—Å—Ç –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞

üéØ –ü–†–û–î–í–ò–ù–£–¢–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:
‚Ä¢ Ctrl + –∫–æ–ª–µ—Å–∏–∫–æ –º—ã—à–∏ - –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏ - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
‚Ä¢ –ö–ª–∞–≤–∏—à–∏ ‚Üê ‚Üí ‚Üë ‚Üì - —Ç–æ—á–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ (–µ—Å–ª–∏ –≤ —Ñ–æ–∫—É—Å–µ)

üõ†Ô∏è –ù–ê–°–¢–†–û–ô–ö–ò –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø:
‚Ä¢ –°–µ—Ç–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É 100–º–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏–∑–º–µ—Ä–µ–Ω–∏–π
‚Ä¢ –†–∞–∑–º–µ—Ä—ã - –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π

üí° –°–û–í–ï–¢–´:
‚Ä¢ –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∑—É–º–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ü–µ–Ω—ã –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–≤–æ–±–æ–¥–Ω–æ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—Ç—å –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–í–ø–∏—Å–∞—Ç—å" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–∑–æ—Ä–∞ –≤—Å–µ–≥–æ –ª–∏—Å—Ç–∞
‚Ä¢ –ü—Ä–∏ –∑—É–º–µ 500% –º–æ–∂–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–ª—å—á–∞–π—à–∏–µ –¥–µ—Ç–∞–ª–∏

üé® –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê:
‚Ä¢ –°–∏–Ω–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏ - –¥–µ—Ç–∞–ª–∏ –¥–ª—è —Ä–∞—Å–∫—Ä–æ—è
‚Ä¢ –ó–µ–ª–µ–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å)
‚Ä¢ –ö—Ä–∞—Å–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ - –æ—Ç—Ö–æ–¥—ã (–∏–¥—É—Ç –≤ –æ—Ç—Ö–æ–¥—ã)
‚Ä¢ –°–µ—Ä—ã–π —Ñ–æ–Ω - –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –ø–æ–ª–Ω–∞—è —Å–≤–æ–±–æ–¥–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Ä–∞—Å–∫—Ä–æ—è! üöÄ
"""
        QMessageBox.information(self, "–ü–æ–º–æ—â—å –ø–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏", help_text, QMessageBox.Ok)

    def update_remnants_table(self, sheet_layouts):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤)"""
        if not hasattr(self, 'remnants_result_table'):
            return
        self.remnants_result_table.setRowCount(0)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
        for sheet_idx, layout in enumerate(sheet_layouts):
            for rect in layout.free_rectangles:
                if rect.width > 0 and rect.height > 0:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    min_width = self.min_remnant_width.value() if hasattr(self, 'min_remnant_width') else 180
                    min_height = self.min_remnant_height.value() if hasattr(self, 'min_remnant_height') else 100
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É: –±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ >= –±–æ–ª—å—à–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –º–µ–Ω—å—à–∞—è >= –º–µ–Ω—å—à–µ–≥–æ
                    element_min_side = min(rect.width, rect.height)
                    element_max_side = max(rect.width, rect.height)
                    param_min = min(min_width, min_height)
                    param_max = max(min_width, min_height)
                    
                    if element_min_side >= param_min and element_max_side >= param_max:
                        row = self.remnants_result_table.rowCount()
                        self.remnants_result_table.insertRow(row)
                        
                        # –ê—Ä—Ç–∏–∫—É–ª –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        marking = layout.sheet.material
                        self.remnants_result_table.setItem(row, 0, QTableWidgetItem(marking))
                        
                        # –í—ã—Å–æ—Ç–∞
                        self.remnants_result_table.setItem(row, 1, QTableWidgetItem(f"{rect.height:.0f}"))
                        
                        # –®–∏—Ä–∏–Ω–∞
                        self.remnants_result_table.setItem(row, 2, QTableWidgetItem(f"{rect.width:.0f}"))
                        
                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤—Å–µ–≥–¥–∞ 1)
                        self.remnants_result_table.setItem(row, 3, QTableWidgetItem("1"))

    # ========== –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–• ==========
    
    def _set_interactive_mode(self, table):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã"""
        try:
            header = table.horizontalHeader()
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
            for i in range(table.columnCount() - 1):
                header.setSectionResizeMode(i, QHeaderView.ResizeMode.Interactive)
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–æ–ª–±–µ—Ü –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–∏–º—Å—è
            if table.columnCount() > 0:
                header.setSectionResizeMode(table.columnCount() - 1, QHeaderView.ResizeMode.Stretch)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    
    def _update_table_column_widths(self, table):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            header = table.horizontalHeader()
            # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∂–∏–º –ø–æ–¥–≥–æ–Ω–∫–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
            for i in range(table.columnCount()):
                header.setSectionResizeMode(i, QHeaderView.ResizeMode.ResizeToContents)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è Qt –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–æ–≤
            QApplication.processEvents()
            
            # –ß–µ—Ä–µ–∑ –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            QTimer.singleShot(50, lambda: self._set_interactive_mode(table))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤: {e}")
    
    def update_all_table_widths(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏"""
        table_names = [
            'details_table',
            'remainders_table', 
            'materials_table',
            'remnants_result_table',
            'waste_results_table',
            'current_remnants_table',
            'waste_result_table'
        ]
        
        for table_name in table_names:
            if hasattr(self, table_name):
                table = getattr(self, table_name)
                if table and table.rowCount() > 0:  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
                    table.resizeColumnsToContents()
    
    def on_load_data_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        grorderid = self.grorderid_input.text().strip()
        if not grorderid:
            print("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è (grorderid)")
            return
        
        try:
            grorderid = int(grorderid)
        except ValueError:
            print("‚ùå –û—à–∏–±–∫–∞: grorderid –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.load_data_button.setEnabled(False)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∫–∞...")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–ª–∞–¥–∫–∏
        self.debug_dialog = DebugDialog(self)
        self.debug_dialog.show()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def load_data():
            try:
                self._add_debug_step(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ {grorderid}...")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
                if not check_api_connection():
                    self.error_signal.emit("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", 
                        "–°–µ—Ä–≤–µ—Ä API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000", 
                        "warning")
                    return
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π
                details_data = get_details_raw(grorderid)
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –≤–µ—Ä–Ω—É–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if details_data is None:
                    details_data = {}
                    
                # API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 'items', –∞ –Ω–µ 'details' - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
                if 'items' in details_data and 'details' not in details_data:
                    details_data['details'] = details_data['items']
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                details_list = details_data.get('details', [])
                if not details_list:
                    self._add_debug_step("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã")
                    details_data['details'] = []
                else:
                    self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(details_list)} –¥–µ—Ç–∞–ª–µ–π")
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ goodsid
                unique_goodsids = set()
                for detail in details_data.get('details', []):
                    goodsid = detail.get('goodsid')
                    if goodsid:
                        unique_goodsids.add(goodsid)
                
                self._add_debug_step(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_goodsids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                all_remainders = []
                all_materials = []
                
                for goodsid in unique_goodsids:
                    try:
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
                        remainders_response = get_warehouse_remainders(goodsid)
                        if remainders_response and 'remainders' in remainders_response:
                            all_remainders.extend(remainders_response['remainders'])
                        
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                        materials_response = get_warehouse_main_material(goodsid)
                        if materials_response and 'main_material' in materials_response:
                            all_materials.extend(materials_response['main_material'])
                            
                    except Exception as e:
                        self._add_debug_step(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è goodsid {goodsid}: {e}")
                        continue
                
                self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤")
                self._add_debug_step(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI
                self.data_loaded_signal.emit(details_data, all_remainders, all_materials)
                self._add_debug_step("üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                self.success_signal.emit()
                
            except Exception as e:
                self._add_debug_step(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.error_signal.emit("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e), "critical")
            finally:
                self.restore_button_signal.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=load_data, daemon=True)
        thread.start()

    # ========== –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ==========
    
    def on_optimize_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        if not self.current_details:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(False)
        self.optimize_button.setText("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è...")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.progress_dialog = ProgressDialog(self)
        self.progress_dialog.show()
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        params = {
            'min_remnant_width': self.min_remnant_width.value(),
            'min_remnant_height': self.min_remnant_height.value(),
            'target_waste_percent': self.target_waste_percent.value(),
            'min_waste_side': self.min_cut_size.value(),
            'use_warehouse_remnants': self.use_remainders.isChecked()
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def run_optimization():
            try:
                def progress_callback(percent):
                    if self.progress_dialog:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –º–µ—Ç–æ–¥–∞ 'set_progress'
                        self.progress_dialog.set_progress(percent)
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                result = optimize(
                    details=self.current_details,
                    materials=self.current_materials,
                    remainders=self.current_remainders,
                    params=params,
                    progress_fn=progress_callback
                )
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–π –ª–∏—Å—Ç
                # –ß–∞—Å—Ç–∏—á–Ω—ã–π —É—Å–ø–µ—Ö (–∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∞ —á–∞—Å—Ç—å –¥–µ—Ç–∞–ª–µ–π) —Ç–æ–∂–µ —è–≤–ª—è–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º!
                if result and (result.success or len(result.layouts) > 0):
                    self.optimization_result = result
                    self.optimization_result_signal.emit(result)
                else:
                    error_msg = "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    if result and hasattr(result, 'message'):
                        error_msg = result.message
                    self.optimization_error_signal.emit(error_msg)
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
                self.optimization_error_signal.emit(error_msg)
            finally:
                self.close_progress_signal.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_optimization, daemon=True)
        thread.start()

    # ========== –ú–ï–¢–û–î–´ –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò ==========
    
    def on_sheet_selected(self, index):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ª–∏—Å—Ç–∞"""
        if index >= 0 and self.optimization_result and index < len(self.optimization_result.sheets):
            self.current_sheet_index = index
            self.visualize_sheet(index)
            self.update_navigation_buttons()
    
    def on_prev_sheet(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –ª–∏—Å—Ç—É"""
        if self.current_sheet_index > 0:
            self.sheets_combo.setCurrentIndex(self.current_sheet_index - 1)
    
    def on_next_sheet(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ª–∏—Å—Ç—É"""
        if self.optimization_result and self.current_sheet_index < len(self.optimization_result.sheets) - 1:
            self.sheets_combo.setCurrentIndex(self.current_sheet_index + 1)
    
    def update_navigation_buttons(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""
        if self.optimization_result:
            self.prev_sheet_btn.setEnabled(self.current_sheet_index > 0)
            self.next_sheet_btn.setEnabled(self.current_sheet_index < len(self.optimization_result.sheets) - 1)
        else:
            self.prev_sheet_btn.setEnabled(False)
            self.next_sheet_btn.setEnabled(False)
    
    def refresh_visualization(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        if self.optimization_result and self.current_sheet_index >= 0:
            self.visualize_sheet(self.current_sheet_index)

    def visualize_sheet(self, sheet_index):
        """–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–∞"""
        if not self.optimization_result or sheet_index >= len(self.optimization_result.sheets):
            return
        
        from .visualization_widgets import visualize_sheet_layout
        
        sheet_layout = self.optimization_result.sheets[sheet_index]
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ç–∫–∏, –æ–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞
        show_grid = False  # –°–µ—Ç–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        show_dimensions = self.show_dimensions_cb.isChecked() if hasattr(self, 'show_dimensions_cb') else True
        show_names = self.show_names_cb.isChecked() if hasattr(self, 'show_names_cb') else True
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        sheet_rect = visualize_sheet_layout(
            self.graphics_scene,
            sheet_layout,
            show_grid=show_grid,
            show_dimensions=show_dimensions,
            show_names=show_names
        )
        
        if sheet_rect:
            self.current_sheet_rect = sheet_rect
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–æ–∫–∞–∑–µ
            if hasattr(self, '_first_visualization'):
                delattr(self, '_first_visualization')
                QTimer.singleShot(100, self.reset_zoom)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–µ
        info_text = f"–õ–∏—Å—Ç #{sheet_index + 1}: {sheet_layout.sheet.material} "
        info_text += f"({sheet_layout.sheet.width:.0f}x{sheet_layout.sheet.height:.0f} –º–º) | "
        info_text += f"–†–∞–∑–º–µ—â–µ–Ω–æ: {len(sheet_layout.placed_details)} –¥–µ—Ç–∞–ª–µ–π | "
        info_text += f"–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {sheet_layout.efficiency:.1f}% | "
        info_text += f"–û—Ç—Ö–æ–¥—ã: {sheet_layout.waste_percent:.1f}%"
        
        self.sheet_info_label.setText(info_text)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        self.update_current_sheet_tables(sheet_layout)

    def update_current_sheet_tables(self, sheet_layout):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        self.update_current_remnants_table(sheet_layout)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Ö–æ–¥–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        self.update_waste_table(sheet_layout)

    def update_current_remnants_table(self, sheet_layout):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞"""
        if not hasattr(self, 'current_remnants_table'):
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        sorting_enabled = self.current_remnants_table.isSortingEnabled()
        self.current_remnants_table.setSortingEnabled(False)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.current_remnants_table.setRowCount(0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        if hasattr(sheet_layout, 'free_rectangles') and sheet_layout.free_rectangles:
            for i, rect in enumerate(sheet_layout.free_rectangles):
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ rect —ç—Ç–æ –æ–±—ä–µ–∫—Ç FreeRectangle —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    if hasattr(rect, 'width') and hasattr(rect, 'height'):
                        if rect.width > 0 and rect.height > 0:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É: –±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ >= –±–æ–ª—å—à–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –º–µ–Ω—å—à–∞—è >= –º–µ–Ω—å—à–µ–≥–æ
                            min_width = self.min_remnant_width.value() if hasattr(self, 'min_remnant_width') else 180
                            min_height = self.min_remnant_height.value() if hasattr(self, 'min_remnant_height') else 100
                            element_min_side = min(rect.width, rect.height)
                            element_max_side = max(rect.width, rect.height)
                            param_min = min(min_width, min_height)
                            param_max = max(min_width, min_height)
                            
                            if element_min_side >= param_min and element_max_side >= param_max:
                                row = self.current_remnants_table.rowCount()
                                self.current_remnants_table.insertRow(row)
                                
                                # –ê—Ä—Ç–∏–∫—É–ª
                                marking = sheet_layout.sheet.material
                                self.current_remnants_table.setItem(row, 0, _create_text_item(marking))
                                
                                # –í—ã—Å–æ—Ç–∞
                                self.current_remnants_table.setItem(row, 1, _create_numeric_item(rect.height))
                                
                                # –®–∏—Ä–∏–Ω–∞  
                                self.current_remnants_table.setItem(row, 2, _create_numeric_item(rect.width))
                                
                                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤—Å–µ–≥–¥–∞ 1 –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤)
                                self.current_remnants_table.setItem(row, 3, _create_numeric_item(1))
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ rect —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    elif isinstance(rect, dict):
                        if rect.get('width', 0) > 0 and rect.get('height', 0) > 0:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                            min_width = self.min_remnant_width.value() if hasattr(self, 'min_remnant_width') else 180
                            min_height = self.min_remnant_height.value() if hasattr(self, 'min_remnant_height') else 100
                            element_min_side = min(rect['width'], rect['height'])
                            element_max_side = max(rect['width'], rect['height'])
                            param_min = min(min_width, min_height)
                            param_max = max(min_width, min_height)
                            
                            if element_min_side >= param_min and element_max_side >= param_max:
                                row = self.current_remnants_table.rowCount()
                                self.current_remnants_table.insertRow(row)
                                
                                # –ê—Ä—Ç–∏–∫—É–ª
                                marking = sheet_layout.sheet.material
                                self.current_remnants_table.setItem(row, 0, _create_text_item(marking))
                                
                                # –í—ã—Å–æ—Ç–∞
                                self.current_remnants_table.setItem(row, 1, _create_numeric_item(rect.get('height', 0)))
                                
                                # –®–∏—Ä–∏–Ω–∞  
                                self.current_remnants_table.setItem(row, 2, _create_numeric_item(rect.get('width', 0)))
                                
                                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤—Å–µ–≥–¥–∞ 1 –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤)
                                self.current_remnants_table.setItem(row, 3, _create_numeric_item(1))
                    
                    else:
                        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç free_rectangle: {type(rect)}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞ {i}: {e}")
                    continue
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.current_remnants_table.setSortingEnabled(sorting_enabled)
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.current_remnants_table.resizeColumnsToContents()

    def update_waste_table(self, sheet_layout):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ –≤–∫–ª–∞–¥–∫–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏, –∞ –Ω–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if not hasattr(self, 'waste_result_table'):
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        sorting_enabled = self.waste_result_table.isSortingEnabled()
        self.waste_result_table.setSortingEnabled(False)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.waste_result_table.setRowCount(0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ—Ç—Ö–æ–¥–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –ª–∏—Å—Ç–∞
        if hasattr(sheet_layout, 'waste_rectangles') and sheet_layout.waste_rectangles:
            for i, waste_rect in enumerate(sheet_layout.waste_rectangles):
                try:
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ waste_rect —ç—Ç–æ –æ–±—ä–µ–∫—Ç FreeRectangle —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
                    if hasattr(waste_rect, 'width') and hasattr(waste_rect, 'height'):
                        if waste_rect.width > 0 and waste_rect.height > 0:
                            row = self.waste_result_table.rowCount()
                            self.waste_result_table.insertRow(row)
                            
                            # –ê—Ä—Ç–∏–∫—É–ª
                            marking = sheet_layout.sheet.material
                            self.waste_result_table.setItem(row, 0, _create_text_item(marking))
                            
                            # –í—ã—Å–æ—Ç–∞
                            self.waste_result_table.setItem(row, 1, _create_numeric_item(waste_rect.height))
                            
                            # –®–∏—Ä–∏–Ω–∞
                            self.waste_result_table.setItem(row, 2, _create_numeric_item(waste_rect.width))
                            
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤—Å–µ–≥–¥–∞ 1 –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤)
                            self.waste_result_table.setItem(row, 3, _create_numeric_item(1))
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ waste_rect —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
                    elif isinstance(waste_rect, dict):
                        if waste_rect.get('width', 0) > 0 and waste_rect.get('height', 0) > 0:
                            row = self.waste_result_table.rowCount()
                            self.waste_result_table.insertRow(row)
                            
                            # –ê—Ä—Ç–∏–∫—É–ª
                            marking = sheet_layout.sheet.material
                            self.waste_result_table.setItem(row, 0, _create_text_item(marking))
                            
                            # –í—ã—Å–æ—Ç–∞
                            self.waste_result_table.setItem(row, 1, _create_numeric_item(waste_rect.get('height', 0)))
                            
                            # –®–∏—Ä–∏–Ω–∞
                            self.waste_result_table.setItem(row, 2, _create_numeric_item(waste_rect.get('width', 0)))
                            
                            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–≤—Å–µ–≥–¥–∞ 1 –¥–ª—è –æ—Ç—Ö–æ–¥–æ–≤)
                            self.waste_result_table.setItem(row, 3, _create_numeric_item(1))
                    
                    else:
                        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç waste_rect: {type(waste_rect)}")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Ö–æ–¥–∞ {i}: {e}")
                    continue
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        self.waste_result_table.setSortingEnabled(sorting_enabled)
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Å—Ç–æ–ª–±—Ü–æ–≤
        self.waste_result_table.resizeColumnsToContents()

    # ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========
    
    def _add_debug_step(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        print(f"üîß DEBUG: {message}")
        self.debug_step_signal.emit(message)
    
    def _add_debug_step_safe(self, message):
        """Thread-safe –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–≥–∞ –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug_dialog:
            self.debug_dialog.add_step(message)
    
    def _show_error_safe(self, title, message, icon):
        """Thread-safe –ø–æ–∫–∞–∑ –æ—à–∏–±–∫–∏"""
        print(f"‚ùå {title}: {message}")
    
    def _show_success_safe(self):
        """Thread-safe –ø–æ–∫–∞–∑ —É—Å–ø–µ—Ö–∞"""
        if self.debug_dialog:
            # –í DebugDialog –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ success(), –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
            QTimer.singleShot(2000, self.debug_dialog.close)
    
    def _update_tables_safe(self, details_data, remainders, materials):
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º grorderid –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin
            grorderid = self.grorderid_input.text().strip()
            if grorderid.isdigit():
                self.current_grorderid = int(grorderid)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω grorderid –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {self.current_grorderid}")
            else:
                self.current_grorderid = None
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ None –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –Ω–∏–º
            if details_data is None:
                details_data = {}
            if remainders is None:
                remainders = []
            if materials is None:
                materials = []
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            self.current_details = details_data.get('details', [])
            self.current_remainders = remainders
            self.current_materials = materials
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            grorder_info = details_data.get('grorder_info', {})
            self.task_name_label.setText(grorder_info.get('gr_name', '<–Ω–µ —É–∫–∞–∑–∞–Ω–æ>'))
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            groupdate = grorder_info.get('groupdate', '<–Ω–µ —É–∫–∞–∑–∞–Ω–æ>')
            if groupdate and groupdate != '<–Ω–µ —É–∫–∞–∑–∞–Ω–æ>':
                try:
                    from datetime import datetime
                    date_obj = datetime.fromisoformat(str(groupdate))
                    groupdate = date_obj.strftime('%d.%m.%Y')
                except:
                    pass
            self.task_date_label.setText(groupdate)
            
            self.task_orders_label.setText(grorder_info.get('gr_ordernames', '<–Ω–µ —É–∫–∞–∑–∞–Ω–æ>'))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            self._update_details_table(self.current_details)
            self._update_remainders_table(self.current_remainders)
            self._update_materials_table(self.current_materials)
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            self.optimize_button.setEnabled(True)
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–≥–æ–Ω—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            QTimer.singleShot(500, self.update_all_table_widths)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
    
    def _restore_button_safe(self):
        """Thread-safe –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏"""
        self.load_data_button.setEnabled(True)
        self.load_data_button.setText("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    
    def _update_details_table(self, details):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–µ—Ç–∞–ª–µ–π"""
        self.details_table.setRowCount(0)
        for detail in details:
            row = self.details_table.rowCount()
            self.details_table.insertRow(row)
            
            self.details_table.setItem(row, 0, _create_text_item(detail.get('oi_name', '')))
            self.details_table.setItem(row, 1, _create_text_item(detail.get('g_marking', '')))
            self.details_table.setItem(row, 2, _create_numeric_item(detail.get('height', 0)))
            self.details_table.setItem(row, 3, _create_numeric_item(detail.get('width', 0)))
            self.details_table.setItem(row, 4, _create_numeric_item(detail.get('total_qty', 0)))
    
    def _update_remainders_table(self, remainders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        self.remainders_table.setRowCount(0)
        for remainder in remainders:
            if remainder.get('qty', 0) > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                row = self.remainders_table.rowCount()
                self.remainders_table.insertRow(row)
                
                self.remainders_table.setItem(row, 0, _create_text_item(remainder.get('g_marking', '')))
                self.remainders_table.setItem(row, 1, _create_numeric_item(remainder.get('height', 0)))
                self.remainders_table.setItem(row, 2, _create_numeric_item(remainder.get('width', 0)))
                self.remainders_table.setItem(row, 3, _create_numeric_item(remainder.get('qty', 0)))
    
    def _update_materials_table(self, materials):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        self.materials_table.setRowCount(0)
        for material in materials:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∞ –ø–æ–ª—è: res_qty (–¥–ª—è API –¥–∞–Ω–Ω—ã—Ö) –∏ qty (–¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
            res_qty = material.get('res_qty', 0) or material.get('qty', 0)
            if res_qty and res_qty > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
                row = self.materials_table.rowCount()
                self.materials_table.insertRow(row)
                
                self.materials_table.setItem(row, 0, _create_text_item(material.get('g_marking', '')))
                self.materials_table.setItem(row, 1, _create_numeric_item(material.get('height', 0)))
                self.materials_table.setItem(row, 2, _create_numeric_item(material.get('width', 0)))
                self.materials_table.setItem(row, 3, _create_numeric_item(int(res_qty)))
    
    def _handle_optimization_result(self, result):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        self.optimization_result = result
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(True)
        self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_statistics(result)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
        self._update_visualization(result)
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin –µ—Å–ª–∏ –µ—Å—Ç—å grorderid
        if hasattr(self, 'current_grorderid') and self.current_grorderid:
            self.upload_to_altawin_button.setEnabled(True)
            print(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è grorderid={self.current_grorderid}")
        else:
            print(f"‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç grorderid")
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.tabs.setCurrentIndex(1)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ—Ç–æ—Ä–æ–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ç–∞–∫ –≤–∏–¥–µ–Ω –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –∏ —Ç–∞–±–ª–∏—Ü–∞—Ö
        print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–∞–∑–º–µ—â–µ–Ω–æ: {result.total_placed_details} –¥–µ—Ç–∞–ª–µ–π, "
              f"–ª–∏—Å—Ç–æ–≤: {result.total_sheets}, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {result.total_efficiency:.1f}%")
    
    def _handle_optimization_error(self, error_msg):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        self.optimize_button.setEnabled(True)
        self.optimize_button.setText("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error_msg}")
        QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:\n\n{error_msg}")
    
    def _close_progress_dialog(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_dialog:
            self.progress_dialog.close()
            self.progress_dialog = None
    
    def _update_statistics(self, result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        # –ü–æ–¥—Å—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
        materials_used = 0
        remainders_used = 0
        
        for layout in result.sheets:
            if layout.sheet.is_remainder:
                remainders_used += 1
            else:
                materials_used += 1
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        total_elements_to_place = 0
        placed_elements = result.total_placed_details
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if hasattr(self, 'current_details') and self.current_details:
            for detail in self.current_details:
                total_qty = detail.get('total_qty', 0)
                if isinstance(total_qty, (int, float)) and total_qty > 0:
                    total_elements_to_place += int(total_qty)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.stats_materials_used.setText(str(materials_used))
        self.stats_remainders_used.setText(str(remainders_used))
        self.stats_total_sheets.setText(str(result.total_sheets))
        self.stats_total_details.setText(str(result.total_placed_details))
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.stats_distributed_elements.setText(f"{placed_elements}/{total_elements_to_place}")
        
        # –ü–ª–æ—â–∞–¥–∏
        total_details_area = sum(layout.used_area for layout in result.sheets)
        total_waste_area = sum(layout.waste_area for layout in result.sheets)
        total_remnants_area = sum(r.area for r in result.useful_remnants)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
        waste_grouped = {}
        for layout in result.sheets:
            g_marking = layout.sheet.material
            if hasattr(layout, 'waste_rectangles'):
                for waste_rect in layout.waste_rectangles:
                    if waste_rect.width > 0 and waste_rect.height > 0:
                        key = (g_marking, waste_rect.width, waste_rect.height)
                        if key in waste_grouped:
                            waste_grouped[key] += 1
                        else:
                            waste_grouped[key] = 1
        
        total_waste_count = len(waste_grouped)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –æ—Ç—Ö–æ–¥–æ–≤
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (—Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)
        remnants_grouped = {}
        for layout in result.sheets:
            g_marking = layout.sheet.material
            for rect in layout.free_rectangles:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —á—Ç–æ –∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                min_width = self.min_remnant_width.value() if hasattr(self, 'min_remnant_width') else 180
                min_height = self.min_remnant_height.value() if hasattr(self, 'min_remnant_height') else 100
                element_min_side = min(rect.width, rect.height)
                element_max_side = max(rect.width, rect.height)
                param_min = min(min_width, min_height)
                param_max = max(min_width, min_height)
                
                if element_min_side >= param_min and element_max_side >= param_max:
                    key = (g_marking, rect.width, rect.height)
                    if key in remnants_grouped:
                        remnants_grouped[key] += 1
                    else:
                        remnants_grouped[key] = 1
        
        total_remnants_count = len(remnants_grouped)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        total_area = sum(layout.total_area for layout in result.sheets)
        remnants_percent = (total_remnants_area / total_area * 100) if total_area > 0 else 0
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º¬≤
        self.stats_details_area.setText(f"{total_details_area / 1_000_000:.2f} –º¬≤")
        self.stats_waste_area.setText(f"{total_waste_area / 1_000_000:.2f} –º¬≤")
        self.stats_waste_count.setText(str(total_waste_count))
        self.stats_waste_percent.setText(f"{result.total_waste_percent:.2f} %")
        self.stats_remnants_area.setText(f"{total_remnants_area / 1_000_000:.2f} –º¬≤")
        self.stats_remnants_count.setText(str(total_remnants_count))
        self.stats_remnants_percent.setText(f"{remnants_percent:.2f} %")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ table_widgets
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            if hasattr(self, 'remnants_result_table'):
                min_width = self.min_remnant_width.value() if hasattr(self, 'min_remnant_width') else 180
                min_height = self.min_remnant_height.value() if hasattr(self, 'min_remnant_height') else 100
                update_remnants_result_table(self.remnants_result_table, result, min_width, min_height)
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Ö–æ–¥–æ–≤ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
            if hasattr(self, 'waste_results_table'):
                update_waste_results_table(self.waste_results_table, result)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞—Ç–∫–æ–≤
            self.update_remnants_table(result.sheets)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        QTimer.singleShot(300, lambda: self.update_all_table_widths())
    
    def _update_visualization(self, result):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤
        self.sheets_combo.clear()
        for i, layout in enumerate(result.sheets):
            sheet = layout.sheet
            label = f"–õ–∏—Å—Ç #{i+1}: {sheet.material} ({sheet.width:.0f}x{sheet.height:.0f})"
            if sheet.is_remainder:
                label += " [–û—Å—Ç–∞—Ç–æ–∫]"
            self.sheets_combo.addItem(label)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–≤–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        self._first_visualization = True
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        if result.sheets:
            self.sheets_combo.setCurrentIndex(0)
            self.current_sheet_index = 0
            self.visualize_sheet(0)
            self.update_navigation_buttons()

    # ========== –ú–ï–¢–û–î–´ –ó–ê–ì–†–£–ó–ö–ò –í ALTAWIN ==========
    
    def on_upload_to_altawin(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin"""
        if not self.optimization_result or not self.optimization_result.sheets:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        if not hasattr(self, 'current_grorderid') or not self.current_grorderid:
            print("‚ùå –ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω grorderid –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
            return
        
        # –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        reply = QMessageBox.question(
            self, 
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏", 
            f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin?\n\n"
            f"–°–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {self.current_grorderid}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: {len(self.optimization_result.sheets)}\n"
            f"–†–∞–∑–º–µ—â–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π: {self.optimization_result.total_placed_details}\n\n"
            f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã!",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
            QMessageBox.StandardButton.No
        )
        
        if reply == QMessageBox.StandardButton.Yes:
            self._upload_optimization_data_to_altawin()
    
    def _upload_optimization_data_to_altawin(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö Altawin"""
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
        self.upload_to_altawin_button.setEnabled(False)
        self.upload_to_altawin_button.setText("üì§ –ó–∞–≥—Ä—É–∑–∫–∞...")
        
        try:
            print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin –¥–ª—è grorderid={self.current_grorderid}")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            import sys
            import os
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
            current_dir = os.path.dirname(os.path.abspath(__file__))
            parent_dir = os.path.dirname(current_dir)  # client directory
            if parent_dir not in sys.path:
                sys.path.insert(0, parent_dir)
            
            try:
                from core.api_client import upload_optimization_data, check_api_connection
            except ImportError:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –∏–º–ø–æ—Ä—Ç–∞
                from client.core.api_client import upload_optimization_data, check_api_connection
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            if not check_api_connection():
                raise Exception("API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            optimization_data = self._prepare_optimization_data_for_upload()
            
            print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(optimization_data)} –ª–∏—Å—Ç–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ goodsid –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            for i, sheet_data in enumerate(optimization_data):
                goodsid = sheet_data.get('goodsid')
                if not goodsid or goodsid == 0:
                    raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π goodsid={goodsid} –¥–ª—è –ª–∏—Å—Ç–∞ #{i+1}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.")
                print(f"üìã –õ–∏—Å—Ç #{i+1}: goodsid={goodsid}, –º–∞—Ç–µ—Ä–∏–∞–ª={self.optimization_result.sheets[i].sheet.material}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
            result = upload_optimization_data(self.current_grorderid, optimization_data)
            
            if result.get('success'):
                print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Altawin!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                QMessageBox.information(
                    self,
                    "–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                    f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ Altawin!\n\n"
                    f"–°–º–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {self.current_grorderid}\n"
                    f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(optimization_data)}\n"
                    f"–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {self.optimization_result.total_efficiency:.1f}%"
                )
            else:
                error_msg = result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_msg}")
                
        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin: {str(e)}"
            print(f"‚ùå {error_message}")
            
            QMessageBox.critical(
                self,
                "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏",
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Altawin:\n\n{error_message}\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É API –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö."
            )
        
        finally:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
            self.upload_to_altawin_button.setEnabled(True)
            self.upload_to_altawin_button.setText("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin")
    
    def _prepare_optimization_data_for_upload(self):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Altawin"""
        optimization_data = []
        
        for sheet_index, sheet_layout in enumerate(self.optimization_result.sheets):
            # –°–æ–∑–¥–∞–µ–º XML –¥–∞–Ω–Ω—ã–µ
            xml_data = self._create_cutting_xml(sheet_layout, sheet_index + 1)
            
            print(f"üìÑ XML –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_index + 1}: {len(xml_data)} —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Å—Ç–µ
            sheet_data = {
                'num_glass': sheet_index + 1,  # –ü–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –ª–∏—Å—Ç–∞
                'goodsid': self._extract_goodsid_from_sheet(sheet_layout),
                'width': int(sheet_layout.sheet.width),
                'height': int(sheet_layout.sheet.height),
                'trash_area': int(sheet_layout.waste_area),
                'percent_full': round(sheet_layout.efficiency, 6),
                'percent_waste': round(sheet_layout.waste_percent, 6),
                'piece_count': len(sheet_layout.placed_details),
                'sum_area': int(sheet_layout.used_area),
                'qty': 1,  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞ 1)
                'is_remainder': -1 if sheet_layout.sheet.is_remainder else 0,
                'xml_data': xml_data  # XML –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8
            }
            
            optimization_data.append(sheet_data)
            
        return optimization_data
    
    def _extract_goodsid_from_sheet(self, sheet_layout):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç goodsid –∏–∑ –ª–∏—Å—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        # –°–ø–æ—Å–æ–± 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º goodsid –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(sheet_layout.sheet, 'goodsid') and sheet_layout.sheet.goodsid:
            print(f"üîç –ù–∞–π–¥–µ–Ω goodsid –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö –ª–∏—Å—Ç–∞: {sheet_layout.sheet.goodsid}")
            return sheet_layout.sheet.goodsid
        
        # –°–ø–æ—Å–æ–± 2: –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ goodsid —Å—Ä–µ–¥–∏ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        if sheet_layout.placed_details:
            for placed_detail in sheet_layout.placed_details:
                if hasattr(placed_detail, 'detail') and hasattr(placed_detail.detail, 'goodsid'):
                    if placed_detail.detail.goodsid:
                        print(f"üîç –ù–∞–π–¥–µ–Ω goodsid –≤ –¥–µ—Ç–∞–ª–∏: {placed_detail.detail.goodsid}")
                        return placed_detail.detail.goodsid
        
        # –°–ø–æ—Å–æ–± 3: –ò—â–µ–º –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (g_marking)
        material_marking = sheet_layout.sheet.material
        print(f"üîç –ò—â–µ–º goodsid –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material_marking}")
        
        # –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        if hasattr(self, 'current_materials') and self.current_materials:
            for material in self.current_materials:
                if material.get('g_marking') == material_marking:
                    goodsid = material.get('goodsid')
                    if goodsid:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω goodsid –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö: {goodsid}")
                        return goodsid
        
        # –ò—â–µ–º —Å—Ä–µ–¥–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤
        if hasattr(self, 'current_remainders') and self.current_remainders:
            for remainder in self.current_remainders:
                if remainder.get('g_marking') == material_marking:
                    goodsid = remainder.get('goodsid')
                    if goodsid:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω goodsid –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö: {goodsid}")
                        return goodsid
        
        # –°–ø–æ—Å–æ–± 4: –ò—â–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–µ—Ç–∞–ª—è—Ö
        if hasattr(self, 'current_details') and self.current_details:
            for detail in self.current_details:
                if detail.get('g_marking') == material_marking:
                    goodsid = detail.get('goodsid')
                    if goodsid:
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω goodsid –≤ –¥–µ—Ç–∞–ª—è—Ö: {goodsid}")
                        return goodsid
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        error_msg = f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ goodsid –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞ '{material_marking}'"
        print(error_msg)
        raise ValueError(error_msg)
    
    def _create_cutting_xml(self, sheet_layout, sheet_num):
        """–°–æ–∑–¥–∞–Ω–∏–µ XML —Ñ–∞–π–ª–∞ —Ä–∞—Å–∫—Ä–æ—è –≤ UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–µ"""
        from xml.etree.ElementTree import Element, SubElement, tostring
        from xml.dom import minidom
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç
        cutting = Element("cutting")
        cutting.set("version", "2.1")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = SubElement(cutting, "header")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–µ
        glass = SubElement(header, "glass")
        glass.set("id", str(self._extract_goodsid_from_sheet(sheet_layout)))
        glass.set("width", str(int(sheet_layout.sheet.width)))
        glass.set("height", str(int(sheet_layout.sheet.height)))
        glass.set("remainder", "1" if sheet_layout.sheet.is_remainder else "0")
        glass.text = sheet_layout.sheet.material + "  "  # –ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –¥–≤–æ–π–Ω—ã–º –ø—Ä–æ–±–µ–ª–æ–º
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = SubElement(glass, "params")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
        min_width = getattr(self, 'min_remnant_width', None)
        min_height = getattr(self, 'min_remnant_height', None)
        
        minwidth = SubElement(params, "minwidth")
        minwidth.text = str(int(min_width.value())) if min_width and hasattr(min_width, 'value') else "180"
        
        minheight = SubElement(params, "minheight")
        minheight.text = str(int(min_height.value())) if min_height and hasattr(min_height, 'value') else "100"
        
        # –ì—Ä–∞–Ω–∏—Ü—ã
        border = SubElement(params, "border")
        border.set("left", "0")
        border.set("right", "0")
        border.set("top", "0")
        border.set("bottom", "0")
        
        # –®–∏—Ä–∏–Ω–∞ —Ä–µ–∑–∞
        cutwidth = SubElement(params, "cutwidth")
        cutwidth.text = "0"
        
        # –°–µ–∫—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π
        pieces = SubElement(cutting, "pieces")
        pieces.set("count", str(len(sheet_layout.placed_details)))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—ã –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
        cuts = self._generate_guillotine_cuts(sheet_layout)
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ä–∞—Å–∫—Ä–æ—è
        piece_dimensions = self._calculate_actual_piece_dimensions_with_cuts(sheet_layout, cuts)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
        for i, placed_detail in enumerate(sheet_layout.placed_details):
            piece = SubElement(pieces, "piece")
            piece.set("num", str(i))
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã—Ö
            actual_width, actual_height = piece_dimensions.get(i, (placed_detail.width, placed_detail.height))
            piece.set("width", str(int(actual_width)))
            piece.set("height", str(int(actual_height)))
            piece.set("direction", "1" if placed_detail.is_rotated else "0")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ piece –ø–æ —Ñ–æ—Ä–º–∞—Ç—É Altawin:
            # –°—Ç—Ä–æ–∫–∞ 1: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ (–ê—Ä—Ç–∏–∫—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è)
            # –°—Ç—Ä–æ–∫–∞ 2: –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∑–∞–∫–∞–∑ —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–æ–≤
            # –°—Ç—Ä–æ–∫–∞ 3: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–µ—Ç–∞–ª–∏
            material_name = sheet_layout.sheet.material
            gp_marking = ""
            orderno = ""
            oi_name = ""
            
            # –ê—Ä—Ç–∏–∫—É–ª –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è (gp_marking)
            if hasattr(placed_detail.detail, 'gp_marking') and getattr(placed_detail.detail, 'gp_marking'):
                gp_marking = str(getattr(placed_detail.detail, 'gp_marking')).strip()
            
            # –ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ (orderno)
            if hasattr(placed_detail.detail, 'orderno') and getattr(placed_detail.detail, 'orderno'):
                orderno = str(getattr(placed_detail.detail, 'orderno')).strip()
            
            # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–µ–∫–ª–æ–ø–∞–∫–µ—Ç–∞ (oi_name)
            if hasattr(placed_detail.detail, 'oi_name') and getattr(placed_detail.detail, 'oi_name'):
                oi_name = str(getattr(placed_detail.detail, 'oi_name')).strip()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
            if gp_marking:
                line1 = f"{material_name} ({gp_marking})"
            else:
                line1 = material_name
            
            line2 = orderno if orderno else ""
            line3 = oi_name if oi_name else f"–î–µ—Ç–∞–ª—å {i+1}"
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ piece
            piece.text = f"{line1}\n{line2}\n{line3}"
            
            print(f"üìÑ XML piece {i}: –º–∞—Ç–µ—Ä–∏–∞–ª+–∞—Ä—Ç–∏–∫—É–ª='{line1}', orderno='{line2}', oi_name='{line3}'")
        
        # –ö–∞—Ä—Ç–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        map_elem = SubElement(cutting, "map")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–µ—Ç–∞–ª–µ–π
        for i, placed_detail in enumerate(sheet_layout.placed_details):
            piece_map = SubElement(map_elem, "piece")
            piece_map.set("num", str(i))
            piece_map.set("x", str(int(placed_detail.x)))
            piece_map.set("y", str(int(placed_detail.y)))
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ rotate - –≤—Å–µ–≥–¥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
            # –°—É–¥—è –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É XML, –¥–ª—è —Å—Ç–µ–∫–ª–∞ –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è rotate="0" (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)
            # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ Altawin
            
            rotate_value = "0"  # –í—Å–µ–≥–¥–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–µ–∫–ª–∞
            
            piece_map.set("rotate", rotate_value)
            
            print(f"üìÑ XML piece {i}: —Ä–∞–∑–º–µ—Ä—ã {int(placed_detail.width)}x{int(placed_detail.height)}, "
                  f"direction={placed_detail.is_rotated}, rotate={rotate_value} (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç)")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
        self._add_cuts_to_xml_with_cuts(map_elem, cuts)
        
        # –û—Å—Ç–∞—Ç–∫–∏
        remainders = SubElement(cutting, "remainders")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –æ—Ç—Ö–æ–¥–æ–≤
        remnant_count = 0
        
        # –î–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        for rect in sheet_layout.free_rectangles:
            if rect.width > 0 and rect.height > 0:
                remainder = SubElement(remainders, "remainder")
                remainder.set("x", str(int(rect.x)))
                remainder.set("y", str(int(rect.y)))
                remainder.set("width", str(int(rect.width)))
                remainder.set("height", str(int(rect.height)))
                remainder.set("waste", "0")  # –î–µ–ª–æ–≤–æ–π –æ—Å—Ç–∞—Ç–æ–∫
                remnant_count += 1
        
        # –û—Ç—Ö–æ–¥—ã
        for rect in sheet_layout.waste_rectangles:
            if rect.width > 0 and rect.height > 0:
                remainder = SubElement(remainders, "remainder")
                remainder.set("x", str(int(rect.x)))
                remainder.set("y", str(int(rect.y)))
                remainder.set("width", str(int(rect.width)))
                remainder.set("height", str(int(rect.height)))
                remainder.set("waste", "1")  # –û—Ç—Ö–æ–¥
                remnant_count += 1
        
        remainders.set("count", str(remnant_count))
        
        # –°–æ–∑–¥–∞–µ–º XML –≤ ANSI (Windows-1251)
        print(f"üìÑ –°–æ–∑–¥–∞–µ–º XML –≤ ANSI –∫–æ–¥–∏—Ä–æ–≤–∫–µ (Windows-1251)")
        
        # –°–æ–∑–¥–∞–µ–º XML —Å Windows-1251 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        rough_string = tostring(cutting, encoding='windows-1251')
        
        # –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
        reparsed = minidom.parseString(rough_string)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML –≤ Windows-1251
        pretty_xml = reparsed.toprettyxml(indent="  ", encoding='windows-1251').decode('windows-1251')
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        lines = [line for line in pretty_xml.split('\n') if line.strip()]
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º XML –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é –¥–ª—è Windows-1251
        lines[0] = '<?xml version="1.0" encoding="windows-1251" standalone="yes"?>'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π XML –≤ ANSI
        final_xml_ansi = '\n'.join(lines)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ glass —ç–ª–µ–º–µ–Ω—Ç–∞ - —É–±–∏—Ä–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏
        import re
        pattern = r'(<glass[^>]*>)\s*\n\s*([^<]+?)\s*(<params>)'
        final_xml_ansi = re.sub(pattern, r'\1\2  \3', final_xml_ansi)
        
        print(f"üìÑ –°–æ–∑–¥–∞–Ω XML –≤ ANSI: {len(final_xml_ansi)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTF-8 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        print(f"üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ ANSI –≤ UTF-8 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        try:
            # –ö–æ–¥–∏—Ä—É–µ–º ANSI —Å—Ç—Ä–æ–∫—É –≤ –±–∞–π—Ç—ã Windows-1251
            ansi_bytes = final_xml_ansi.encode('windows-1251')
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–∞–π—Ç—ã –∫–∞–∫ UTF-8 (–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è)
            utf8_xml = ansi_bytes.decode('windows-1251')
            
            # –ú–µ–Ω—è–µ–º –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—é –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –Ω–∞ UTF-8
            utf8_xml = utf8_xml.replace(
                '<?xml version="1.0" encoding="windows-1251" standalone="yes"?>',
                '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>'
            )
            
            print(f"üìÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ UTF-8: {len(utf8_xml)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return utf8_xml
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑ ANSI –≤ UTF-8: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π ANSI XML
            return final_xml_ansi


    def _generate_guillotine_cuts(self, sheet_layout):
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã—Ö —Ä–µ–∑–æ–≤ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
        
        –ù–æ–≤—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º:
        1. –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Y
        2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é —Ä–µ–∑–∞
        3. –°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–µ–∑—ã –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        4. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        """
        print(f"üîß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã—Ö —Ä–µ–∑–æ–≤ –¥–ª—è –ª–∏—Å—Ç–∞ {sheet_layout.sheet.width}x{sheet_layout.sheet.height}")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ (–¥–µ—Ç–∞–ª–∏, –æ—Å—Ç–∞—Ç–∫–∏, –æ—Ç—Ö–æ–¥—ã)
        all_rects = sheet_layout.placed_details + sheet_layout.free_rectangles + sheet_layout.waste_rectangles
        
        if not all_rects:
            print("‚ö†Ô∏è –ù–µ—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑–æ–≤")
            return []

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        x_coords = {0, sheet_layout.sheet.width}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        y_coords = {0, sheet_layout.sheet.height}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
        for rect in all_rects:
            x_coords.add(rect.x)
            x_coords.add(rect.x + rect.width)
            y_coords.add(rect.y)
            y_coords.add(rect.y + rect.height)

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        sorted_x = sorted([x for x in x_coords if x is not None])
        sorted_y = sorted([y for y in y_coords if y is not None])

        print(f"üîß X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {sorted_x}")
        print(f"üîß Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {sorted_y}")

        def point_is_inside_rect(px, py, rect):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
            return (rect.x <= px < rect.x + rect.width and 
                    rect.y <= py < rect.y + rect.height)

        def find_rect_at_point(px, py):
            """–ù–∞—Ö–æ–¥–∏—Ç –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ç–æ—á–∫—É"""
            for i, rect in enumerate(all_rects):
                if point_is_inside_rect(px, py, rect):
                    return i
            return -1  # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ

        cuts = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∑—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        for x in sorted_x[1:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ Y
            segments = []
            for i in range(len(sorted_y) - 1):
                y1, y2 = sorted_y[i], sorted_y[i + 1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å–µ–≥–º–µ–Ω—Ç–∞
                mid_y = (y1 + y2) / 2
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ –æ—Ç –ª–∏–Ω–∏–∏ —Ä–µ–∑–∞
                left_rect = find_rect_at_point(x - 0.1, mid_y)
                right_rect = find_rect_at_point(x + 0.1, mid_y)
                
                # –ï—Å–ª–∏ —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ —Ä–∞–∑–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –Ω—É–∂–µ–Ω —Ä–µ–∑
                if left_rect != right_rect:
                    segments.append((y1, y2))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑
            if segments:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ Y
                segments.sort()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                merged_segments = []
                current_start, current_end = segments[0]
                
                for i in range(1, len(segments)):
                    seg_start, seg_end = segments[i]
                    
                    # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã —Å–æ—Å–µ–¥–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                    if abs(current_end - seg_start) < 1e-5:
                        current_end = seg_end
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        merged_segments.append((current_start, current_end))
                        current_start, current_end = seg_start, seg_end
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
                merged_segments.append((current_start, current_end))
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—ã –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                for y1, y2 in merged_segments:
                    cuts.append({
                        "orientation": "vert",
                        "x": x,
                        "y1": y1,
                        "y2": y2
                    })
                    print(f"üìè –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ–∑: x={x}, y1={y1}, y2={y2}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—ã (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã)
        for y in sorted_y[1:-1]:  # –ò—Å–∫–ª—é—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å–µ–≥–º–µ–Ω—Ç –ø–æ X
            segments = []
            for i in range(len(sorted_x) - 1):
                x1, x2 = sorted_x[i], sorted_x[i + 1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É —Å–µ–≥–º–µ–Ω—Ç–∞
                mid_x = (x1 + x2) / 2
                
                # –ù–∞—Ö–æ–¥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É –æ—Ç –ª–∏–Ω–∏–∏ —Ä–µ–∑–∞
                below_rect = find_rect_at_point(mid_x, y - 0.1)
                above_rect = find_rect_at_point(mid_x, y + 0.1)
                
                # –ï—Å–ª–∏ —Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É —Ä–∞–∑–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏, –Ω—É–∂–µ–Ω —Ä–µ–∑
                if below_rect != above_rect:
                    segments.append((x1, x2))
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑
            if segments:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ X
                segments.sort()
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                merged_segments = []
                current_start, current_end = segments[0]
                
                for i in range(1, len(segments)):
                    seg_start, seg_end = segments[i]
                    
                    # –ï—Å–ª–∏ —Å–µ–≥–º–µ–Ω—Ç—ã —Å–æ—Å–µ–¥–Ω–∏–µ, –æ–±—ä–µ–¥–∏–Ω—è–µ–º
                    if abs(current_end - seg_start) < 1e-5:
                        current_end = seg_end
                    else:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π
                        merged_segments.append((current_start, current_end))
                        current_start, current_end = seg_start, seg_end
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç
                merged_segments.append((current_start, current_end))
                
                # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—ã –∏–∑ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
                for x1, x2 in merged_segments:
                    cuts.append({
                        "orientation": "horiz",
                        "y": y,
                        "x1": x1,
                        "x2": x2
                    })
                    print(f"üìè –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä–µ–∑: y={y}, x1={x1}, x2={x2}")

        print(f"üîß –°–æ–∑–¥–∞–Ω–æ —Ä–µ–∑–æ–≤: {len(cuts)}")
        return cuts

    def set_task_id(self, task_id: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        if task_id:
            self.grorderid_input.setText(str(task_id))

    def _calculate_actual_piece_dimensions_with_cuts(self, sheet_layout, cuts):
        """
        –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–æ–≤.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {piece_index: (actual_width, actual_height)}
        """
        print(f"üîß –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫—É—Å–∫–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–∑–æ–≤
        x_cuts = {0, sheet_layout.sheet.width}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        y_cuts = {0, sheet_layout.sheet.height}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        
        for cut in cuts:
            if cut["orientation"] == "vert":
                x_cuts.add(cut["x"])
            else:  # horiz
                y_cuts.add(cut["y"])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        sorted_x_cuts = sorted(x_cuts)
        sorted_y_cuts = sorted(y_cuts)
        
        print(f"üîß X —Ä–µ–∑—ã: {sorted_x_cuts}")
        print(f"üîß Y —Ä–µ–∑—ã: {sorted_y_cuts}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —è—á–µ–µ–∫ –º–µ–∂–¥—É —Ä–µ–∑–∞–º–∏
        cells = []
        for i in range(len(sorted_x_cuts) - 1):
            for j in range(len(sorted_y_cuts) - 1):
                x1, x2 = sorted_x_cuts[i], sorted_x_cuts[i + 1]
                y1, y2 = sorted_y_cuts[j], sorted_y_cuts[j + 1]
                cells.append({
                    'x': x1,
                    'y': y1,
                    'width': x2 - x1,
                    'height': y2 - y1,
                    'center_x': (x1 + x2) / 2,
                    'center_y': (y1 + y2) / 2
                })
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—É—Å–∫–∏ —Å —è—á–µ–π–∫–∞–º–∏ —Å–µ—Ç–∫–∏
        piece_dimensions = {}
        
        for piece_idx, placed_detail in enumerate(sheet_layout.placed_details):
            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä –∫—É—Å–∫–∞
            piece_center_x = placed_detail.x + placed_detail.width / 2
            piece_center_y = placed_detail.y + placed_detail.height / 2
            
            # –ò—â–µ–º —è—á–µ–π–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ü–µ–Ω—Ç—Ä –∫—É—Å–∫–∞
            for cell in cells:
                if (cell['x'] <= piece_center_x < cell['x'] + cell['width'] and
                    cell['y'] <= piece_center_y < cell['y'] + cell['height']):
                    
                    # –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —è—á–µ–π–∫–∞
                    actual_width = cell['width']
                    actual_height = cell['height']
                    
                    piece_dimensions[piece_idx] = (actual_width, actual_height)
                    
                    print(f"üîß –ö—É—Å–æ–∫ {piece_idx}: –∏—Å—Ö–æ–¥–Ω—ã–π={int(placed_detail.width)}x{int(placed_detail.height)}, "
                          f"—Ä–µ–∞–ª—å–Ω—ã–π={int(actual_width)}x{int(actual_height)}")
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —è—á–µ–π–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                piece_dimensions[piece_idx] = (placed_detail.width, placed_detail.height)
                print(f"‚ö†Ô∏è –ö—É—Å–æ–∫ {piece_idx}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã")
        
        return piece_dimensions

    def _add_cuts_to_xml_with_cuts(self, map_elem, cuts):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∑–æ–≤ –≤ XML"""
        from xml.etree.ElementTree import SubElement
        
        print(f"üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ {len(cuts)} —Ä–µ–∑–æ–≤ –≤ XML")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—ã –≤ –ø–æ—Ä—è–¥–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç Altawin
        for cut_info in cuts:
            cut = SubElement(map_elem, "cut")
            
            if cut_info["orientation"] == "horiz":
                # –î–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–µ–∑–æ–≤: y, x1, x2, orientation (–ø–æ—Å–ª–µ–¥–Ω–∏–π)
                cut.set("y", str(int(cut_info["y"])))
                cut.set("x1", str(int(cut_info["x1"])))
                cut.set("x2", str(int(cut_info["x2"])))
                cut.set("orientation", cut_info["orientation"])
            else:  # vert
                # –î–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–µ–∑–æ–≤: x, orientation (–≤—Ç–æ—Ä–æ–π), y1, y2
                cut.set("x", str(int(cut_info["x"])))
                cut.set("orientation", cut_info["orientation"])
                cut.set("y1", str(int(cut_info["y1"])))
                cut.set("y2", str(int(cut_info["y2"])))

    def _calculate_actual_piece_dimensions(self, sheet_layout):
        """
        –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫—É—Å–∫–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ —Ä–∞—Å–∫—Ä–æ—è.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {piece_index: (actual_width, actual_height)}
        """
        print(f"üîß –ü–µ—Ä–µ—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ –∫—É—Å–∫–æ–≤ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–º–µ—Ç—Ä–∏–∏
        cuts = self._generate_guillotine_cuts(sheet_layout)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–∑–æ–≤
        x_cuts = {0, sheet_layout.sheet.width}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        y_cuts = {0, sheet_layout.sheet.height}  # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∏—Å—Ç–∞
        
        for cut in cuts:
            if cut["orientation"] == "vert":
                x_cuts.add(cut["x"])
            else:  # horiz
                y_cuts.add(cut["y"])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        sorted_x_cuts = sorted(x_cuts)
        sorted_y_cuts = sorted(y_cuts)
        
        print(f"üîß X —Ä–µ–∑—ã: {sorted_x_cuts}")
        print(f"üîß Y —Ä–µ–∑—ã: {sorted_y_cuts}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —è—á–µ–µ–∫ –º–µ–∂–¥—É —Ä–µ–∑–∞–º–∏
        cells = []
        for i in range(len(sorted_x_cuts) - 1):
            for j in range(len(sorted_y_cuts) - 1):
                x1, x2 = sorted_x_cuts[i], sorted_x_cuts[i + 1]
                y1, y2 = sorted_y_cuts[j], sorted_y_cuts[j + 1]
                cells.append({
                    'x': x1,
                    'y': y1,
                    'width': x2 - x1,
                    'height': y2 - y1,
                    'center_x': (x1 + x2) / 2,
                    'center_y': (y1 + y2) / 2
                })
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –∫—É—Å–∫–∏ —Å —è—á–µ–π–∫–∞–º–∏ —Å–µ—Ç–∫–∏
        piece_dimensions = {}
        
        for piece_idx, placed_detail in enumerate(sheet_layout.placed_details):
            # –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä –∫—É—Å–∫–∞
            piece_center_x = placed_detail.x + placed_detail.width / 2
            piece_center_y = placed_detail.y + placed_detail.height / 2
            
            # –ò—â–µ–º —è—á–µ–π–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ü–µ–Ω—Ç—Ä –∫—É—Å–∫–∞
            for cell in cells:
                if (cell['x'] <= piece_center_x < cell['x'] + cell['width'] and
                    cell['y'] <= piece_center_y < cell['y'] + cell['height']):
                    
                    # –ù–∞–π–¥–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —è—á–µ–π–∫–∞
                    actual_width = cell['width']
                    actual_height = cell['height']
                    
                    piece_dimensions[piece_idx] = (actual_width, actual_height)
                    
                    print(f"üîß –ö—É—Å–æ–∫ {piece_idx}: –∏—Å—Ö–æ–¥–Ω—ã–π={int(placed_detail.width)}x{int(placed_detail.height)}, "
                          f"—Ä–µ–∞–ª—å–Ω—ã–π={int(actual_width)}x{int(actual_height)}")
                    break
            else:
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —è—á–µ–π–∫—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                piece_dimensions[piece_idx] = (placed_detail.width, placed_detail.height)
                print(f"‚ö†Ô∏è –ö—É—Å–æ–∫ {piece_idx}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —è—á–µ–π–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã")
        
        return piece_dimensions
