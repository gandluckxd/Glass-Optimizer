"""
API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
"""

import requests
import json
from .config import API_URL

def check_api_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π endpoint /tables –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        response = requests.get(f"{API_URL}/tables", timeout=120)
        return response.status_code == 200
    except Exception as e:
        print(f"API connection error: {e}")
        return False

def api_request(endpoint, data=None, method='GET'):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    url = f"{API_URL}/{endpoint.lstrip('/')}"
    
    try:
        if method == 'POST':
            response = requests.post(
                url, 
                json=data,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º json= –≤–º–µ—Å—Ç–æ data=
                headers={'Content-Type': 'application/json'}, 
                timeout=120
            )
        else:
            response = requests.get(url, timeout=120)
        
        response.raise_for_status()
        
        try:
            result = response.json()
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ—Ç–≤–µ—Ç–µ API
            print(f"üîß DEBUG API CLIENT: Response type: {type(result)}")
            if isinstance(result, dict):
                print(f"üîß DEBUG API CLIENT: Response keys: {list(result.keys())}")
                for key, value in result.items():
                    if isinstance(value, list):
                        print(f"üîß DEBUG API CLIENT: '{key}' contains {len(value)} items")
                    else:
                        print(f"üîß DEBUG API CLIENT: '{key}': {type(value)}")
            elif isinstance(result, list):
                print(f"üîß DEBUG API CLIENT: Response is list with {len(result)} items")
            return result
        except json.JSONDecodeError as e:
            print(f"JSON decode error: {e}")
            return None
        
    except requests.exceptions.RequestException as e:
        print(f"Request error: {e}")
        return None

def get_tables():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü"""
    return api_request('tables', method='GET')

def get_details_raw(grorderid):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞"""
    data = {"grorderid": grorderid}
    return api_request('details-raw', data, 'POST')

def get_warehouse_main_material(goodsid):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å–∫–ª–∞–¥–∞"""
    data = {"goodsid": goodsid}
    return api_request('warehouse-main-material', data, 'POST')

def get_warehouse_remainders(goodsid):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å–∫–ª–∞–¥–∞"""
    data = {"goodsid": goodsid}
    return api_request('warehouse-remainders', data, 'POST')

def upload_optimization_data(grorderid: int, optimization_data: list, adjust_materials: bool = False):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ Altawin
    
    Args:
        grorderid: ID —Å–º–µ–Ω–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        optimization_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏—Å—Ç–∞
        adjust_materials: –§–ª–∞–≥ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    """
    try:
        print(f"üîÑ API: –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è grorderid={grorderid}")
        print(f"üìä API: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–æ–≤: {len(optimization_data)}")
        print(f"üîß API: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {'–í–ö–õ–Æ–ß–ï–ù–ê' if adjust_materials else '–û–¢–ö–õ–Æ–ß–ï–ù–ê'}")
        
        url = f"{API_URL}/upload-optimization"
        
        payload = {
            "grorderid": grorderid,
            "sheets": optimization_data,
            "adjust_materials": adjust_materials
        }
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Å—Ç–∞—Ö
        print(f"üìã API: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏—Å—Ç–∞—Ö:")
        for i, sheet in enumerate(optimization_data):
            is_remainder = sheet.get('is_remainder', 0)
            goodsid = sheet.get('goodsid')
            print(f"üìã API: –õ–∏—Å—Ç {i+1}: goodsid={goodsid}, is_remainder={is_remainder}")
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–±–µ–∑ XML)
        if optimization_data:
            sample_sheet = optimization_data[0].copy()
            if 'xml_data' in sample_sheet:
                sample_sheet['xml_data'] = f"<XML data, {len(sample_sheet['xml_data'])} chars>"
            print(f"üìã API: –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ª–∏—Å—Ç–∞: {sample_sheet}")
        
        response = requests.post(url, json=payload, timeout=120)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ API: –î–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            return result
        else:
            error_msg = f"HTTP {response.status_code}"
            try:
                error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                error_msg = f"{error_msg}: {error_detail}"
            except:
                pass
            
            print(f"‚ùå API: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {error_msg}")
            return {"success": False, "message": error_msg}
            
    except requests.exceptions.Timeout:
        error_msg = "–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ API —Å–µ—Ä–≤–µ—Ä—É"
        print(f"‚ùå API: {error_msg}")
        return {"success": False, "message": error_msg}
    except requests.exceptions.ConnectionError:
        error_msg = "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API —Å–µ—Ä–≤–µ—Ä—É"
        print(f"‚ùå API: {error_msg}")
        return {"success": False, "message": error_msg}
    except Exception as e:
        error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        print(f"‚ùå API: {error_msg}")
        return {"success": False, "message": error_msg} 