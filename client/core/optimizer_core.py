#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 2D —Ä–∞—Å–∫—Ä–æ—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –í–µ—Ä—Å–∏—è 2.0
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º min_waste_side
"""

import time
import copy
import logging
from dataclasses import dataclass, field
from typing import List, Dict, Optional, Tuple, Callable, Set
from enum import Enum
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RotationMode(Enum):
    """–†–µ–∂–∏–º—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–µ—Ç–∞–ª–µ–π"""
    NONE = "none"           # –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    ALLOW_90 = "allow_90"   # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞
    OPTIMAL = "optimal"     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞–∏–ª—É—á—à–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞

@dataclass
class Detail:
    """–î–µ—Ç–∞–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    id: str
    width: float
    height: float
    material: str
    quantity: int = 1
    can_rotate: bool = True
    priority: int = 0
    oi_name: str = ""
    goodsid: Optional[int] = None  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ goodsid
    
    def __post_init__(self):
        self.area = self.width * self.height
        
    def get_rotated(self) -> 'Detail':
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—É—é –Ω–∞ 90¬∞ –∫–æ–ø–∏—é –¥–µ—Ç–∞–ª–∏"""
        rotated = copy.copy(self)
        rotated.width, rotated.height = self.height, self.width
        return rotated

@dataclass 
class Sheet:
    """–õ–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    id: str
    width: float
    height: float
    material: str
    cost_per_unit: float = 0.0
    is_remainder: bool = False
    remainder_id: Optional[str] = None
    goodsid: Optional[int] = None  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ goodsid
    
    def __post_init__(self):
        self.area = self.width * self.height

@dataclass
class PlacedItem:
    """–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–¥–µ—Ç–∞–ª—å –∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫/–æ—Ç—Ö–æ–¥)"""
    x: float
    y: float
    width: float
    height: float
    item_type: str  # "detail", "remnant", "waste"
    detail: Optional[Detail] = None
    is_rotated: bool = False
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height

@dataclass
class Rectangle:
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å"""
    x: float
    y: float
    width: float
    height: float
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height
        
    def intersects(self, other: 'Rectangle') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º"""
        return not (self.x2 <= other.x or other.x2 <= self.x or 
                   self.y2 <= other.y or other.y2 <= self.y)
                   
    def contains(self, other: 'Rectangle') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥—Ä—É–≥–æ–π"""
        return (self.x <= other.x and self.y <= other.y and
                other.x2 <= self.x2 and other.y2 <= self.y2)

@dataclass
class SheetLayout:
    """–†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ —Å –ü–û–õ–ù–´–ú –ø–æ–∫—Ä—ã—Ç–∏–µ–º"""
    sheet: Sheet
    placed_items: List[PlacedItem] = field(default_factory=list)
    
    def get_placed_details(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"""
        return [item for item in self.placed_items if item.item_type == "detail"]
    
    def get_remnants(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        return [item for item in self.placed_items if item.item_type == "remnant"]
    
    def get_waste(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ö–æ–¥—ã"""
        return [item for item in self.placed_items if item.item_type == "waste"]
    
    @property
    def placed_details(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [PlacedDetail(
            detail=item.detail,
            x=item.x,
            y=item.y,
            width=item.width,
            height=item.height,
            is_rotated=item.is_rotated,
            sheet_id=self.sheet.id
        ) for item in self.get_placed_details()]
    
    @property
    def free_rectangles(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [FreeRectangle(r.x, r.y, r.width, r.height) for r in self.get_remnants()]
    
    @property
    def waste_rectangles(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [FreeRectangle(r.x, r.y, r.width, r.height) for r in self.get_waste()]
    
    @property
    def total_area(self):
        return self.sheet.area
    
    @property
    def used_area(self):
        return sum(item.area for item in self.get_placed_details())
    
    @property
    def remnant_area(self):
        return sum(item.area for item in self.get_remnants())
    
    @property
    def waste_area(self):
        return sum(item.area for item in self.get_waste())
    
    @property
    def efficiency(self):
        effective_used = self.used_area + self.remnant_area
        return (effective_used / self.total_area * 100) if self.total_area > 0 else 0
    
    @property
    def waste_percent(self):
        return (self.waste_area / self.total_area * 100) if self.total_area > 0 else 0
    
    def get_coverage_percent(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –ª–∏—Å—Ç–∞"""
        total_covered = sum(item.area for item in self.placed_items)
        return (total_covered / self.total_area * 100) if self.total_area > 0 else 0
    
    def has_bad_waste(self, min_waste_side: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ö–æ–¥—ã —Å —Å—Ç–æ—Ä–æ–Ω–æ–π –º–µ–Ω—å—à–µ min_waste_side"""
        for waste in self.get_waste():
            if min(waste.width, waste.height) < min_waste_side:
                return True
        return False

# –°—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@dataclass
class PlacedDetail:
    detail: Detail
    x: float
    y: float
    width: float
    height: float
    is_rotated: bool = False
    sheet_id: str = ""
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height

@dataclass
class FreeRectangle:
    x: float
    y: float
    width: float
    height: float
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height

@dataclass
class OptimizationParams:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    min_remnant_width: float = 100.0
    min_remnant_height: float = 100.0
    target_waste_percent: float = 5.0
    remainder_waste_percent: float = 20.0  # –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
    min_waste_side: float = 10.0
    use_warehouse_remnants: bool = True
    rotation_mode: RotationMode = RotationMode.ALLOW_90
    force_adjacent_placement: bool = True
    max_waste_rectangles: int = 10
    cutting_width: float = 3.0
    max_iterations_per_sheet: int = 5  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –ª–∏—Å—Ç–∞

@dataclass
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    success: bool
    layouts: List[SheetLayout]
    unplaced_details: List[Detail]
    total_efficiency: float
    total_waste_percent: float
    total_cost: float
    useful_remnants: List[FreeRectangle]
    optimization_time: float
    message: str = ""
    
    def __post_init__(self):
        self.total_sheets = len(self.layouts)
        self.total_placed_details = sum(len(layout.placed_details) for layout in self.layouts)
        self.sheets = self.layouts  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

class GuillotineOptimizer:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    """
    
    def __init__(self, params: OptimizationParams):
        self.params = params
        self.progress_callback: Optional[Callable[[float], None]] = None

    def set_progress_callback(self, callback: Callable[[float], None]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_callback = callback

    def _report_progress(self, progress: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_callback:
            self.progress_callback(progress)

    def optimize(self, details: List[Detail], sheets: List[Sheet]) -> OptimizationResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        start_time = time.time()
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é v2.1: {len(details)} –¥–µ—Ç–∞–ª–µ–π, {len(sheets)} –ª–∏—Å—Ç–æ–≤")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏
        remainder_sheets = [s for s in sheets if s.is_remainder]
        material_sheets = [s for s in sheets if not s.is_remainder]
        logger.info(f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(remainder_sheets)}, —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(material_sheets)}")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        expanded_details = self._prepare_details(details)
        sorted_sheets = self._prepare_sheets(sheets)
        
        self._report_progress(10.0)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        material_groups = self._group_details_by_material(expanded_details)
        
        self._report_progress(20.0)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        all_layouts = []
        all_unplaced = []
        progress_step = 60.0 / len(material_groups)
        current_progress = 25.0
        
        for material, material_details in material_groups.items():
            logger.info(f"üì¶ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª {material}: {len(material_details)} –¥–µ—Ç–∞–ª–µ–π")
            
            material_sheets = [s for s in sorted_sheets if s.material == material]
            layouts, unplaced = self._optimize_material(material_details, material_sheets)
            
            all_layouts.extend(layouts)
            all_unplaced.extend(unplaced)
            
            current_progress += progress_step
            self._report_progress(current_progress)
        
        self._report_progress(90.0)
        
        # –ù–û–í–´–ô –≠–¢–ê–ü: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        logger.info(f"üîÑ –≠–¢–ê–ü –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø: –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –¥–µ—Ç–∞–ª—è–º–∏")
        
        # –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –≠–¢–ê–ü: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ–±–æ–ª—å—à–∏—Ö –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        logger.info(f"üîÑ –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –≠–¢–ê–ü: –û–±—ä–µ–¥–∏–Ω—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏")
        self._merge_small_remnants(all_layouts)
        
        all_unplaced = self._fill_remnants_with_details(all_layouts, all_unplaced)
        
        self._report_progress(95.0)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = self._calculate_final_result(all_layouts, all_unplaced, start_time)
        
        self._report_progress(100.0)
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.optimization_time:.2f}—Å")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.message}")
        
        return result

    def _prepare_details(self, details: List[Detail]) -> List[Detail]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π"""
        expanded = []
        
        for detail in details:
            for i in range(detail.quantity):
                detail_copy = copy.deepcopy(detail)
                detail_copy.id = f"{detail.id}_{i+1}"
                detail_copy.quantity = 1
                expanded.append(detail_copy)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ –¥–µ—Ç–∞–ª–∏
        expanded.sort(key=lambda d: (-d.area, -d.priority, d.id))
        
        return expanded

    def _prepare_sheets(self, sheets: List[Sheet]) -> List[Sheet]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–æ–≤"""
        # –û—Å—Ç–∞—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–º–∏
        sheets.sort(key=lambda s: (not s.is_remainder, -s.area))
        return sheets

    def _group_details_by_material(self, details: List[Detail]) -> Dict[str, List[Detail]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
        groups = {}
        for detail in details:
            if detail.material not in groups:
                groups[detail.material] = []
            groups[detail.material].append(detail)
        return groups

    def _can_fit_on_remainder(self, details: List[Detail], remainder: Sheet) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—Å—Ç–∏—Ç—Å—è –ª–∏ —Ö–æ—Ç—è –±—ã —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –¥–µ—Ç–∞–ª—å
        largest_detail = max(details, key=lambda d: d.area)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä remainder_waste_percent –∏–∑ GUI
        allowed_usage_percent = 100.0 - self.params.remainder_waste_percent
        return largest_detail.area <= remainder.area * (allowed_usage_percent / 100.0)

    def _optimize_material(self, details: List[Detail], sheets: List[Sheet]) -> Tuple[List[SheetLayout], List[Detail]]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –æ—Å—Ç–∞—Ç–∫–æ–≤"""
        layouts = []
        unplaced_details = details.copy()
        
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –ü–†–ò–û–†–ò–¢–ï–¢ –û–°–¢–ê–¢–ö–û–í: –°–Ω–∞—á–∞–ª–∞ –≤—Å–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ—Ç–æ–º —Ü–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã
        remainder_sheets = [s for s in sheets if s.is_remainder]
        material_sheets = [s for s in sheets if not s.is_remainder]
        
        logger.info(f"üîÑ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –û–°–¢–ê–¢–ö–û–í: {len(unplaced_details)} –¥–µ—Ç–∞–ª–µ–π, "
                   f"{len(remainder_sheets)} –æ—Å—Ç–∞—Ç–∫–æ–≤, {len(material_sheets)} —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤")
        
        # –ü–ï–†–í–´–ô –≠–¢–ê–ü: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        logger.info(f"üéØ –≠–¢–ê–ü 1: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {len(remainder_sheets)} –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–æ—Ç –º–µ–Ω—å—à–∏—Ö –∫ –±–æ–ª—å—à–∏–º)
        sorted_remainders = sorted(remainder_sheets, key=lambda sheet: (
            sheet.area,  # –°–Ω–∞—á–∞–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            sheet.id     # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        ))
        
        for sheet in sorted_remainders:
            if not unplaced_details:
                break
            
            logger.info(f"üéØ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ {sheet.id} ({sheet.width}x{sheet.height})")
            
            # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            best_layout = None
            best_score = float('-inf')
            best_usage_percent = 0.0
            
            for iteration in range(self.params.max_iterations_per_sheet * 5):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤ 5 —Ä–∞–∑
                layout = self._create_sheet_layout_guillotine(sheet, unplaced_details.copy(), iteration)
                
                # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ì–ò–ë–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –î–õ–Ø –û–°–¢–ê–¢–ö–û–í: –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ–∫—Ä—ã—Ç–∏—é
                coverage = layout.get_coverage_percent()
                if coverage < 85.0:  # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å 95% –¥–æ 85%
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–æ—Ö–∏—Ö –æ—Ç—Ö–æ–¥–æ–≤ (–æ—á–µ–Ω—å –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤)
                if layout.has_bad_waste(self.params.min_waste_side * 0.3):  # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ—Ç—Ö–æ–¥–∞–º –µ—â–µ –±–æ–ª—å—à–µ
                    continue
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É —Å –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ú –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
                score = self._evaluate_layout(layout)
                usage_percent = layout.used_area / layout.total_area * 100
                
                # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–´–ô –±–æ–Ω—É—Å –∑–∞ –ª—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
                if usage_percent > 50:
                    score += 5000  # –û–≥—Ä–æ–º–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                elif usage_percent > 30:
                    score += 3000   # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
                elif usage_percent > 15:
                    score += 2000   # –ë–æ–ª—å—à–æ–π –±–æ–Ω—É—Å
                elif usage_percent > 5:  # –ë–æ–Ω—É—Å –¥–∞–∂–µ –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                    score += 1000   # –ë–æ–Ω—É—Å –∑–∞ –ª—é–±–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
                else:
                    score += 500   # –ë–æ–Ω—É—Å –¥–∞–∂–µ –∑–∞ –æ—á–µ–Ω—å –Ω–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
                score += len(layout.get_placed_details()) * 1000  # –û–≥—Ä–æ–º–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å
                
                if score > best_score:
                    best_score = score
                    best_layout = layout
                    best_usage_percent = usage_percent
                
                # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ö–æ—Ç—å –∫–∞–∫–æ–≥–æ-—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if usage_percent > 10:  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –¥–æ 10%
                    logger.info(f"‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞: {usage_percent:.1f}%")
                    break
            
            if best_layout and best_layout.get_placed_details():
                layouts.append(best_layout)
                # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                placed_ids = {item.detail.id for item in best_layout.get_placed_details()}
                unplaced_details = [d for d in unplaced_details if d.id not in placed_ids]
                
                logger.info(f"‚úÖ –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –£–°–ü–ï–®–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ {sheet.id}: "
                           f"{len(best_layout.get_placed_details())} –¥–µ—Ç–∞–ª–µ–π, "
                           f"–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ {best_usage_percent:.1f}%, "
                           f"–æ—Ç—Ö–æ–¥—ã {best_layout.waste_percent:.1f}%")
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–æ–∫ {sheet.id}")
        
        # –í–¢–û–†–û–ô –≠–¢–ê–ü: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –¥–µ—Ç–∞–ª–∏
        if unplaced_details:
            logger.info(f"üéØ –≠–¢–ê–ü 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(material_sheets)} —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è {len(unplaced_details)} –¥–µ—Ç–∞–ª–µ–π")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–ª—å–Ω—ã–µ –ª–∏—Å—Ç—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–∞–ª—ã–º)
            sorted_material_sheets = sorted(material_sheets, key=lambda sheet: (
                -sheet.area,  # –°–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ –ª–∏—Å—Ç—ã
                sheet.id      # –î–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            ))
            
            for sheet in sorted_material_sheets:
                if not unplaced_details:
                    break
                
                logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç {sheet.id} ({sheet.width}x{sheet.height})")
                
                best_layout = None
                best_score = float('-inf')
                
                for iteration in range(self.params.max_iterations_per_sheet):
                    layout = self._create_sheet_layout_guillotine(sheet, unplaced_details.copy(), iteration)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
                    coverage = layout.get_coverage_percent()
                    if coverage < 99.9:
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–æ—Ö–∏—Ö –æ—Ç—Ö–æ–¥–æ–≤
                    if layout.has_bad_waste(self.params.min_waste_side):
                        continue
                    
                    # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É
                    score = self._evaluate_layout(layout)
                    
                    if score > best_score:
                        best_score = score
                        best_layout = layout
                
                if best_layout and best_layout.get_placed_details():
                    layouts.append(best_layout)
                    # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                    placed_ids = {item.detail.id for item in best_layout.get_placed_details()}
                    unplaced_details = [d for d in unplaced_details if d.id not in placed_ids]
                    
                    logger.info(f"‚úÖ –£–°–ü–ï–®–ù–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ü–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç {sheet.id}: "
                               f"{len(best_layout.get_placed_details())} –¥–µ—Ç–∞–ª–µ–π, "
                               f"–æ—Ç—Ö–æ–¥—ã {best_layout.waste_percent:.1f}%")
        
        return layouts, unplaced_details

    def _create_sheet_layout_guillotine(self, sheet: Sheet, details: List[Detail], iteration: int) -> SheetLayout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –º–µ—Ç–æ–¥–æ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è —Å –ì–ê–†–ê–ù–¢–ò–ï–ô 100% –ø–æ–∫—Ä—ã—Ç–∏—è"""
        layout = SheetLayout(sheet=sheet)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        free_areas = [Rectangle(0, 0, sheet.width, sheet.height)]
        
        # –í–∞—Ä—å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–µ—Ç–∞–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if iteration > 0:
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.seed(42 + iteration)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            details = details.copy()
            random.shuffle(details)
        
        placed_detail_ids = set()
        
        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª–∏
        while details and free_areas:
            best_placement = None
            best_score = float('inf')
            best_area_idx = -1
            
            for area_idx, area in enumerate(free_areas):
                for detail in details:
                    if detail.id in placed_detail_ids:
                        continue
                    
                    # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
                    orientations = [(detail.width, detail.height, False)]
                    if self.params.rotation_mode != RotationMode.NONE and detail.can_rotate:
                        orientations.append((detail.height, detail.width, True))
                    
                    for width, height, is_rotated in orientations:
                        if area.width >= width and area.height >= height:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–µ–∑ —Å–æ–∑–¥–∞—Å—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                            if self._is_valid_guillotine_cut(area, width, height):
                                score = self._calculate_guillotine_score(area, width, height, is_rotated, sheet)
                                if score < best_score:
                                    best_score = score
                                    best_placement = (detail, width, height, is_rotated, area)
                                    best_area_idx = area_idx
            
            if not best_placement:
                break
            
            # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
            detail, width, height, is_rotated, area = best_placement
            
            placed_item = PlacedItem(
                x=area.x,
                y=area.y,
                width=width,
                height=height,
                item_type="detail",
                detail=detail,
                is_rotated=is_rotated
            )
            layout.placed_items.append(placed_item)
            placed_detail_ids.add(detail.id)
            details.remove(detail)
            
            # –î–µ–ª–∞–µ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
            new_areas = self._guillotine_cut(area, width, height)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–æ–≤—ã–º–∏
            free_areas[best_area_idx:best_area_idx+1] = new_areas
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏
        self._fill_remaining_areas(layout, free_areas)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage = layout.get_coverage_percent()
        if coverage < 99.9:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ —Ç–æ–ª—å–∫–æ {coverage:.1f}%!")
        
        return layout

    def _is_valid_guillotine_cut(self, area: Rectangle, detail_width: float, detail_height: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞—Å—Ç –ª–∏ –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        # –û—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
        remainder_right = area.width - detail_width
        remainder_top = area.height - detail_height
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –Ω–æ –Ω–µ –Ω—É–ª–µ–≤–æ–π - —ç—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ
        if 0 < remainder_right < self.params.min_waste_side:
            return False
        if 0 < remainder_top < self.params.min_waste_side:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
        if remainder_right > 0 and remainder_top > 0:
            # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ L-–æ–±—Ä–∞–∑–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ —á–∞—Å—Ç–∏
            if detail_height < self.params.min_waste_side:
                return False
            if remainder_top < self.params.min_waste_side:
                return False
        
        return True

    def _calculate_guillotine_score(self, area: Rectangle, width: float, height: float, is_rotated: bool = False, sheet: Sheet = None) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–ª—è –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç –æ—Å—Ç–∞—Ç–∫–∏
        waste = area.area - (width * height)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º
        if abs(area.width - width) < 0.1 or abs(area.height - height) < 0.1:
            waste *= 0.5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤–æ—Ä–æ—Ç –¥–µ—Ç–∞–ª–∏ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é)
        if is_rotated:
            waste *= 1.2
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–æ—â—Ä–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
        if sheet and sheet.is_remainder:
            # –î–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤: –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            waste *= 0.001  # –ï—â–µ –±–æ–ª—å—à–µ —Å–Ω–∏–∂–∞–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Ö–æ–¥—ã –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∞—Ö
            logger.debug(f"üîß –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ: —à—Ç—Ä–∞—Ñ —Å–Ω–∏–∂–µ–Ω —Å {waste/0.001:.1f} –¥–æ {waste:.1f}")
        elif sheet and not sheet.is_remainder:
            # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: –£–ú–ï–†–ï–ù–ù–´–ô —à—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            remaining_width = area.width - width
            remaining_height = area.height - height
            
            # –£–ú–ï–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ú–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            min_remnant_width = self.params.min_remnant_width * 1.5  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            min_remnant_height = self.params.min_remnant_height * 1.5
            min_remnant_area = min_remnant_width * min_remnant_height * 2.0  # –°–Ω–∏–∂–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            
            # –ï—Å–ª–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –£–ú–ï–†–ï–ù–ù–´–ô —à—Ç—Ä–∞—Ñ
            if ((remaining_width >= min_remnant_width and remaining_width > 0) or \
                (remaining_height >= min_remnant_height and remaining_height > 0)) and \
               (remaining_width * remaining_height >= min_remnant_area):
                waste *= 2.0  # –£–º–µ—Ä–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                logger.debug(f"üîß –£–º–µ—Ä–µ–Ω–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {remaining_width:.0f}x{remaining_height:.0f}")
            elif (remaining_width >= self.params.min_remnant_width and remaining_width > 0) or \
                 (remaining_height >= self.params.min_remnant_height and remaining_height > 0):
                waste *= 1.5  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                logger.debug(f"üîß –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –∑–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏: {remaining_width:.0f}x{remaining_height:.0f}")
        
        return waste

    def _guillotine_cut(self, area: Rectangle, used_width: float, used_height: float) -> List[Rectangle]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –æ–±–ª–∞—Å—Ç–∏"""
        new_areas = []
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if area.width > used_width:
            right_area = Rectangle(
                area.x + used_width,
                area.y,
                area.width - used_width,
                used_height
            )
            if right_area.width >= self.params.min_waste_side and right_area.height >= self.params.min_waste_side:
                new_areas.append(right_area)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
        if area.height > used_height:
            top_area = Rectangle(
                area.x,
                area.y + used_height,
                area.width,
                area.height - used_height
            )
            if top_area.width >= self.params.min_waste_side and top_area.height >= self.params.min_waste_side:
                new_areas.append(top_area)
        
        return new_areas

    def _fill_remaining_areas(self, layout: SheetLayout, free_areas: List[Rectangle]):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –æ—Å—Ç–∞—Ç–∫–∏ –∏–ª–∏ –æ—Ç—Ö–æ–¥—ã —Å –ü–†–ê–í–ò–õ–¨–ù–û–ô –ª–æ–≥–∏–∫–æ–π"""
        print(f"üîß OPTIMIZER: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(free_areas)}")
        
        for i, area in enumerate(free_areas):
            # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
            min_side = min(area.width, area.height)
            max_side = max(area.width, area.height)
            param_min = min(self.params.min_remnant_width, self.params.min_remnant_height)
            param_max = max(self.params.min_remnant_width, self.params.min_remnant_height)
            
            # –ü–†–û–°–¢–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ –º–µ–Ω—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚â• –º–µ–Ω—å—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ò –±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚â• –±–æ–ª—å—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            if min_side >= param_min and max_side >= param_max:
                item_type = "remnant"
                print(f"üîß OPTIMIZER: –û–±–ª–∞—Å—Ç—å {i+1}: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (min_side={min_side:.0f}‚â•{param_min:.0f}, max_side={max_side:.0f}‚â•{param_max:.0f})")
            else:
                item_type = "waste"
                print(f"üîß OPTIMIZER: –û–±–ª–∞—Å—Ç—å {i+1}: {area.width:.0f}x{area.height:.0f} - –û–¢–•–û–î (min_side={min_side:.0f}<{param_min:.0f} –∏–ª–∏ max_side={max_side:.0f}<{param_max:.0f})")
            
            placed_item = PlacedItem(
                x=area.x,
                y=area.y,
                width=area.width,
                height=area.height,
                item_type=item_type,
                detail=None,
                is_rotated=False
            )
            layout.placed_items.append(placed_item)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        remnants_count = len([item for item in layout.placed_items if item.item_type == "remnant"])
        waste_count = len([item for item in layout.placed_items if item.item_type == "waste"])
        print(f"üîß OPTIMIZER: –ò—Ç–æ–≥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –î–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {remnants_count}, –û—Ç—Ö–æ–¥–æ–≤: {waste_count}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ
        total_area_covered = sum(item.area for item in layout.placed_items)
        sheet_area = layout.sheet.area
        
        if abs(total_area_covered - sheet_area) > 0.1:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–∫—Ä—ã—Ç–æ {total_area_covered:.1f} –∏–∑ {sheet_area:.1f} –º–º¬≤")
            
            # –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            self._emergency_fill_gaps(layout)

    def _emergency_fill_gaps(self, layout: SheetLayout):
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–Ω—è—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        sheet_width = layout.sheet.width
        sheet_height = layout.sheet.height
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        gaps = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —Ç–æ—á–µ–∫
        step = self.params.min_waste_side
        for x in range(0, int(sheet_width), int(step)):
            for y in range(0, int(sheet_height), int(step)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—Ä—ã—Ç–∞ –ª–∏ —ç—Ç–∞ —Ç–æ—á–∫–∞
                covered = False
                for item in layout.placed_items:
                    if item.x <= x < item.x2 and item.y <= y < item.y2:
                        covered = True
                        break
                
                if not covered:
                    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –Ω–µ–ø–æ–∫—Ä—ã—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                    max_width = sheet_width - x
                    max_height = sheet_height - y
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                    for item in layout.placed_items:
                        if item.x > x and item.y <= y < item.y2:
                            max_width = min(max_width, item.x - x)
                        if item.y > y and item.x <= x < item.x2:
                            max_height = min(max_height, item.y - y)
                    
                    if max_width > 0 and max_height > 0:
                        gap = Rectangle(x, y, max_width, max_height)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å
                        is_duplicate = False
                        for existing_gap in gaps:
                            if existing_gap.contains(gap):
                                is_duplicate = True
                                break
                        
                        if not is_duplicate:
                            gaps.append(gap)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç—Ö–æ–¥
                            placed_item = PlacedItem(
                                x=gap.x,
                                y=gap.y,
                                width=gap.width,
                                height=gap.height,
                                item_type="waste",
                                detail=None,
                                is_rotated=False
                            )
                            layout.placed_items.append(placed_item)
                            
                            logger.warning(f"‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫: {gap.x:.0f},{gap.y:.0f} {gap.width:.0f}x{gap.height:.0f}")

    def _get_allowed_waste_percent(self, sheet: Sheet) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ª–∏—Å—Ç–∞"""
        if sheet.is_remainder:
            return self.params.remainder_waste_percent
        else:
            return self.params.target_waste_percent

    def _evaluate_layout(self, layout: SheetLayout) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:
        # 1. –ú–∏–Ω–∏–º—É–º –æ—Ç—Ö–æ–¥–æ–≤ (–≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        # 2. –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –Ω–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)
        # 3. –ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        
        score = 0.0
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç—Ö–æ–¥–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
        allowed_waste_percent = self._get_allowed_waste_percent(layout.sheet)
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Ö–æ–¥—ã (—É—á–∏—Ç—ã–≤–∞–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ª–∏—Å—Ç–∞)
        waste_penalty = max(0, layout.waste_percent - allowed_waste_percent) * 100
        score -= waste_penalty
        
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        remnants = layout.get_remnants()
        remnant_count = len(remnants)
        remnant_area_percent = layout.remnant_area / layout.total_area * 100
        
        # –ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
        if layout.sheet.is_remainder:
            # –î–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤: –£–ú–ï–†–ï–ù–ù–´–ô –±–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            usage_percent = layout.used_area / layout.total_area * 100
            score += usage_percent * 100  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            if usage_percent > 80:
                score += 2000  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            elif usage_percent > 60:
                score += 1000  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            elif usage_percent > 40:
                score += 500   # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            
            # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
            score += len(layout.get_placed_details()) * 200  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
            
            # –ë–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            score += 3000  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å
        else:
            # –î–ª—è —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: –ë–ê–õ–ê–ù–°–ò–†–û–í–ê–ù–ù–´–ô –ø–æ–¥—Ö–æ–¥ –∫ –¥–µ–ª–æ–≤—ã–º –æ—Å—Ç–∞—Ç–∫–∞–º
            if remnant_area_percent > 8.0:  # –ë–æ–ª—å—à–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ - —à—Ç—Ä–∞—Ñ
                score -= remnant_area_percent * 150  # –°–∏–ª—å–Ω—ã–π —à—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
            elif remnant_area_percent > 3.0:  # –°—Ä–µ–¥–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ - –Ω–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
                score -= remnant_area_percent * 50   # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
            elif remnant_area_percent > 1.0:  # –ú–∞–ª–µ–Ω—å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ - –±–æ–Ω—É—Å
                score += 50   # –ë–æ–Ω—É—Å –∑–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ (–º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å)
            else:
                score += 200  # –ë–æ–Ω—É—Å –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        score += len(layout.get_placed_details()) * 10
        
        # –û–ì–†–û–ú–ù–´–ô –±–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ (–µ—Å–ª–∏ —ç—Ç–æ –æ—Å—Ç–∞—Ç–æ–∫)
        if layout.sheet.is_remainder:
            score += 10000  # –û–≥—Ä–æ–º–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
            utilization = layout.used_area / layout.total_area
            score += utilization * 5000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞
            # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
            score += len(layout.get_placed_details()) * 2000  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–æ–Ω—É—Å –∑–∞ –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ª—é–±—É—é –¥–µ—Ç–∞–ª—å –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
            if len(layout.get_placed_details()) > 0:
                score += 5000  # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ, —á—Ç–æ –≤–æ–æ–±—â–µ —á—Ç–æ-—Ç–æ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –Ω–∞ –æ—Å—Ç–∞—Ç–∫–µ
        
        # –ù–û–í–´–ô –ë–û–ù–£–°: –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        for remnant in remnants:
            # –ë–æ–Ω—É—Å –∑–∞ –æ—Å—Ç–∞—Ç–∫–∏ —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
            aspect_ratio = max(remnant.width, remnant.height) / min(remnant.width, remnant.height)
            if 1.0 <= aspect_ratio <= 3.0:  # –•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                score += 10
        
        return score

    def _fill_remnants_with_details(self, layouts: List[SheetLayout], unplaced_details: List[Detail]) -> List[Detail]:
        """–ê–ì–†–ï–°–°–ò–í–ù–´–ô –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –¥–µ—Ç–∞–ª—è–º–∏ —Å —Ü–∏–∫–ª–æ–º"""
        if not unplaced_details:
            logger.info("üì¶ –ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤")
            return unplaced_details
        
        logger.info(f"üîÑ –ê–ì–†–ï–°–°–ò–í–ù–û –∑–∞–ø–æ–ª–Ω—è–µ–º {len(unplaced_details)} –¥–µ—Ç–∞–ª–µ–π –≤ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏")
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        all_remnants = []
        for layout in layouts:
            for remnant in layout.get_remnants():
                all_remnants.append({
                    'layout': layout,
                    'remnant': remnant,
                    'area': remnant.area,
                    'width': remnant.width,
                    'height': remnant.height
                })
        
        if not all_remnants:
            logger.info("üì¶ –ù–µ—Ç –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
            return unplaced_details
        
        logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ {len(all_remnants)} –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º) –¥–ª—è –ª—É—á—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        all_remnants.sort(key=lambda r: -r['area'])
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º)
        sorted_details = sorted(unplaced_details, key=lambda d: -d.area)
        
        remaining_details = sorted_details.copy()
        placed_count = 0
        total_iterations = 0
        max_iterations = 20  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º –∏—Ç–µ—Ä–∞—Ü–∏–π —Å 10 –¥–æ 20
        
        # –ê–ì–†–ï–°–°–ò–í–ù–´–ô –¶–ò–ö–õ: –ú–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º
        while remaining_details and total_iterations < max_iterations:
            iteration_placed = 0
            total_iterations += 1
            
            logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {total_iterations}: –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å {len(remaining_details)} –¥–µ—Ç–∞–ª–µ–π")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–æ–Ω–∏ –º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π)
            all_remnants = []
            for layout in layouts:
                for remnant in layout.get_remnants():
                    all_remnants.append({
                        'layout': layout,
                        'remnant': remnant,
                        'area': remnant.area,
                        'width': remnant.width,
                        'height': remnant.height
                    })
            
            if not all_remnants:
                logger.info("üì¶ –ë–æ–ª—å—à–µ –Ω–µ—Ç –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                break
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º)
            all_remnants.sort(key=lambda r: -r['area'])
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å
            details_to_remove = []
            
            for detail in remaining_details:
                placed = False
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å –≤ –æ—Å—Ç–∞—Ç–∫–∞—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏ –æ—Ç –º–µ–Ω–µ–µ –∫ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º
                for remnant_info in all_remnants:
                    remnant = remnant_info['remnant']
                    layout = remnant_info['layout']
                    
                    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–µ –∫ –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º
                    if self._can_place_detail_in_remnant_aggressive(detail, remnant, layout):
                        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
                        self._place_detail_in_remnant(detail, remnant, layout)
                        placed = True
                        placed_count += 1
                        iteration_placed += 1
                        details_to_remove.append(detail)
                        logger.info(f"‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–û —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –¥–µ—Ç–∞–ª—å {detail.id} ({detail.width:.0f}x{detail.height:.0f}) –≤ –æ—Å—Ç–∞—Ç–∫–µ {remnant.width:.0f}x{remnant.height:.0f}")
                        break
                    
                    # –ï—Å–ª–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—É—é
                    elif self._can_place_detail_in_remnant_very_aggressive(detail, remnant, layout):
                        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
                        self._place_detail_in_remnant(detail, remnant, layout)
                        placed = True
                        placed_count += 1
                        iteration_placed += 1
                        details_to_remove.append(detail)
                        logger.info(f"‚úÖ –û–ß–ï–ù–¨ –ê–ì–†–ï–°–°–ò–í–ù–û —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –¥–µ—Ç–∞–ª—å {detail.id} ({detail.width:.0f}x{detail.height:.0f}) –≤ –æ—Å—Ç–∞—Ç–∫–µ {remnant.width:.0f}x{remnant.height:.0f}")
                        break
                    
                    # –ï—Å–ª–∏ –æ—á–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é
                    elif self._can_place_detail_in_remnant_extreme(detail, remnant, layout):
                        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
                        self._place_detail_in_remnant(detail, remnant, layout)
                        placed = True
                        placed_count += 1
                        iteration_placed += 1
                        details_to_remove.append(detail)
                        logger.info(f"‚úÖ –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –¥–µ—Ç–∞–ª—å {detail.id} ({detail.width:.0f}x{detail.height:.0f}) –≤ –æ—Å—Ç–∞—Ç–∫–µ {remnant.width:.0f}x{remnant.height:.0f}")
                        break
                    
                    # –ï—Å–ª–∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —É–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—É—é
                    elif self._can_place_detail_in_remnant_ultra_extreme(detail, remnant, layout):
                        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
                        self._place_detail_in_remnant(detail, remnant, layout)
                        placed = True
                        placed_count += 1
                        iteration_placed += 1
                        details_to_remove.append(detail)
                        logger.info(f"‚úÖ –£–õ–¨–¢–†–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –¥–µ—Ç–∞–ª—å {detail.id} ({detail.width:.0f}x{detail.height:.0f}) –≤ –æ—Å—Ç–∞—Ç–∫–µ {remnant.width:.0f}x{remnant.height:.0f}")
                        break
                    
                    # –ï—Å–ª–∏ —É–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º —É–º–µ—Ä–µ–Ω–Ω—É—é (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                    elif self._can_place_detail_in_remnant_moderate(detail, remnant, layout):
                        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
                        self._place_detail_in_remnant(detail, remnant, layout)
                        placed = True
                        placed_count += 1
                        iteration_placed += 1
                        details_to_remove.append(detail)
                        logger.info(f"‚úÖ –£–ú–ï–†–ï–ù–ù–û —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ –¥–µ—Ç–∞–ª—å {detail.id} ({detail.width:.0f}x{detail.height:.0f}) –≤ –æ—Å—Ç–∞—Ç–∫–µ {remnant.width:.0f}x{remnant.height:.0f}")
                        break
            
            # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
            for detail in details_to_remove:
                remaining_details.remove(detail)
            
            logger.info(f"üìä –ò—Ç–µ—Ä–∞—Ü–∏—è {total_iterations}: —Ä–∞–∑–º–µ—â–µ–Ω–æ {iteration_placed} –¥–µ—Ç–∞–ª–µ–π, –æ—Å—Ç–∞–ª–æ—Å—å {len(remaining_details)}")
            
            # –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª
            if iteration_placed == 0:
                logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {total_iterations}: –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º —Ü–∏–∫–ª")
                break
        
        logger.info(f"üìä –ê–ì–†–ï–°–°–ò–í–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: —Ä–∞–∑–º–µ—â–µ–Ω–æ {placed_count} –¥–µ—Ç–∞–ª–µ–π –∑–∞ {total_iterations} –∏—Ç–µ—Ä–∞—Ü–∏–π, –æ—Å—Ç–∞–ª–æ—Å—å {len(remaining_details)}")
        
        return remaining_details

    def _can_place_detail_in_remnant_moderate(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–£–º–µ—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        # –£–ú–ï–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫
        tolerance = 5.0  # –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫ –≤ –º–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if (detail.width <= remnant.width + tolerance and detail.height <= remnant.height + tolerance):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –Ω–µ–±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if detail.can_rotate and (detail.height <= remnant.width + tolerance and detail.width <= remnant.height + tolerance):
            return True
        
        return False

    def _can_place_detail_in_remnant_aggressive(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        # –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
        tolerance = 10.0  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –¥–æ–ø—É—Å–∫ –≤ –º–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –¥–æ–ø—É—Å–∫–æ–º
        if (detail.width <= remnant.width + tolerance and detail.height <= remnant.height + tolerance):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –¥–æ–ø—É—Å–∫–æ–º
        if detail.can_rotate and (detail.height <= remnant.width + tolerance and detail.width <= remnant.height + tolerance):
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏, –Ω–æ –±–æ–ª—å—à–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        detail_area = detail.width * detail.height
        remnant_area = remnant.width * remnant.height
        
        if detail_area <= remnant_area * 0.9:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 90% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ "–≤—Ç–∏—Å–Ω—É—Ç—å" –¥–µ—Ç–∞–ª—å
            if (detail.width <= remnant.width * 1.1 and detail.height <= remnant.height * 1.1):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 1.1 and detail.width <= remnant.height * 1.1):
                return True
        
        return False

    def _can_place_detail_in_remnant_very_aggressive(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–û–ß–ï–ù–¨ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        # –û–ß–ï–ù–¨ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–µ
        tolerance = 25.0  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–π –¥–æ–ø—É—Å–∫ –≤ –º–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if (detail.width <= remnant.width + tolerance and detail.height <= remnant.height + tolerance):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
        if detail.can_rotate and (detail.height <= remnant.width + tolerance and detail.width <= remnant.height + tolerance):
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏, –Ω–æ –±–æ–ª—å—à–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        detail_area = detail.width * detail.height
        remnant_area = remnant.width * remnant.height
        
        if detail_area <= remnant_area * 0.85:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 85% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ "–≤—Ç–∏—Å–Ω—É—Ç—å" –¥–µ—Ç–∞–ª—å —Å –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 1.3 and detail.height <= remnant.height * 1.3):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 1.3 and detail.width <= remnant.height * 1.3):
                return True
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏
        if detail_area <= remnant_area * 0.7:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 70% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 1.5 and detail.height <= remnant.height * 1.5):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 1.5 and detail.width <= remnant.height * 1.5):
                return True
        
        return False

    def _can_place_detail_in_remnant_extreme(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        # –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
        tolerance = 40.0  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å–∫ –≤ –º–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
        if (detail.width <= remnant.width + tolerance and detail.height <= remnant.height + tolerance):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
        if detail.can_rotate and (detail.height <= remnant.width + tolerance and detail.width <= remnant.height + tolerance):
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏, –Ω–æ –±–æ–ª—å—à–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        detail_area = detail.width * detail.height
        remnant_area = remnant.width * remnant.height
        
        if detail_area <= remnant_area * 0.8:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 80% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ "–≤—Ç–∏—Å–Ω—É—Ç—å" –¥–µ—Ç–∞–ª—å —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 1.6 and detail.height <= remnant.height * 1.6):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 1.6 and detail.width <= remnant.height * 1.6):
                return True
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏
        if detail_area <= remnant_area * 0.6:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 60% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 2.0 and detail.height <= remnant.height * 2.0):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 2.0 and detail.width <= remnant.height * 2.0):
                return True
        
        return False

    def _can_place_detail_in_remnant_ultra_extreme(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–£–õ–¨–¢–†–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–û –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        # –£–õ–¨–¢–†–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –Ω–∞–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ
        tolerance = 60.0  # –£–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å–∫ –≤ –º–º
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å —É–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
        if (detail.width <= remnant.width + tolerance and detail.height <= remnant.height + tolerance):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º –∏ —É–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
        if detail.can_rotate and (detail.height <= remnant.width + tolerance and detail.width <= remnant.height + tolerance):
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏, –Ω–æ –±–æ–ª—å—à–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
        detail_area = detail.width * detail.height
        remnant_area = remnant.width * remnant.height
        
        if detail_area <= remnant_area * 0.7:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 70% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ "–≤—Ç–∏—Å–Ω—É—Ç—å" –¥–µ—Ç–∞–ª—å —Å —É–ª—å—Ç—Ä–∞ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 2.0 and detail.height <= remnant.height * 2.0):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 2.0 and detail.width <= remnant.height * 2.0):
                return True
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–Ω—å—à–µ –ø–æ –ø–ª–æ—â–∞–¥–∏
        if detail_area <= remnant_area * 0.5:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 50% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–∞–∂–µ —Å –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 2.5 and detail.height <= remnant.height * 2.5):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 2.5 and detail.width <= remnant.height * 2.5):
                return True
        
        # –£–õ–¨–¢–†–ê –≠–ö–°–¢–†–ï–ú–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –¥–µ—Ç–∞–ª—å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏
        if detail_area <= remnant_area * 0.3:  # –î–µ—Ç–∞–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 30% –ø–ª–æ—â–∞–¥–∏ –æ—Å—Ç–∞—Ç–∫–∞
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å –ª—é–±—ã–º –¥–æ–ø—É—Å–∫–æ–º
            if (detail.width <= remnant.width * 3.0 and detail.height <= remnant.height * 3.0):
                return True
            if detail.can_rotate and (detail.height <= remnant.width * 3.0 and detail.width <= remnant.height * 3.0):
                return True
        
        return False

    def _can_place_detail_in_remnant(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª—å –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if detail.width <= remnant.width and detail.height <= remnant.height:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
        if detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height:
            return True
        
        return False

    def _merge_small_remnants(self, layouts: List[SheetLayout]):
        """–ê–ì–†–ï–°–°–ò–í–ù–û –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ"""
        total_merged = 0
        
        for layout in layouts:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ –ª–∏—Å—Ç–µ
            remnants = layout.get_remnants()
            
            if len(remnants) < 2:
                continue  # –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            
            logger.info(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(remnants)} –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ {layout.sheet.id}")
            
            # –ú–ù–û–ì–û–ö–†–ê–¢–ù–û–ï –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ä–µ–¥–∏–Ω—è—Ç—å, –ø–æ–∫–∞ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            max_iterations = 10  # –ú–∞–∫—Å–∏–º—É–º 10 –∏—Ç–µ—Ä–∞—Ü–∏–π –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
            iteration = 0
            
            while iteration < max_iterations:
                iteration += 1
                merged_in_iteration = 0
                
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞—Ç–∫–æ–≤ (–º–æ–≥–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å—Å—è)
                current_remnants = layout.get_remnants()
                
                if len(current_remnants) < 2:
                    break  # –ë–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å
                
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–µ–Ω—å—à–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è)
                sorted_remnants = sorted(current_remnants, key=lambda r: -r.area)
                
                # –ò—â–µ–º –ø–∞—Ä—ã –æ—Å—Ç–∞—Ç–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å
                merged_this_iteration = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–æ–≤
                
                for i, remnant1 in enumerate(sorted_remnants):
                    if i in merged_this_iteration:
                        continue
                    
                    best_merge = None
                    best_score = 0
                    
                    # –ò—â–µ–º –ª—É—á—à–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                    for j, remnant2 in enumerate(sorted_remnants):
                        if j in merged_this_iteration or remnant1 == remnant2:
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —ç—Ç–∏ –æ—Å—Ç–∞—Ç–∫–∏
                        if self._can_merge_remnants(remnant1, remnant2):
                            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
                            merged_width = max(remnant1.x2, remnant2.x2) - min(remnant1.x, remnant2.x)
                            merged_height = max(remnant1.y2, remnant2.y2) - min(remnant1.y, remnant2.y)
                            merged_area = merged_width * merged_height
                            
                            # –û—Ü–µ–Ω–∫–∞: –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ö–æ—Ä–æ—à–∏–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏
                            aspect_ratio = max(merged_width, merged_height) / min(merged_width, merged_height)
                            score = merged_area * (1.0 / aspect_ratio)  # –ë–æ–ª—å—à–µ –ø–ª–æ—â–∞–¥—å, –ª—É—á—à–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                            
                            if score > best_score:
                                best_score = score
                                best_merge = (remnant1, remnant2)
                    
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª—É—á—à–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
                    if best_merge:
                        remnant1, remnant2 = best_merge
                        
                        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                        merged_remnant = self._merge_remnants(remnant1, remnant2, layout)
                        
                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π
                        layout.placed_items.remove(remnant1)
                        layout.placed_items.remove(remnant2)
                        layout.placed_items.append(merged_remnant)
                        
                        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                        remnant1_index = sorted_remnants.index(remnant1)
                        remnant2_index = sorted_remnants.index(remnant2)
                        
                        merged_this_iteration.add(remnant1_index)
                        merged_this_iteration.add(remnant2_index)
                        merged_in_iteration += 1
                        
                        logger.info(f"üîß –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: –û–±—ä–µ–¥–∏–Ω–∏–ª–∏ –æ—Å—Ç–∞—Ç–∫–∏ {remnant1.width:.0f}x{remnant1.height:.0f} –∏ {remnant2.width:.0f}x{remnant2.height:.0f} –≤ {merged_remnant.width:.0f}x{merged_remnant.height:.0f}")
                
                total_merged += merged_in_iteration
                
                if merged_in_iteration == 0:
                    break  # –ë–æ–ª—å—à–µ –Ω–µ—á–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω—è—Ç—å
                
                logger.info(f"üîß –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration}: –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {merged_in_iteration} –ø–∞—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤")
        
        logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ {total_merged} –ø–∞—Ä –æ—Å—Ç–∞—Ç–∫–æ–≤")

    def _can_merge_remnants(self, remnant1: PlacedItem, remnant2: PlacedItem) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –¥–≤–∞ –æ—Å—Ç–∞—Ç–∫–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–µ
        if not self._are_remnants_adjacent(remnant1, remnant2):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∏–º
        merged_width = max(remnant1.x2, remnant2.x2) - min(remnant1.x, remnant2.x)
        merged_height = max(remnant1.y2, remnant2.y2) - min(remnant1.y, remnant2.y)
        
        min_side = min(merged_width, merged_height)
        max_side = max(merged_width, merged_height)
        
        # –ü–†–û–°–¢–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ –º–µ–Ω—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚â• –º–µ–Ω—å—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ò –±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ ‚â• –±–æ–ª—å—à–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        param_min = min(self.params.min_remnant_width, self.params.min_remnant_height)
        param_max = max(self.params.min_remnant_width, self.params.min_remnant_height)
        
        return (min_side >= param_min and max_side >= param_max)

    def _are_remnants_adjacent(self, remnant1: PlacedItem, remnant2: PlacedItem) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ—Å—Ç–∞—Ç–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ
        if (abs(remnant1.y - remnant2.y) < 1.0 and 
            (abs(remnant1.x2 - remnant2.x) < 1.0 or abs(remnant2.x2 - remnant1.x) < 1.0)):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å–µ–¥—Å—Ç–≤–æ
        if (abs(remnant1.x - remnant2.x) < 1.0 and 
            (abs(remnant1.y2 - remnant2.y) < 1.0 or abs(remnant2.y2 - remnant1.y) < 1.0)):
            return True
        
        return False

    def _merge_remnants(self, remnant1: PlacedItem, remnant2: PlacedItem, layout: SheetLayout) -> PlacedItem:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–≤–∞ –æ—Å—Ç–∞—Ç–∫–∞ –≤ –æ–¥–∏–Ω"""
        # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –æ—Å—Ç–∞—Ç–∫–∞
        min_x = min(remnant1.x, remnant2.x)
        min_y = min(remnant1.y, remnant2.y)
        max_x = max(remnant1.x2, remnant2.x2)
        max_y = max(remnant1.y2, remnant2.y2)
        
        width = max_x - min_x
        height = max_y - min_y
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
        merged_remnant = PlacedItem(
            x=min_x,
            y=min_y,
            width=width,
            height=height,
            item_type="remnant",
            detail=None,
            is_rotated=False
        )
        
        return merged_remnant

    def _place_detail_in_remnant(self, detail: Detail, remnant: PlacedItem, layout: SheetLayout):
        """–†–∞–∑–º–µ—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å –≤ –æ—Å—Ç–∞—Ç–∫–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å —É—á–µ—Ç–æ–º –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        is_rotated = False
        width = detail.width
        height = detail.height
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        normal_fits = detail.width <= remnant.width and detail.height <= remnant.height
        rotated_fits = detail.can_rotate and detail.height <= remnant.width and detail.width <= remnant.height
        
        if normal_fits and rotated_fits:
            # –û–±–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ–¥—Ö–æ–¥—è—Ç, –≤—ã–±–∏—Ä–∞–µ–º —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
            normal_waste = (remnant.width - detail.width) * (remnant.height - detail.height)
            rotated_waste = (remnant.width - detail.height) * (remnant.height - detail.width)
            
            if rotated_waste < normal_waste:
                is_rotated = True
                width, height = detail.height, detail.width
        elif rotated_fits:
            # –¢–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç
            is_rotated = True
            width, height = detail.height, detail.width
        elif not normal_fits:
            # –ù–∏ –æ–¥–Ω–∞ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω–æ, –Ω–æ –º—ã –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ
            # –í—ã–±–∏—Ä–∞–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ–º
            normal_overflow = max(0, detail.width - remnant.width) + max(0, detail.height - remnant.height)
            rotated_overflow = max(0, detail.height - remnant.width) + max(0, detail.width - remnant.height)
            
            if detail.can_rotate and rotated_overflow < normal_overflow:
                is_rotated = True
                width, height = detail.height, detail.width
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—É—é –¥–µ—Ç–∞–ª—å
        placed_detail = PlacedItem(
            x=remnant.x,
            y=remnant.y,
            width=width,
            height=height,
            item_type="detail",
            detail=detail,
            is_rotated=is_rotated
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ä–∞—Å–∫–ª–∞–¥–∫—É
        layout.placed_items.append(placed_detail)
        
        # –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
        layout.placed_items.remove(remnant)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏
        remaining_areas = self._calculate_remaining_areas_after_placement(remnant, placed_detail)
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏
        for area in remaining_areas:
            if area.width > 0 and area.height > 0:
                self._classify_and_add_area(area, layout)

    def _calculate_remaining_areas_after_placement(self, original_remnant: PlacedItem, placed_detail: PlacedItem) -> List[Rectangle]:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏ –≤ –æ—Å—Ç–∞—Ç–∫–µ"""
        areas = []
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if original_remnant.width > placed_detail.width:
            right_area = Rectangle(
                original_remnant.x + placed_detail.width,
                original_remnant.y,
                original_remnant.width - placed_detail.width,
                placed_detail.height
            )
            if right_area.width >= self.params.min_waste_side and right_area.height >= self.params.min_waste_side:
                areas.append(right_area)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
        if original_remnant.height > placed_detail.height:
            top_area = Rectangle(
                original_remnant.x,
                original_remnant.y + placed_detail.height,
                original_remnant.width,
                original_remnant.height - placed_detail.height
            )
            if top_area.width >= self.params.min_waste_side and top_area.height >= self.params.min_waste_side:
                areas.append(top_area)
        
        return areas

    def _classify_and_add_area(self, area: Rectangle, layout: SheetLayout):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç—å –∫–∞–∫ –æ—Å—Ç–∞—Ç–æ–∫ –∏–ª–∏ –æ—Ç—Ö–æ–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ —Ä–∞—Å–∫–ª–∞–¥–∫—É"""
        # –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ë–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        min_side = min(area.width, area.height)
        max_side = max(area.width, area.height)
        param_min = min(self.params.min_remnant_width, self.params.min_remnant_height)
        param_max = max(self.params.min_remnant_width, self.params.min_remnant_height)
        
        # –ë–û–õ–ï–ï –ì–ò–ë–ö–ò–ï –ü–†–ê–í–ò–õ–ê: –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø—Ä–∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏
        # –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏, —Å—á–∏—Ç–∞–µ–º –µ—ë –æ—Å—Ç–∞—Ç–∫–æ–º
        area_size = area.width * area.height
        min_remnant_area = self.params.min_remnant_width * self.params.min_remnant_height
        
        # –ü–†–ê–í–ò–õ–û 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
        if min_side >= param_min and max_side >= param_max:
            item_type = "remnant"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)")
        # –ü–†–ê–í–ò–õ–û 2: –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏
        elif area_size >= min_remnant_area * 0.6:  # –°–Ω–∏–∂–∞–µ–º —Å 80% –¥–æ 60%
            item_type = "remnant"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (–ø–æ –ø–ª–æ—â–∞–¥–∏: {area_size:.0f}‚â•{min_remnant_area*0.6:.0f})")
        # –ü–†–ê–í–ò–õ–û 3: –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–æ—Ä–æ–Ω –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è
        elif max_side >= param_max * 0.6 and min_side >= param_min * 0.4:  # –°–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            item_type = "remnant"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (–ø–æ —Å—Ç–æ—Ä–æ–Ω–∞–º: max={max_side:.0f}‚â•{param_max*0.6:.0f}, min={min_side:.0f}‚â•{param_min*0.4:.0f})")
        # –ü–†–ê–í–ò–õ–û 4: –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è –ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω
        elif max_side >= param_max * 0.8:  # –ï—Å–ª–∏ –±–æ–ª—å—à–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è
            item_type = "remnant"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (–ø–æ –±–æ–ª—å—à–æ–π —Å—Ç–æ—Ä–æ–Ω–µ: {max_side:.0f}‚â•{param_max*0.8:.0f})")
        # –ü–†–ê–í–ò–õ–û 5: –ï—Å–ª–∏ –æ–±–ª–∞—Å—Ç—å –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
        elif min_side >= param_min * 0.3 and max_side >= param_max * 0.5:  # –ï—â–µ –±–æ–ª–µ–µ –º—è–≥–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            item_type = "remnant"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö (–ø–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º)")
        else:
            item_type = "waste"
            logger.debug(f"üîß –û–ë–õ–ê–°–¢–¨: {area.width:.0f}x{area.height:.0f} - –û–¢–•–û–î (—Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è)")
        
        placed_item = PlacedItem(
            x=area.x,
            y=area.y,
            width=area.width,
            height=area.height,
            item_type=item_type,
            detail=None,
            is_rotated=False
        )
        layout.placed_items.append(placed_item)

    def _calculate_final_result(self, layouts: List[SheetLayout], unplaced: List[Detail], start_time: float) -> OptimizationResult:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        if not layouts and unplaced:
            return OptimizationResult(
                success=False,
                layouts=layouts,
                unplaced_details=unplaced,
                total_efficiency=0.0,
                total_waste_percent=100.0,
                total_cost=0.0,
                useful_remnants=[],
                optimization_time=time.time() - start_time,
                message="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏"
            )
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ—Ç–æ–º –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        # –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        layouts.sort(key=lambda layout: (
            not layout.sheet.is_remainder,  # –û—Å—Ç–∞—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏ (False < True)
            layout.sheet.material,          # –ü–æ –∞—Ä—Ç–∏–∫—É–ª—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            layout.sheet.area,              # –ü–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π)
            min(layout.sheet.width, layout.sheet.height),  # –ü–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
            layout.sheet.id                 # –ü–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        ))
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        remainder_count = len([l for l in layouts if l.sheet.is_remainder])
        material_count = len([l for l in layouts if not l.sheet.is_remainder])
        
        logger.info(f"üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–∏—Å—Ç—ã: {remainder_count} –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤, {material_count} –∏–∑ –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from collections import defaultdict
        material_groups = defaultdict(list)
        for layout in layouts:
            key = f"{'–û—Å—Ç–∞—Ç–æ–∫' if layout.sheet.is_remainder else '–ú–∞—Ç–µ—Ä–∏–∞–ª'} {layout.sheet.material}"
            material_groups[key].append(layout)
        
        for material_key, group_layouts in material_groups.items():
            sizes = [f"{int(l.sheet.width)}x{int(l.sheet.height)}" for l in group_layouts]
            logger.info(f"  üìã {material_key}: {len(group_layouts)} –ª–∏—Å—Ç–æ–≤, —Ä–∞–∑–º–µ—Ä—ã: {', '.join(sizes)}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_area = sum(layout.total_area for layout in layouts)
        total_used = sum(layout.used_area for layout in layouts)
        total_remnant_area = sum(layout.remnant_area for layout in layouts)
        total_waste_area = sum(layout.waste_area for layout in layouts)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ª–∏—Å—Ç–æ–≤
        remainder_layouts = [l for l in layouts if l.sheet.is_remainder]
        material_layouts = [l for l in layouts if not l.sheet.is_remainder]
        
        if remainder_layouts:
            remainder_area = sum(l.total_area for l in remainder_layouts)
            remainder_waste = sum(l.waste_area for l in remainder_layouts)
            remainder_waste_percent = (remainder_waste / remainder_area * 100) if remainder_area > 0 else 0
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤: {len(remainder_layouts)} –ª–∏—Å—Ç–æ–≤, "
                       f"–ø–ª–æ—â–∞–¥—å {remainder_area:.0f}, –æ—Ç—Ö–æ–¥—ã {remainder_waste_percent:.1f}% "
                       f"(–¥–æ–ø—É—Å—Ç–∏–º–æ {self.params.remainder_waste_percent:.1f}%)")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –æ—Å—Ç–∞—Ç–∫–æ–≤
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏–∑ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤
            total_remainder_sheets = len([l for l in layouts if l.sheet.is_remainder])
            used_remainders = len(remainder_layouts)
            if total_remainder_sheets > 0:
                usage_percent = used_remainders / total_remainder_sheets * 100
                logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤: {used_remainders}/{total_remainder_sheets} –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ "
                           f"({usage_percent:.1f}% —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)")
            else:
                logger.info(f"üéØ –û—Å—Ç–∞—Ç–∫–∏: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        
        if material_layouts:
            material_area = sum(l.total_area for l in material_layouts)
            material_waste = sum(l.waste_area for l in material_layouts)
            material_waste_percent = (material_waste / material_area * 100) if material_area > 0 else 0
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–µ–ª—å–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤: {len(material_layouts)} –ª–∏—Å—Ç–æ–≤, "
                       f"–ø–ª–æ—â–∞–¥—å {material_area:.0f}, –æ—Ç—Ö–æ–¥—ã {material_waste_percent:.1f}% "
                       f"(–¥–æ–ø—É—Å—Ç–∏–º–æ {self.params.target_waste_percent:.1f}%)")
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        useful_remnants = []
        for layout in layouts:
            for remnant in layout.get_remnants():
                useful_remnants.append(FreeRectangle(
                    remnant.x, remnant.y, 
                    remnant.width, remnant.height
                ))
        
        total_efficiency = ((total_used + total_remnant_area) / total_area * 100) if total_area > 0 else 0
        total_waste_percent = (total_waste_area / total_area * 100) if total_area > 0 else 0
        
        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost = sum(layout.sheet.cost_per_unit * layout.sheet.area for layout in layouts)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        for i, layout in enumerate(layouts):
            coverage = layout.get_coverage_percent()
            if coverage < 99.9:
                logger.error(f"‚ùå –õ–∏—Å—Ç {i+1}: –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ {coverage:.1f}%!")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        success = len(unplaced) == 0
        if success:
            message = f"–í—Å–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ {len(layouts)} –ª–∏—Å—Ç–∞—Ö"
        else:
            message = f"–†–∞–∑–º–µ—â–µ–Ω–æ {sum(len(l.get_placed_details()) for l in layouts)} –¥–µ—Ç–∞–ª–µ–π, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}"
        
        return OptimizationResult(
            success=success,
            layouts=layouts,
            unplaced_details=unplaced,
            total_efficiency=total_efficiency,
            total_waste_percent=total_waste_percent,
            total_cost=total_cost,
            useful_remnants=useful_remnants,
            optimization_time=time.time() - start_time,
            message=message
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
def optimize(details: List[dict], materials: List[dict], remainders: List[dict], 
            params: dict = None, progress_fn: Optional[Callable[[float], None]] = None, **kwargs) -> OptimizationResult:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º GUI
    """
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ v2.0 —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π 100% –ø–æ–∫—Ä—ã—Ç–∏—è")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if params:
            kwargs.update(params)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        detail_objects = []
        for detail_data in details:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = detail_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                detail = Detail(
                    id=str(detail_data.get('orderitemsid', detail_data.get('id', f'detail_{len(detail_objects)}'))),
                    width=float(detail_data.get('width', 0)),
                    height=float(detail_data.get('height', 0)),
                    material=str(detail_data.get('g_marking', '')),
                    quantity=int(detail_data.get('total_qty', detail_data.get('quantity', 1))),
                    can_rotate=True,
                    priority=int(detail_data.get('priority', 0)),
                    oi_name=str(detail_data.get('oi_name', '')),
                    goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –¥–µ—Ç–∞–ª—å
                )
                
                # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è XML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                detail.gp_marking = str(detail_data.get('gp_marking', ''))
                detail.orderno = str(detail_data.get('orderno', ''))
                detail.orderitemsid = detail_data.get('orderitemsid', '')
                if detail.width > 0 and detail.height > 0 and detail.material:
                    detail_objects.append(detail)
                    logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: {detail.oi_name}, –º–∞—Ç–µ—Ä–∏–∞–ª={detail.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        sheets = []
        for material_data in materials:
            try:
                qty = int(material_data.get('res_qty', material_data.get('quantity', 1)))
                if qty <= 0:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: qty={qty}")
                    continue
                if qty > 1000:
                    qty = 1000
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = material_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                for j in range(qty):
                    sheet = Sheet(
                        id=f"sheet_{material_data.get('g_marking', 'unknown')}_{j+1}",
                        width=float(material_data.get('width', 0)),
                        height=float(material_data.get('height', 0)),
                        material=str(material_data.get('g_marking', '')),
                        cost_per_unit=float(material_data.get('cost', 0)),
                        is_remainder=False,
                        goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –ª–∏—Å—Ç
                    )
                    if sheet.width > 0 and sheet.height > 0 and sheet.material:
                        sheets.append(sheet)
                        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {sheet.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        
        # –û—Å—Ç–∞—Ç–∫–∏
        for remainder_data in remainders:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = remainder_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –æ—Å—Ç–∞—Ç–∫–∞
                qty = int(remainder_data.get('qty', 1))
                if qty <= 0:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: qty={qty}")
                    continue
                if qty > 1000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å {qty} –¥–æ 1000")
                    qty = 1000
                
                logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞: –º–∞—Ç–µ—Ä–∏–∞–ª={remainder_data.get('g_marking', '')}, "
                           f"—Ä–∞–∑–º–µ—Ä={remainder_data.get('width', 0)}x{remainder_data.get('height', 0)}, "
                           f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞—Ç–∫–æ–≤
                for j in range(qty):
                    sheet = Sheet(
                        id=f"remainder_{remainder_data.get('id', len(sheets))}_{j+1}",
                        width=float(remainder_data.get('width', 0)),
                        height=float(remainder_data.get('height', 0)),
                        material=str(remainder_data.get('g_marking', '')),
                        cost_per_unit=float(remainder_data.get('cost', 0)),
                        is_remainder=True,
                        remainder_id=str(remainder_data.get('id', '')),
                        goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –æ—Å—Ç–∞—Ç–æ–∫
                    )
                    if sheet.width > 0 and sheet.height > 0 and sheet.material:
                        sheets.append(sheet)
                        logger.info(f"ÔøΩÔøΩ –°–æ–∑–¥–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ {j+1}/{qty}: {sheet.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        params_obj = OptimizationParams(
            min_remnant_width=float(kwargs.get('min_remnant_width', 100.0)),
            min_remnant_height=float(kwargs.get('min_remnant_height', 100.0)),
            target_waste_percent=float(kwargs.get('target_waste_percent', 5.0)),
            remainder_waste_percent=float(kwargs.get('remainder_waste_percent', 20.0)), # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            min_waste_side=float(kwargs.get('min_waste_side', 10.0)),
            use_warehouse_remnants=bool(kwargs.get('use_warehouse_remnants', True)),
            rotation_mode=RotationMode.ALLOW_90 if kwargs.get('allow_rotation', True) else RotationMode.NONE,
            cutting_width=float(kwargs.get('cutting_width', 3.0)),
            max_iterations_per_sheet=int(kwargs.get('max_iterations_per_sheet', 5))
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        optimizer = GuillotineOptimizer(params_obj)
        if progress_fn:
            optimizer.set_progress_callback(progress_fn)
        
        return optimizer.optimize(detail_objects, sheets)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return OptimizationResult(
            success=False,
            layouts=[],
            unplaced_details=[],
            total_efficiency=0.0,
            total_waste_percent=100.0,
            total_cost=0.0,
            useful_remnants=[],
            optimization_time=0.0,
            message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        ) 

