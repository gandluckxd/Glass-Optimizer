#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 2D —Ä–∞—Å–∫—Ä–æ—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ - –í–µ—Ä—Å–∏—è 2.0
–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å —Å–æ–±–ª—é–¥–µ–Ω–∏–µ–º min_waste_side
"""

import time
import copy
import logging
from dataclasses import dataclass, field
from typing import List, Dict, Optional, Tuple, Callable, Set
from enum import Enum
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class RotationMode(Enum):
    """–†–µ–∂–∏–º—ã –ø–æ–≤–æ—Ä–æ—Ç–∞ –¥–µ—Ç–∞–ª–µ–π"""
    NONE = "none"           # –ë–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞
    ALLOW_90 = "allow_90"   # –†–∞–∑—Ä–µ—à–∏—Ç—å –ø–æ–≤–æ—Ä–æ—Ç –Ω–∞ 90¬∞
    OPTIMAL = "optimal"     # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞–∏–ª—É—á—à–µ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞

@dataclass
class Detail:
    """–î–µ—Ç–∞–ª—å –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
    id: str
    width: float
    height: float
    material: str
    quantity: int = 1
    can_rotate: bool = True
    priority: int = 0
    oi_name: str = ""
    goodsid: Optional[int] = None  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ goodsid
    
    def __post_init__(self):
        self.area = self.width * self.height
        
    def get_rotated(self) -> 'Detail':
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—É—é –Ω–∞ 90¬∞ –∫–æ–ø–∏—é –¥–µ—Ç–∞–ª–∏"""
        rotated = copy.copy(self)
        rotated.width, rotated.height = self.height, self.width
        return rotated

@dataclass 
class Sheet:
    """–õ–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
    id: str
    width: float
    height: float
    material: str
    cost_per_unit: float = 0.0
    is_remainder: bool = False
    remainder_id: Optional[str] = None
    goodsid: Optional[int] = None  # –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ goodsid
    
    def __post_init__(self):
        self.area = self.width * self.height

@dataclass
class PlacedItem:
    """–†–∞–∑–º–µ—â–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–¥–µ—Ç–∞–ª—å –∏–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫/–æ—Ç—Ö–æ–¥)"""
    x: float
    y: float
    width: float
    height: float
    item_type: str  # "detail", "remnant", "waste"
    detail: Optional[Detail] = None
    is_rotated: bool = False
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height

@dataclass
class Rectangle:
    """–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å"""
    x: float
    y: float
    width: float
    height: float
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height
        
    def intersects(self, other: 'Rectangle') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–º"""
        return not (self.x2 <= other.x or other.x2 <= self.x or 
                   self.y2 <= other.y or other.y2 <= self.y)
                   
    def contains(self, other: 'Rectangle') -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –¥—Ä—É–≥–æ–π"""
        return (self.x <= other.x and self.y <= other.y and
                other.x2 <= self.x2 and other.y2 <= self.y2)

@dataclass
class SheetLayout:
    """–†–∞—Å–∫–ª–∞–¥–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º –ª–∏—Å—Ç–µ —Å –ü–û–õ–ù–´–ú –ø–æ–∫—Ä—ã—Ç–∏–µ–º"""
    sheet: Sheet
    placed_items: List[PlacedItem] = field(default_factory=list)
    
    def get_placed_details(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"""
        return [item for item in self.placed_items if item.item_type == "detail"]
    
    def get_remnants(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        return [item for item in self.placed_items if item.item_type == "remnant"]
    
    def get_waste(self) -> List[PlacedItem]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ö–æ–¥—ã"""
        return [item for item in self.placed_items if item.item_type == "waste"]
    
    @property
    def placed_details(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [PlacedDetail(
            detail=item.detail,
            x=item.x,
            y=item.y,
            width=item.width,
            height=item.height,
            is_rotated=item.is_rotated,
            sheet_id=self.sheet.id
        ) for item in self.get_placed_details()]
    
    @property
    def free_rectangles(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [FreeRectangle(r.x, r.y, r.width, r.height) for r in self.get_remnants()]
    
    @property
    def waste_rectangles(self):
        """–î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
        return [FreeRectangle(r.x, r.y, r.width, r.height) for r in self.get_waste()]
    
    @property
    def total_area(self):
        return self.sheet.area
    
    @property
    def used_area(self):
        return sum(item.area for item in self.get_placed_details())
    
    @property
    def remnant_area(self):
        return sum(item.area for item in self.get_remnants())
    
    @property
    def waste_area(self):
        return sum(item.area for item in self.get_waste())
    
    @property
    def efficiency(self):
        effective_used = self.used_area + self.remnant_area
        return (effective_used / self.total_area * 100) if self.total_area > 0 else 0
    
    @property
    def waste_percent(self):
        return (self.waste_area / self.total_area * 100) if self.total_area > 0 else 0
    
    def get_coverage_percent(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç–∏—è –ª–∏—Å—Ç–∞"""
        total_covered = sum(item.area for item in self.placed_items)
        return (total_covered / self.total_area * 100) if self.total_area > 0 else 0
    
    def has_bad_waste(self, min_waste_side: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ö–æ–¥—ã —Å —Å—Ç–æ—Ä–æ–Ω–æ–π –º–µ–Ω—å—à–µ min_waste_side"""
        for waste in self.get_waste():
            if min(waste.width, waste.height) < min_waste_side:
                return True
        return False

# –°—Ç–∞—Ä—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
@dataclass
class PlacedDetail:
    detail: Detail
    x: float
    y: float
    width: float
    height: float
    is_rotated: bool = False
    sheet_id: str = ""
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height

@dataclass
class FreeRectangle:
    x: float
    y: float
    width: float
    height: float
    
    def __post_init__(self):
        self.x2 = self.x + self.width
        self.y2 = self.y + self.height
        self.area = self.width * self.height

@dataclass
class OptimizationParams:
    """–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    min_remnant_width: float = 100.0
    min_remnant_height: float = 100.0
    target_waste_percent: float = 5.0
    min_waste_side: float = 10.0
    use_warehouse_remnants: bool = True
    rotation_mode: RotationMode = RotationMode.ALLOW_90
    force_adjacent_placement: bool = True
    max_waste_rectangles: int = 10
    cutting_width: float = 3.0
    max_iterations_per_sheet: int = 5  # –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –ª–∏—Å—Ç–∞

@dataclass
class OptimizationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    success: bool
    layouts: List[SheetLayout]
    unplaced_details: List[Detail]
    total_efficiency: float
    total_waste_percent: float
    total_cost: float
    useful_remnants: List[FreeRectangle]
    optimization_time: float
    message: str = ""
    
    def __post_init__(self):
        self.total_sheets = len(self.layouts)
        self.total_placed_details = sum(len(layout.placed_details) for layout in self.layouts)
        self.sheets = self.layouts  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

class GuillotineOptimizer:
    """
    –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è
    –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç 100% –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ –±–µ–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    """
    
    def __init__(self, params: OptimizationParams):
        self.params = params
        self.progress_callback: Optional[Callable[[float], None]] = None

    def set_progress_callback(self, callback: Callable[[float], None]):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ callback –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_callback = callback

    def _report_progress(self, progress: float):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if self.progress_callback:
            self.progress_callback(progress)

    def optimize(self, details: List[Detail], sheets: List[Sheet]) -> OptimizationResult:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        start_time = time.time()
        
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é v2.0: {len(details)} –¥–µ—Ç–∞–ª–µ–π, {len(sheets)} –ª–∏—Å—Ç–æ–≤")
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        expanded_details = self._prepare_details(details)
        sorted_sheets = self._prepare_sheets(sheets)
        
        self._report_progress(10.0)
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
        material_groups = self._group_details_by_material(expanded_details)
        
        self._report_progress(20.0)
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        all_layouts = []
        all_unplaced = []
        progress_step = 70.0 / len(material_groups)
        current_progress = 20.0
        
        for material, material_details in material_groups.items():
            logger.info(f"üì¶ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª {material}: {len(material_details)} –¥–µ—Ç–∞–ª–µ–π")
            
            material_sheets = [s for s in sorted_sheets if s.material == material]
            layouts, unplaced = self._optimize_material(material_details, material_sheets)
            
            all_layouts.extend(layouts)
            all_unplaced.extend(unplaced)
            
            current_progress += progress_step
            self._report_progress(current_progress)
        
        self._report_progress(95.0)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = self._calculate_final_result(all_layouts, all_unplaced, start_time)
        
        self._report_progress(100.0)
        
        logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {result.optimization_time:.2f}—Å")
        logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.message}")
        
        return result

    def _prepare_details(self, details: List[Detail]) -> List[Detail]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π"""
        expanded = []
        
        for detail in details:
            for i in range(detail.quantity):
                detail_copy = copy.deepcopy(detail)
                detail_copy.id = f"{detail.id}_{i+1}"
                detail_copy.quantity = 1
                expanded.append(detail_copy)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ –¥–µ—Ç–∞–ª–∏
        expanded.sort(key=lambda d: (-d.area, -d.priority, d.id))
        
        return expanded

    def _prepare_sheets(self, sheets: List[Sheet]) -> List[Sheet]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ª–∏—Å—Ç–æ–≤"""
        # –û—Å—Ç–∞—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–º–∏
        sheets.sort(key=lambda s: (not s.is_remainder, -s.area))
        return sheets

    def _group_details_by_material(self, details: List[Detail]) -> Dict[str, List[Detail]]:
        """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º"""
        groups = {}
        for detail in details:
            if detail.material not in groups:
                groups[detail.material] = []
            groups[detail.material].append(detail)
        return groups

    def _optimize_material(self, details: List[Detail], sheets: List[Sheet]) -> Tuple[List[SheetLayout], List[Detail]]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        layouts = []
        unplaced_details = details.copy()
        
        for sheet in sheets:
            if not unplaced_details:
                break
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ä–æ—à—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É
            best_layout = None
            best_score = float('-inf')
            
            # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
            for iteration in range(self.params.max_iterations_per_sheet):
                layout = self._create_sheet_layout_guillotine(sheet, unplaced_details.copy(), iteration)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∫—Ä—ã—Ç–∏–µ
                coverage = layout.get_coverage_percent()
                if coverage < 99.9:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å ~100%
                    logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞: {coverage:.1f}%")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–ª–æ—Ö–∏—Ö –æ—Ç—Ö–æ–¥–æ–≤
                if layout.has_bad_waste(self.params.min_waste_side):
                    logger.info(f"üîÑ –ò—Ç–µ—Ä–∞—Ü–∏—è {iteration+1}: –µ—Å—Ç—å –æ—Ç—Ö–æ–¥—ã < {self.params.min_waste_side}–º–º, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É")
                    continue
                
                # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞—Å–∫–ª–∞–¥–∫—É
                score = self._evaluate_layout(layout)
                if score > best_score:
                    best_score = score
                    best_layout = layout
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω—É—é —Ä–∞—Å–∫–ª–∞–¥–∫—É, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
                if layout.waste_percent <= self.params.target_waste_percent:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ —Å {layout.waste_percent:.1f}% –æ—Ç—Ö–æ–¥–æ–≤")
                    break
            
            if best_layout and best_layout.get_placed_details():
                layouts.append(best_layout)
                # –£–¥–∞–ª—è–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏
                placed_ids = {item.detail.id for item in best_layout.get_placed_details()}
                unplaced_details = [d for d in unplaced_details if d.id not in placed_ids]
                
                logger.info(f"üìã –õ–∏—Å—Ç {sheet.id}: —Ä–∞–∑–º–µ—â–µ–Ω–æ {len(best_layout.get_placed_details())} –¥–µ—Ç–∞–ª–µ–π, "
                           f"–ø–æ–∫—Ä—ã—Ç–∏–µ {best_layout.get_coverage_percent():.1f}%, "
                           f"–æ—Ç—Ö–æ–¥—ã {best_layout.waste_percent:.1f}%")
        
        return layouts, unplaced_details

    def _create_sheet_layout_guillotine(self, sheet: Sheet, details: List[Detail], iteration: int) -> SheetLayout:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –º–µ—Ç–æ–¥–æ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞—Å–∫—Ä–æ—è —Å –ì–ê–†–ê–ù–¢–ò–ï–ô 100% –ø–æ–∫—Ä—ã—Ç–∏—è"""
        layout = SheetLayout(sheet=sheet)
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–≥–æ –ª–∏—Å—Ç–∞ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        free_areas = [Rectangle(0, 0, sheet.width, sheet.height)]
        
        # –í–∞—Ä—å–∏—Ä—É–µ–º –ø–æ—Ä—è–¥–æ–∫ –¥–µ—Ç–∞–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Ç–µ—Ä–∞—Ü–∏–∏
        if iteration > 0:
            # –°–ª—É—á–∞–π–Ω–∞—è –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
            random.seed(42 + iteration)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏
            details = details.copy()
            random.shuffle(details)
        
        placed_detail_ids = set()
        
        # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª–∏
        while details and free_areas:
            best_placement = None
            best_score = float('inf')
            best_area_idx = -1
            
            for area_idx, area in enumerate(free_areas):
                for detail in details:
                    if detail.id in placed_detail_ids:
                        continue
                    
                    # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø–æ–≤–æ—Ä–æ—Ç–∞ –∏ —Å –ø–æ–≤–æ—Ä–æ—Ç–æ–º
                    orientations = [(detail.width, detail.height, False)]
                    if self.params.rotation_mode != RotationMode.NONE and detail.can_rotate:
                        orientations.append((detail.height, detail.width, True))
                    
                    for width, height, is_rotated in orientations:
                        if area.width >= width and area.height >= height:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑—Ä–µ–∑ —Å–æ–∑–¥–∞—Å—Ç –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
                            if self._is_valid_guillotine_cut(area, width, height):
                                score = self._calculate_guillotine_score(area, width, height, is_rotated)
                                if score < best_score:
                                    best_score = score
                                    best_placement = (detail, width, height, is_rotated, area)
                                    best_area_idx = area_idx
            
            if not best_placement:
                break
            
            # –†–∞–∑–º–µ—â–∞–µ–º –¥–µ—Ç–∞–ª—å
            detail, width, height, is_rotated, area = best_placement
            
            placed_item = PlacedItem(
                x=area.x,
                y=area.y,
                width=width,
                height=height,
                item_type="detail",
                detail=detail,
                is_rotated=is_rotated
            )
            layout.placed_items.append(placed_item)
            placed_detail_ids.add(detail.id)
            details.remove(detail)
            
            # –î–µ–ª–∞–µ–º –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –∏ –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –æ–±–ª–∞—Å—Ç–∏
            new_areas = self._guillotine_cut(area, width, height)
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –Ω–æ–≤—ã–º–∏
            free_areas[best_area_idx:best_area_idx+1] = new_areas
        
        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏
        self._fill_remaining_areas(layout, free_areas)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        coverage = layout.get_coverage_percent()
        if coverage < 99.9:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê: –ü–æ–∫—Ä—ã—Ç–∏–µ –ª–∏—Å—Ç–∞ —Ç–æ–ª—å–∫–æ {coverage:.1f}%!")
        
        return layout

    def _is_valid_guillotine_cut(self, area: Rectangle, detail_width: float, detail_height: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–∑–¥–∞—Å—Ç –ª–∏ –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –æ—Å—Ç–∞—Ç–∫–∏"""
        # –û—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ–∑–∞
        remainder_right = area.width - detail_width
        remainder_top = area.height - detail_height
        
        # –ï—Å–ª–∏ –æ—Å—Ç–∞—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–∞–ª, –Ω–æ –Ω–µ –Ω—É–ª–µ–≤–æ–π - —ç—Ç–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ
        if 0 < remainder_right < self.params.min_waste_side:
            return False
        if 0 < remainder_top < self.params.min_waste_side:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
        if remainder_right > 0 and remainder_top > 0:
            # –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ L-–æ–±—Ä–∞–∑–Ω–∞—è –æ–±–ª–∞—Å—Ç—å, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ —á–∞—Å—Ç–∏
            if detail_height < self.params.min_waste_side:
                return False
            if remainder_top < self.params.min_waste_side:
                return False
        
        return True

    def _calculate_guillotine_score(self, area: Rectangle, width: float, height: float, is_rotated: bool = False) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –¥–ª—è –≥–∏–ª—å–æ—Ç–∏–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è"""
        # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—Ç –æ—Å—Ç–∞—Ç–∫–∏
        waste = area.area - (width * height)
        
        # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞–º
        if abs(area.width - width) < 0.1 or abs(area.height - height) < 0.1:
            waste *= 0.5
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤–æ—Ä–æ—Ç –¥–µ—Ç–∞–ª–∏ (–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é)
        if is_rotated:
            waste *= 1.2
        
        return waste

    def _guillotine_cut(self, area: Rectangle, used_width: float, used_height: float) -> List[Rectangle]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≥–∏–ª—å–æ—Ç–∏–Ω–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –æ–±–ª–∞—Å—Ç–∏"""
        new_areas = []
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if area.width > used_width:
            right_area = Rectangle(
                area.x + used_width,
                area.y,
                area.width - used_width,
                used_height
            )
            if right_area.width >= self.params.min_waste_side and right_area.height >= self.params.min_waste_side:
                new_areas.append(right_area)
        
        # –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É)
        if area.height > used_height:
            top_area = Rectangle(
                area.x,
                area.y + used_height,
                area.width,
                area.height - used_height
            )
            if top_area.width >= self.params.min_waste_side and top_area.height >= self.params.min_waste_side:
                new_areas.append(top_area)
        
        return new_areas

    def _fill_remaining_areas(self, layout: SheetLayout, free_areas: List[Rectangle]):
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–±–ª–∞—Å—Ç–∏ –∫–∞–∫ –æ—Å—Ç–∞—Ç–∫–∏ –∏–ª–∏ –æ—Ç—Ö–æ–¥—ã"""
        print(f"üîß OPTIMIZER: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ–±–ª–∞—Å—Ç–µ–π. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–ª–∞—Å—Ç–µ–π: {len(free_areas)}")
        
        for i, area in enumerate(free_areas):
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å
            min_side = min(area.width, area.height)
            max_side = max(area.width, area.height)
            param_min = min(self.params.min_remnant_width, self.params.min_remnant_height)
            param_max = max(self.params.min_remnant_width, self.params.min_remnant_height)
            
            if min_side >= param_min and max_side >= param_max:
                item_type = "remnant"
                print(f"üîß OPTIMIZER: –û–±–ª–∞—Å—Ç—å {i+1}: {area.width:.0f}x{area.height:.0f} - –î–ï–õ–û–í–û–ô –û–°–¢–ê–¢–û–ö")
            else:
                item_type = "waste"
                print(f"üîß OPTIMIZER: –û–±–ª–∞—Å—Ç—å {i+1}: {area.width:.0f}x{area.height:.0f} - –û–¢–•–û–î (min_side={min_side:.0f}, param_min={param_min:.0f})")
            
            placed_item = PlacedItem(
                x=area.x,
                y=area.y,
                width=area.width,
                height=area.height,
                item_type=item_type,
                detail=None,
                is_rotated=False
            )
            layout.placed_items.append(placed_item)
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        remnants_count = len([item for item in layout.placed_items if item.item_type == "remnant"])
        waste_count = len([item for item in layout.placed_items if item.item_type == "waste"])
        print(f"üîß OPTIMIZER: –ò—Ç–æ–≥–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –î–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: {remnants_count}, –û—Ç—Ö–æ–¥–æ–≤: {waste_count}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ
        total_area_covered = sum(item.area for item in layout.placed_items)
        sheet_area = layout.sheet.area
        
        if abs(total_area_covered - sheet_area) > 0.1:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–æ–∫—Ä—ã—Ç–æ {total_area_covered:.1f} –∏–∑ {sheet_area:.1f} –º–º¬≤")
            
            # –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
            self._emergency_fill_gaps(layout)

    def _emergency_fill_gaps(self, layout: SheetLayout):
        """–ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π"""
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –∑–∞–Ω—è—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        sheet_width = layout.sheet.width
        sheet_height = layout.sheet.height
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –Ω–µ–ø–æ–∫—Ä—ã—Ç—ã–µ –æ–±–ª–∞—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        gaps = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–∫—É —Ç–æ—á–µ–∫
        step = self.params.min_waste_side
        for x in range(0, int(sheet_width), int(step)):
            for y in range(0, int(sheet_height), int(step)):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–∫—Ä—ã—Ç–∞ –ª–∏ —ç—Ç–∞ —Ç–æ—á–∫–∞
                covered = False
                for item in layout.placed_items:
                    if item.x <= x < item.x2 and item.y <= y < item.y2:
                        covered = True
                        break
                
                if not covered:
                    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–º–µ—Ä –Ω–µ–ø–æ–∫—Ä—ã—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                    max_width = sheet_width - x
                    max_height = sheet_height - y
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                    for item in layout.placed_items:
                        if item.x > x and item.y <= y < item.y2:
                            max_width = min(max_width, item.x - x)
                        if item.y > y and item.x <= x < item.x2:
                            max_height = min(max_height, item.y - y)
                    
                    if max_width > 0 and max_height > 0:
                        gap = Rectangle(x, y, max_width, max_height)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –æ–±–ª–∞—Å—Ç—å
                        is_duplicate = False
                        for existing_gap in gaps:
                            if existing_gap.contains(gap):
                                is_duplicate = True
                                break
                        
                        if not is_duplicate:
                            gaps.append(gap)
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ—Ç—Ö–æ–¥
                            placed_item = PlacedItem(
                                x=gap.x,
                                y=gap.y,
                                width=gap.width,
                                height=gap.height,
                                item_type="waste",
                                detail=None,
                                is_rotated=False
                            )
                            layout.placed_items.append(placed_item)
                            
                            logger.warning(f"‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π —É—á–∞—Å—Ç–æ–∫: {gap.x:.0f},{gap.y:.0f} {gap.width:.0f}x{gap.height:.0f}")

    def _evaluate_layout(self, layout: SheetLayout) -> float:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–∫–ª–∞–¥–∫–∏"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:
        # 1. –ú–∏–Ω–∏–º—É–º –æ—Ç—Ö–æ–¥–æ–≤ (–≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–µ—Ä–∏–π)
        # 2. –ú–∞–∫—Å–∏–º—É–º –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
        # 3. –ö–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
        
        score = 0.0
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ –æ—Ç—Ö–æ–¥—ã
        score -= layout.waste_percent * 100
        
        # –ë–æ–Ω—É—Å –∑–∞ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        score += layout.remnant_area / layout.total_area * 50
        
        # –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        score += len(layout.get_placed_details()) * 10
        
        return score

    def _calculate_final_result(self, layouts: List[SheetLayout], unplaced: List[Detail], start_time: float) -> OptimizationResult:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        if not layouts and unplaced:
            return OptimizationResult(
                success=False,
                layouts=layouts,
                unplaced_details=unplaced,
                total_efficiency=0.0,
                total_waste_percent=100.0,
                total_cost=0.0,
                useful_remnants=[],
                optimization_time=time.time() - start_time,
                message="–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –¥–µ—Ç–∞–ª–∏"
            )
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∏—Å—Ç—ã: —Å–Ω–∞—á–∞–ª–∞ –¥–µ–ª–æ–≤—ã–µ –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ—Ç–æ–º –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        # –í–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Ä–∞–∑–º–µ—Ä—É (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        layouts.sort(key=lambda layout: (
            not layout.sheet.is_remainder,  # –û—Å—Ç–∞—Ç–∫–∏ –ø–µ—Ä–≤—ã–º–∏ (False < True)
            layout.sheet.material,          # –ü–æ –∞—Ä—Ç–∏–∫—É–ª—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
            layout.sheet.area,              # –ü–æ –ø–ª–æ—â–∞–¥–∏ (–æ—Ç –º–µ–Ω—å—à–µ–π –∫ –±–æ–ª—å—à–µ–π)
            min(layout.sheet.width, layout.sheet.height),  # –ü–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
            layout.sheet.id                 # –ü–æ ID –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        ))
        # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        remainder_count = len([l for l in layouts if l.sheet.is_remainder])
        material_count = len([l for l in layouts if not l.sheet.is_remainder])
        
        logger.info(f"üìä –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ª–∏—Å—Ç—ã: {remainder_count} –∏–∑ –æ—Å—Ç–∞—Ç–∫–æ–≤, {material_count} –∏–∑ –ø–æ–ª–Ω–æ—Ä–∞–∑–º–µ—Ä–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from collections import defaultdict
        material_groups = defaultdict(list)
        for layout in layouts:
            key = f"{'–û—Å—Ç–∞—Ç–æ–∫' if layout.sheet.is_remainder else '–ú–∞—Ç–µ—Ä–∏–∞–ª'} {layout.sheet.material}"
            material_groups[key].append(layout)
        
        for material_key, group_layouts in material_groups.items():
            sizes = [f"{int(l.sheet.width)}x{int(l.sheet.height)}" for l in group_layouts]
            logger.info(f"  üìã {material_key}: {len(group_layouts)} –ª–∏—Å—Ç–æ–≤, —Ä–∞–∑–º–µ—Ä—ã: {', '.join(sizes)}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_area = sum(layout.total_area for layout in layouts)
        total_used = sum(layout.used_area for layout in layouts)
        total_remnant_area = sum(layout.remnant_area for layout in layouts)
        total_waste_area = sum(layout.waste_area for layout in layouts)
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–µ–∑–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏
        useful_remnants = []
        for layout in layouts:
            for remnant in layout.get_remnants():
                useful_remnants.append(FreeRectangle(
                    remnant.x, remnant.y, 
                    remnant.width, remnant.height
                ))
        
        total_efficiency = ((total_used + total_remnant_area) / total_area * 100) if total_area > 0 else 0
        total_waste_percent = (total_waste_area / total_area * 100) if total_area > 0 else 0
        
        # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        total_cost = sum(layout.sheet.cost_per_unit * layout.sheet.area for layout in layouts)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        for i, layout in enumerate(layouts):
            coverage = layout.get_coverage_percent()
            if coverage < 99.9:
                logger.error(f"‚ùå –õ–∏—Å—Ç {i+1}: –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ {coverage:.1f}%!")
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        success = len(unplaced) == 0
        if success:
            message = f"–í—Å–µ –¥–µ—Ç–∞–ª–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω—ã –Ω–∞ {len(layouts)} –ª–∏—Å—Ç–∞—Ö"
        else:
            message = f"–†–∞–∑–º–µ—â–µ–Ω–æ {sum(len(l.get_placed_details()) for l in layouts)} –¥–µ—Ç–∞–ª–µ–π, –Ω–µ —Ä–∞–∑–º–µ—â–µ–Ω–æ: {len(unplaced)}"
        
        return OptimizationResult(
            success=success,
            layouts=layouts,
            unplaced_details=unplaced,
            total_efficiency=total_efficiency,
            total_waste_percent=total_waste_percent,
            total_cost=total_cost,
            useful_remnants=useful_remnants,
            optimization_time=time.time() - start_time,
            message=message
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
def optimize(details: List[dict], materials: List[dict], remainders: List[dict], 
            params: dict = None, progress_fn: Optional[Callable[[float], None]] = None, **kwargs) -> OptimizationResult:
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º GUI
    """
    
    try:
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ v2.0 —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π 100% –ø–æ–∫—Ä—ã—Ç–∏—è")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if params:
            kwargs.update(params)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        detail_objects = []
        for detail_data in details:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = detail_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                detail = Detail(
                    id=str(detail_data.get('orderitemsid', detail_data.get('id', f'detail_{len(detail_objects)}'))),
                    width=float(detail_data.get('width', 0)),
                    height=float(detail_data.get('height', 0)),
                    material=str(detail_data.get('g_marking', '')),
                    quantity=int(detail_data.get('total_qty', detail_data.get('quantity', 1))),
                    can_rotate=True,
                    priority=int(detail_data.get('priority', 0)),
                    oi_name=str(detail_data.get('oi_name', '')),
                    goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –¥–µ—Ç–∞–ª—å
                )
                
                # –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è XML –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                detail.gp_marking = str(detail_data.get('gp_marking', ''))
                detail.orderno = str(detail_data.get('orderno', ''))
                detail.orderitemsid = detail_data.get('orderitemsid', '')
                if detail.width > 0 and detail.height > 0 and detail.material:
                    detail_objects.append(detail)
                    logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∞ –¥–µ—Ç–∞–ª—å: {detail.oi_name}, –º–∞—Ç–µ—Ä–∏–∞–ª={detail.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–∏: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã
        sheets = []
        for material_data in materials:
            try:
                qty = int(material_data.get('res_qty', material_data.get('quantity', 1)))
                if qty <= 0:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: qty={qty}")
                    continue
                if qty > 1000:
                    qty = 1000
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = material_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                for j in range(qty):
                    sheet = Sheet(
                        id=f"sheet_{material_data.get('g_marking', 'unknown')}_{j+1}",
                        width=float(material_data.get('width', 0)),
                        height=float(material_data.get('height', 0)),
                        material=str(material_data.get('g_marking', '')),
                        cost_per_unit=float(material_data.get('cost', 0)),
                        is_remainder=False,
                        goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –ª–∏—Å—Ç
                    )
                    if sheet.width > 0 and sheet.height > 0 and sheet.material:
                        sheets.append(sheet)
                        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω –ª–∏—Å—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {sheet.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {e}")
        
        # –û—Å—Ç–∞—Ç–∫–∏
        for remainder_data in remainders:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º goodsid
                goodsid = remainder_data.get('goodsid')
                if goodsid:
                    goodsid = int(goodsid)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ –æ—Å—Ç–∞—Ç–∫–∞
                qty = int(remainder_data.get('qty', 1))
                if qty <= 0:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º: qty={qty}")
                    continue
                if qty > 1000:  # –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                    logger.warning(f"‚ö†Ô∏è –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Å {qty} –¥–æ 1000")
                    qty = 1000
                
                logger.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞—Ç–∫–∞: –º–∞—Ç–µ—Ä–∏–∞–ª={remainder_data.get('g_marking', '')}, "
                           f"—Ä–∞–∑–º–µ—Ä={remainder_data.get('width', 0)}x{remainder_data.get('height', 0)}, "
                           f"–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty}")
                
                # –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Å—Ç–∞—Ç–∫–æ–≤
                for j in range(qty):
                    sheet = Sheet(
                        id=f"remainder_{remainder_data.get('id', len(sheets))}_{j+1}",
                        width=float(remainder_data.get('width', 0)),
                        height=float(remainder_data.get('height', 0)),
                        material=str(remainder_data.get('g_marking', '')),
                        cost_per_unit=float(remainder_data.get('cost', 0)),
                        is_remainder=True,
                        remainder_id=str(remainder_data.get('id', '')),
                        goodsid=goodsid  # –ü–µ—Ä–µ–¥–∞–µ–º goodsid –≤ –æ—Å—Ç–∞—Ç–æ–∫
                    )
                    if sheet.width > 0 and sheet.height > 0 and sheet.material:
                        sheets.append(sheet)
                        logger.info(f"üìÑ –°–æ–∑–¥–∞–Ω –æ—Å—Ç–∞—Ç–æ–∫ {j+1}/{qty}: {sheet.material}, goodsid={goodsid}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Å—Ç–∞—Ç–∫–∞: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        params_obj = OptimizationParams(
            min_remnant_width=float(kwargs.get('min_remnant_width', 100.0)),
            min_remnant_height=float(kwargs.get('min_remnant_height', 100.0)),
            target_waste_percent=float(kwargs.get('target_waste_percent', 5.0)),
            min_waste_side=float(kwargs.get('min_waste_side', 10.0)),
            use_warehouse_remnants=bool(kwargs.get('use_warehouse_remnants', True)),
            rotation_mode=RotationMode.ALLOW_90 if kwargs.get('allow_rotation', True) else RotationMode.NONE,
            cutting_width=float(kwargs.get('cutting_width', 3.0)),
            max_iterations_per_sheet=int(kwargs.get('max_iterations_per_sheet', 5))
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
        optimizer = GuillotineOptimizer(params_obj)
        if progress_fn:
            optimizer.set_progress_callback(progress_fn)
        
        return optimizer.optimize(detail_objects, sheets)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return OptimizationResult(
            success=False,
            layouts=[],
            unplaced_details=[],
            total_efficiency=0.0,
            total_waste_percent=100.0,
            total_cost=0.0,
            useful_remnants=[],
            optimization_time=0.0,
            message=f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        ) 