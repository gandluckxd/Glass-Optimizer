"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ 2D —Ä–∞—Å–∫—Ä–æ—è
"""

import threading
import json
import os
from PyQt5.QtCore import QObject, pyqtSignal
from core.api_client import get_details_raw, get_warehouse_main_material, get_warehouse_remainders, check_api_connection
from core.optimizer_core import optimize




class DataManager(QObject):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏"""
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è thread-safe –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    debug_step_signal = pyqtSignal(str)
    error_signal = pyqtSignal(str, str, str)  # title, message, icon
    success_signal = pyqtSignal()
    data_loaded_signal = pyqtSignal(dict, list, list)  # details_data, remainders, materials
    restore_button_signal = pyqtSignal()
    
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    optimization_result_signal = pyqtSignal(object)  # OptimizationResult
    optimization_error_signal = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.current_details = []
        self.current_materials = []
        self.current_remainders = []
        self.optimization_result = None
    
    def load_data_async(self, grorderid):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å API"""
        if not check_api_connection():
            self.error_signal.emit("API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "warning")
            return
        
        def load_data():
            try:
                self.debug_step_signal.emit(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ {grorderid}...")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π
                details_data = get_details_raw(grorderid)
                self.debug_step_signal.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(details_data.get('details', []))} –¥–µ—Ç–∞–ª–µ–π")
                
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ goodsid –∏–∑ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                unique_goodsids = set()
                for detail in details_data.get('details', []):
                    goodsid = detail.get('goodsid')
                    if goodsid:
                        unique_goodsids.add(goodsid)
                
                self.debug_step_signal.emit(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(unique_goodsids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ goodsid
                all_remainders = []
                all_materials = []
                
                for goodsid in unique_goodsids:
                    try:
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤
                        remainders_response = get_warehouse_remainders(goodsid)
                        if remainders_response and 'remainders' in remainders_response:
                            all_remainders.extend(remainders_response['remainders'])
                        
                        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                        materials_response = get_warehouse_main_material(goodsid)
                        if materials_response and 'main_material' in materials_response:
                            all_materials.extend(materials_response['main_material'])
                            
                    except Exception as e:
                        self.debug_step_signal.emit(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è goodsid {goodsid}: {e}")
                        continue
                
                self.debug_step_signal.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_remainders)} –æ—Å—Ç–∞—Ç–∫–æ–≤")
                self.debug_step_signal.emit(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(all_materials)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ UI
                self.data_loaded_signal.emit(details_data, all_remainders, all_materials)
                self.success_signal.emit()
                
            except Exception as e:
                self.debug_step_signal.emit(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                self.error_signal.emit("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", str(e), "critical")
            finally:
                self.restore_button_signal.emit()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=load_data, daemon=True)
        thread.start()
    
    def update_data(self, details_data, remainders, materials):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.current_details = details_data.get('details', [])
        self.current_materials = materials
        self.current_remainders = remainders
    
    def run_optimization_async(self, progress_callback=None):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"""
        def run_optimization():
            try:
                if progress_callback:
                    def progress_wrapper(percent):
                        # Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª
                        progress_callback(percent)
                else:
                    progress_wrapper = None
                
                # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑ core.config (—Å –º–∞–ø–ø–∏–Ω–≥–æ–º –∫–ª—é—á–µ–π)
                try:
                    from core.config import DEFAULT_OPTIMIZATION_PARAMS as DEFAULTS
                except Exception:
                    DEFAULTS = {}

                params = {}
                if DEFAULTS:
                    # –ú–∞–ø–ø–∏–Ω–≥ –∏–º—ë–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ GUI/CORE -> optimize()
                    if 'target_waste_percent' in DEFAULTS:
                        params['target_waste_percent'] = DEFAULTS['target_waste_percent']
                    if 'remainder_waste_percent' in DEFAULTS:
                        params['remainder_waste_percent'] = DEFAULTS['remainder_waste_percent']
                    if 'allow_rotation' in DEFAULTS:
                        params['allow_rotation'] = DEFAULTS['allow_rotation']
                    # GUI: min_cut_size -> optimize: min_waste_side
                    if 'min_cut_size' in DEFAULTS:
                        params['min_waste_side'] = DEFAULTS['min_cut_size']
                    # GUI: blade_width -> optimize: cutting_width
                    if 'blade_width' in DEFAULTS:
                        params['cutting_width'] = DEFAULTS['blade_width']
                    # GUI: use_remainders -> optimize: use_warehouse_remnants
                    if 'use_remainders' in DEFAULTS:
                        params['use_warehouse_remnants'] = DEFAULTS['use_remainders']
                    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã —Ä–∞–∑–º–µ—Ä—ã –¥–µ–ª–æ–≤—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤
                    if 'min_remnant_width' in DEFAULTS:
                        params['min_remnant_width'] = DEFAULTS['min_remnant_width']
                    if 'min_remnant_height' in DEFAULTS:
                        params['min_remnant_height'] = DEFAULTS['min_remnant_height']

                result = optimize(
                    details=self.current_details,
                    materials=self.current_materials,
                    remainders=self.current_remainders,
                    params=params if params else None,
                    progress_fn=progress_wrapper
                )
                
                if result and result.success:
                    self.optimization_result = result
                    self.optimization_result_signal.emit(result)
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                    error_msg = result.message if result else "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                    self.optimization_error_signal.emit(error_msg)
                    
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {str(e)}"
                self.optimization_error_signal.emit(error_msg)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=run_optimization, daemon=True)
        thread.start()
    
    def get_optimization_params(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        from gui.config import OPTIMIZATION_DEFAULTS
        return OPTIMIZATION_DEFAULTS.copy()
    
    def has_data(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return bool(self.current_details and self.current_materials and self.current_remainders)
    
    def has_optimization_result(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        return self.optimization_result is not None
    
    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        self.current_details = []
        self.current_materials = []
        self.current_remainders = []
        self.optimization_result = None 